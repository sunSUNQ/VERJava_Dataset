Index: tc6.0.x/trunk/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/tomcat/util/net/jsse/JSSESupport.java	(revision 881773)
+++ tc6.0.x/trunk/java/org/apache/tomcat/util/net/jsse/JSSESupport.java	(revision 881774)
@@ -170,7 +170,10 @@
                 break;
             }
         }
-        ssl.setSoTimeout(oldTimeout);
+        // If legacy re-negotiation is disabled, socked could be closed here 
+        if (!ssl.isClosed()) {
+            ssl.setSoTimeout(oldTimeout);
+        }
         if (listener.completed == false) {
             throw new SocketException("SSL Cert handshake timeout");
         }
Index: tc6.0.x/trunk/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java	(revision 881773)
+++ tc6.0.x/trunk/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java	(revision 881774)
@@ -42,6 +42,8 @@
 import java.util.Vector;
 
 import javax.net.ssl.CertPathTrustManagerParameters;
+import javax.net.ssl.HandshakeCompletedEvent;
+import javax.net.ssl.HandshakeCompletedListener;
 import javax.net.ssl.KeyManager;
 import javax.net.ssl.KeyManagerFactory;
 import javax.net.ssl.ManagerFactoryParameters;
@@ -99,6 +101,7 @@
     protected String clientAuth = "false";
     protected SSLServerSocketFactory sslProxy = null;
     protected String[] enabledCiphers;
+    protected boolean allowUnsafeLegacyRenegotiation = false;
 
     /**
      * Flag to state that we require client authentication.
@@ -149,6 +152,10 @@
         SSLSocket asock = null;
         try {
              asock = (SSLSocket)socket.accept();
+             if (!allowUnsafeLegacyRenegotiation) {
+                 asock.addHandshakeCompletedListener(
+                         new DisableSslRenegotiation());
+             }
              configureClientAuth(asock);
         } catch (SSLException e){
           throw new SocketException("SSL handshake error" + e.toString());
@@ -155,7 +162,26 @@
         }
         return asock;
     }
+    
+    private static class DisableSslRenegotiation 
+            implements HandshakeCompletedListener {
+        private volatile boolean completed = false;
 
+        public void handshakeCompleted(HandshakeCompletedEvent event) {
+            if (completed) {
+                try {
+                    log.warn("SSL renegotiation is disabled, closing connection");
+                    event.getSession().invalidate();
+                    event.getSocket().close();
+                } catch (IOException e) {
+                    // ignore
+                }
+            }
+            completed = true;
+        }
+    }
+
+
     public void handshake(Socket sock) throws IOException {
         ((SSLSocket)sock).startHandshake();
     }
@@ -447,6 +473,9 @@
             enabledCiphers = getEnabledCiphers(requestedCiphers,
                                                sslProxy.getSupportedCipherSuites());
 
+            allowUnsafeLegacyRenegotiation =
+                "true".equals(attributes.get("allowUnsafeLegacyRenegotiation"));
+            
             // Check the SSL config is OK
             checkConfig();
 
Index: tc6.0.x/trunk/webapps/docs/changelog.xml
===================================================================
--- tc6.0.x/trunk/webapps/docs/changelog.xml	(revision 881773)
+++ tc6.0.x/trunk/webapps/docs/changelog.xml	(revision 881774)
@@ -316,6 +316,10 @@
         Use correct connector attribute (SSLEnabled) rather than secure to
         determine if SSL should be used. (fhanik)
       </fix>
+      <fix>
+        Provide a workaround for CVE-2009-3555, the TLS renegotiation issue for
+        the default Blocking IO Java connector.
+      </fix>
     </changelog>
   </subsection>
   <subsection name="Jasper">
Index: tc6.0.x/trunk/webapps/docs/config/http.xml
===================================================================
--- tc6.0.x/trunk/webapps/docs/config/http.xml	(revision 881773)
+++ tc6.0.x/trunk/webapps/docs/config/http.xml	(revision 881774)
@@ -755,6 +755,13 @@
       certificates.</p>
     </attribute>
     
+    <attribute name="allowUnsafeLegacyRenegotiation" required="false">
+      <p>Is unsafe legacy TLS renegotiation allowed which is likely to expose
+      users to CVE-2009-3555, a man-in-the-middle vulnerability in the TLS
+      protocol that allows an attacker to inject arbitrary data into the user's
+      request. If not specified, a default of <code>false</code> is used.</p>
+    </attribute>
+
   </attributes>
 
   <p>For more information, see the
Index: tc6.0.x/trunk/STATUS.txt
===================================================================
--- tc6.0.x/trunk/STATUS.txt	(revision 881773)
+++ tc6.0.x/trunk/STATUS.txt	(revision 881774)
@@ -369,12 +369,6 @@
   -1:
   +0: markt Combined patch needs to have 834047 removed and 881765 added
 
-* Disable TLS renegotiation be default with an option to re-enable it
-  Based on Costin's patch for trunk with Mark's modifications
-  http://people.apache.org/~markt/patches/2009-11-10-cve-2009-3555-tc6.patch
-  +1: markt, billbarker, mturk, kkolinko, jfclere
-  -1:
-
 * Improvements to memory leak prevention
   http://people.apache.org/~markt/patches/2009-11-10-leak-prevention.patch
   +1: markt, kkolinko