commit 54aa38d87dcffa5ccc23e64922e9536c82c1b9c8
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Sun Sep 29 12:12:38 2019 -0700

    More clean up after #2478

diff --git a/src/main/java/com/fasterxml/jackson/databind/JavaType.java b/src/main/java/com/fasterxml/jackson/databind/JavaType.java
index 2362ba537..7ad730f5a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/JavaType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/JavaType.java
@@ -292,6 +292,7 @@ public abstract class JavaType
     public final boolean isEnumType() {
         // 29-Sep-2019, tatu: `Class.isEnum()` not enough to detect custom subtypes,
         //   but for some reason this fix will break couple of unit tests:
+        // See [databind#2480]:
 //        return ClassUtil.isEnumType(_class);
         return _class.isEnum();
     }
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
index a500df3db..81ea9f748 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
@@ -1327,7 +1327,7 @@ nonAnnotatedParamIndex, ctor);
                     inst = findValueInstantiator(ctxt, beanDesc);
                 }
                 Class<?> kt = keyType.getRawClass();
-                if (kt == null || !kt.isEnum()) {
+                if (kt == null || !ClassUtil.isEnumType(kt)) {
                     throw new IllegalArgumentException("Cannot construct EnumMap; generic (key) type not available");
                 }
                 deser = new EnumMapDeserializer(type, inst, null,
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
index 1e12ef426..65706bf6b 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
@@ -336,7 +336,7 @@ public class CreatorCollector {
      * @since 2.8.1
      */
     protected boolean _isEnumValueOf(AnnotatedWithParams creator) {
-        return creator.getDeclaringClass().isEnum()
+        return ClassUtil.isEnumType(creator.getDeclaringClass())
                 && "valueOf".equals(creator.getName());
     }
 }
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java
index 08ceee8c1..25b4818b2 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java
@@ -8,6 +8,7 @@ import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
 import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
  * Standard deserializer for {@link EnumSet}s.
@@ -50,7 +51,7 @@ public class EnumSetDeserializer
         _enumType = enumType;
         _enumClass = (Class<Enum>) enumType.getRawClass();
         // sanity check
-        if (!_enumClass.isEnum()) {
+        if (!ClassUtil.isEnumType(_enumClass)) {
             throw new IllegalArgumentException("Type "+enumType+" not Java Enum type");
         }
         _enumDeserializer = (JsonDeserializer<Enum<?>>) deser;
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
index d3fc88c92..0293388a7 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
@@ -139,7 +139,8 @@ public class StdKeyDeserializer extends KeyDeserializer
                     re.getClass().getName(),
                     ClassUtil.exceptionMessage(re));
         }
-        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {
+        if (ClassUtil.isEnumType(_keyClass)
+                && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {
             return null;
         }
         return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");
diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java
index 681cdca27..d4bbce56f 100644
--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java
@@ -274,7 +274,7 @@ final class AnnotatedCreatorCollector
             resolvedAnnotations = null;
             Class<?> dc = ctor.getDeclaringClass();
             // (a) is enum, which have two extra hidden params (name, index)
-            if (dc.isEnum() && (paramCount == paramAnns.length + 2)) {
+            if (ClassUtil.isEnumType(dc) && (paramCount == paramAnns.length + 2)) {
                 Annotation[][] old = paramAnns;
                 paramAnns = new Annotation[old.length+2][];
                 System.arraycopy(old, 0, paramAnns, 2, old.length);
diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
index e68f2eb5c..db9b089c2 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
@@ -90,7 +90,12 @@ public class ClassNameIdResolver
     {
         // Need to ensure that "enum subtypes" work too
         if (ClassUtil.isEnumType(cls)) {
-            if (!cls.isEnum()) { // means that it's sub-class of base enum, so:
+            // 29-Sep-2019, tatu: `Class.isEnum()` only returns true for main declaration,
+            //   but NOT from sub-class thereof (extending individual values). This
+            //   is why additional resolution is needed: we want class that contains
+            //   enumeration instances.
+            if (!cls.isEnum()) {
+                // and this parent would then have `Enum.class` as its parent:
                 cls = cls.getSuperclass();
             }
         }
diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
index 464a661c7..b7eba96bb 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
@@ -23,6 +23,7 @@ import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
 import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;
 import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
 import com.fasterxml.jackson.databind.util.ArrayBuilders;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 import com.fasterxml.jackson.databind.util.Converter;
 import com.fasterxml.jackson.databind.util.NameTransformer;
 
@@ -425,7 +426,7 @@ public abstract class BeanSerializerBase
             shape = format.getShape();
             // or, alternatively, asked to revert "back to" other representations...
             if ((shape != JsonFormat.Shape.ANY) && (shape != _serializationShape)) {
-                if (_handledType.isEnum()) {
+                if (ClassUtil.isEnumType(_handledType)) {
                     switch (shape) {
                     case STRING:
                     case NUMBER: