commit bcdf4fa432d7c559e380e922e869d3569564330a
Author: Marta Medio <marta.medio@liferay.com>
Date:   Tue Jun 2 16:32:44 2020 +0200

    LPS-113348 Adapt existing test infrastructure

diff --git a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/AllowRestrictedHeadersCallable.java b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/AllowRestrictedHeadersCallable.java
index 46a8f7b6264a..c6e326cb11bd 100644
--- a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/AllowRestrictedHeadersCallable.java
+++ b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/AllowRestrictedHeadersCallable.java
@@ -16,6 +16,7 @@ package com.liferay.portal.remote.cors.client.test;
 
 import com.liferay.petra.process.ProcessCallable;
 import com.liferay.petra.process.ProcessException;
+import com.liferay.portal.kernel.util.Base64;
 import com.liferay.portal.kernel.util.StringUtil;
 
 import java.net.HttpURLConnection;
@@ -30,9 +31,13 @@ import java.util.Map;
 public class AllowRestrictedHeadersCallable
 	implements ProcessCallable<String[]> {
 
-	public AllowRestrictedHeadersCallable(String url, String origin) {
+	public AllowRestrictedHeadersCallable(
+		String url, String origin, String method, boolean authenticate) {
+
 		_url = url;
 		_origin = origin;
+		_method = method;
+		_authenticate = authenticate;
 	}
 
 	@Override
@@ -45,7 +50,15 @@ public class AllowRestrictedHeadersCallable
 
 			httpURLConnection.setRequestProperty("Origin", _origin);
 			httpURLConnection.setRequestProperty(
-				_ACCESS_CONTROL_REQUEST_METHOD, "GET");
+				_ACCESS_CONTROL_REQUEST_METHOD, _method);
+
+			if (_authenticate) {
+				String encodedUserNameAndPassword = Base64.encode(
+					"test@liferay.com:test".getBytes());
+
+				httpURLConnection.setRequestProperty(
+					"Authorization", "Basic " + encodedUserNameAndPassword);
+			}
 
 			Map<String, List<String>> headerFields =
 				httpURLConnection.getHeaderFields();
@@ -70,6 +83,8 @@ public class AllowRestrictedHeadersCallable
 
 	private static final long serialVersionUID = 1L;
 
+	private final boolean _authenticate;
+	private final String _method;
 	private final String _origin;
 	private final String _url;
 
diff --git a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/BaseCORSClientTestCase.java b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/BaseCORSClientTestCase.java
index 937362cf135e..c29215e3f345 100644
--- a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/BaseCORSClientTestCase.java
+++ b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/BaseCORSClientTestCase.java
@@ -25,7 +25,6 @@ import com.liferay.petra.string.StringBundler;
 import com.liferay.petra.string.StringPool;
 import com.liferay.portal.kernel.util.HashMapDictionary;
 import com.liferay.portal.kernel.util.StringUtil;
-import com.liferay.portal.remote.cors.configuration.WebContextCORSConfiguration;
 
 import java.io.File;
 import java.io.IOException;
@@ -83,50 +82,48 @@ public abstract class BaseCORSClientTestCase {
 		_autoCloseables.clear();
 	}
 
-	protected void assertURL(String urlString, boolean allowOrigin)
+	protected void assertJaxRSUrl(
+			String urlString, String method, boolean allowOrigin)
 		throws Exception {
 
-		ProcessConfig.Builder builder = new ProcessConfig.Builder();
-
-		List<String> arguments = new ArrayList<>();
+		ProcessConfig.Builder builder = _generateTestBuilder();
 
-		arguments.add("-Djava.net.preferIPv4Stack=true");
+		ProcessExecutor processExecutor = new LocalProcessExecutor();
 
-		if (Boolean.getBoolean("jvm.debug")) {
-			arguments.add(
-				"-agentlib:jdwp=transport=dt_socket,address=8001,server=y," +
-					"suspend=y");
-			arguments.add("-Djvm.debug=true");
-		}
+		ProcessChannel<String[]> processChannel = processExecutor.execute(
+			builder.build(),
+			new AllowRestrictedHeadersCallable(
+				"http://localhost:8080/o" + urlString, _TEST_CORS_URI, method,
+				false));
 
-		arguments.add("-Dliferay.mode=test");
-		arguments.add("-Dsun.zip.disableMemoryMapping=true");
-		arguments.add("-Dsun.net.http.allowRestrictedHeaders=true");
+		Future<String[]> future = processChannel.getProcessNoticeableFuture();
 
-		builder.setArguments(arguments);
+		String[] results = future.get();
 
-		StringBundler sb = new StringBundler();
+		if (allowOrigin) {
+			Assert.assertEquals(_TEST_CORS_URI, results[0]);
+		}
+		else {
+			Assert.assertNull(results[0]);
+		}
 
-		sb.append(ClassPathUtil.getJVMClassPath(true));
+		Assert.assertEquals("get", results[1]);
+		Assert.assertEquals("200", results[2]);
+	}
 
-		_addToClassPath(sb, AllowRestrictedHeadersCallable.class);
-		_addToClassPath(sb, ClassPathUtil.class);
-		_addToClassPath(sb, ClassResolverUtil.class);
-		_addToClassPath(sb, ClassLoaderObjectInputStream.class);
-		_addToClassPath(sb, StringBundler.class);
-		_addToClassPath(sb, StringUtil.class);
+	protected void assertJsonWSUrl(
+			String urlString, String method, boolean allowOrigin)
+		throws Exception {
 
-		String classPath = sb.toString();
-
-		builder.setBootstrapClassPath(classPath);
-		builder.setRuntimeClassPath(classPath);
+		ProcessConfig.Builder builder = _generateTestBuilder();
 
 		ProcessExecutor processExecutor = new LocalProcessExecutor();
 
 		ProcessChannel<String[]> processChannel = processExecutor.execute(
 			builder.build(),
 			new AllowRestrictedHeadersCallable(
-				"http://localhost:8080/o" + urlString, _TEST_CORS_URI));
+				"http://localhost:8080/api/jsonws" + urlString, _TEST_CORS_URI,
+				method, true));
 
 		Future<String[]> future = processChannel.getProcessNoticeableFuture();
 
@@ -139,12 +136,12 @@ public abstract class BaseCORSClientTestCase {
 			Assert.assertNull(results[0]);
 		}
 
-		Assert.assertEquals("get", results[1]);
+		Assert.assertNotEquals(StringPool.BLANK, results[1]);
 		Assert.assertEquals("200", results[2]);
 	}
 
 	protected void createFactoryConfiguration(
-		Dictionary<String, Object> properties) {
+		String configurationClassName, Dictionary<String, Object> properties) {
 
 		CountDownLatch countDownLatch = new CountDownLatch(1);
 
@@ -152,7 +149,7 @@ public abstract class BaseCORSClientTestCase {
 			new HashMapDictionary<>();
 
 		registrationProperties.put(
-			Constants.SERVICE_PID, WebContextCORSConfiguration.class.getName());
+			Constants.SERVICE_PID, configurationClassName);
 
 		ServiceRegistration<ManagedServiceFactory> serviceRegistration =
 			_bundleContext.registerService(
@@ -166,7 +163,7 @@ public abstract class BaseCORSClientTestCase {
 					@Override
 					public String getName() {
 						return "Test managed service factory for PID " +
-							WebContextCORSConfiguration.class.getName();
+							configurationClassName;
 					}
 
 					@Override
@@ -211,8 +208,7 @@ public abstract class BaseCORSClientTestCase {
 
 			try {
 				configuration = configurationAdmin.createFactoryConfiguration(
-					WebContextCORSConfiguration.class.getName(),
-					StringPool.QUESTION);
+					configurationClassName, StringPool.QUESTION);
 
 				configuration.update(properties);
 
@@ -272,6 +268,45 @@ public abstract class BaseCORSClientTestCase {
 		sb.append(location.getPath());
 	}
 
+	private ProcessConfig.Builder _generateTestBuilder() {
+		ProcessConfig.Builder builder = new ProcessConfig.Builder();
+
+		List<String> arguments = new ArrayList<>();
+
+		arguments.add("-Djava.net.preferIPv4Stack=true");
+
+		if (Boolean.getBoolean("jvm.debug")) {
+			arguments.add(
+				"-agentlib:jdwp=transport=dt_socket,address=8001,server=y," +
+					"suspend=y");
+			arguments.add("-Djvm.debug=true");
+		}
+
+		arguments.add("-Dliferay.mode=test");
+		arguments.add("-Dsun.zip.disableMemoryMapping=true");
+		arguments.add("-Dsun.net.http.allowRestrictedHeaders=true");
+
+		builder.setArguments(arguments);
+
+		StringBundler sb = new StringBundler();
+
+		sb.append(ClassPathUtil.getJVMClassPath(true));
+
+		_addToClassPath(sb, AllowRestrictedHeadersCallable.class);
+		_addToClassPath(sb, ClassPathUtil.class);
+		_addToClassPath(sb, ClassResolverUtil.class);
+		_addToClassPath(sb, ClassLoaderObjectInputStream.class);
+		_addToClassPath(sb, StringBundler.class);
+		_addToClassPath(sb, StringUtil.class);
+
+		String classPath = sb.toString();
+
+		builder.setBootstrapClassPath(classPath);
+		builder.setRuntimeClassPath(classPath);
+
+		return builder;
+	}
+
 	private static final String _TEST_CORS_URI = "http://test-cors.com";
 
 	private static final Queue<AutoCloseable> _autoCloseables =