commit 8c420631b226d0ef79c8a328fc664f30b4053c04
Author: Marta Medio <marta.medio@liferay.com>
Date:   Tue Jun 2 16:33:29 2020 +0200

    LPS-113348 Adapt existing tests and CORS Preflight tests

diff --git a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSAnnotationClientTest.java b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSAnnotationClientTest.java
index 864a6174cf60..fcba5a27be4e 100644
--- a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSAnnotationClientTest.java
+++ b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSAnnotationClientTest.java
@@ -21,6 +21,8 @@ import com.liferay.portal.test.rule.LiferayIntegrationTestRule;
 
 import java.util.Dictionary;
 
+import javax.ws.rs.HttpMethod;
+
 import org.junit.Before;
 import org.junit.ClassRule;
 import org.junit.Rule;
@@ -49,7 +51,12 @@ public class CORSAnnotationClientTest extends BaseCORSClientTestCase {
 
 	@Test
 	public void testCORSApplication() throws Exception {
-		assertURL("/test/cors-app", true);
+		assertJaxRSUrl("/test/cors-app", HttpMethod.GET, true);
+	}
+
+	@Test
+	public void testCORSPrelightApplication() throws Exception {
+		assertJaxRSUrl("/test/cors-app", HttpMethod.OPTIONS, true);
 	}
 
 }
\ No newline at end of file
diff --git a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationClientTest.java b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationClientTest.java
index 76bc6194e34e..d3faf21f02f8 100644
--- a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationClientTest.java
+++ b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationClientTest.java
@@ -17,10 +17,13 @@ package com.liferay.portal.remote.cors.client.test;
 import com.liferay.arquillian.extension.junit.bridge.junit.Arquillian;
 import com.liferay.portal.kernel.test.rule.AggregateTestRule;
 import com.liferay.portal.kernel.util.HashMapDictionary;
+import com.liferay.portal.remote.cors.configuration.WebContextCORSConfiguration;
 import com.liferay.portal.test.rule.LiferayIntegrationTestRule;
 
 import java.util.Dictionary;
 
+import javax.ws.rs.HttpMethod;
+
 import org.junit.Before;
 import org.junit.ClassRule;
 import org.junit.Rule;
@@ -52,7 +55,8 @@ public class CORSConfigurationClientTest extends BaseCORSClientTestCase {
 			"servlet.context.helper.select.filter",
 			"(osgi.jaxrs.name=test-cors)");
 
-		createFactoryConfiguration(properties);
+		createFactoryConfiguration(
+			WebContextCORSConfiguration.class.getName(), properties);
 
 		properties = new HashMapDictionary<>();
 
@@ -68,7 +72,8 @@ public class CORSConfigurationClientTest extends BaseCORSClientTestCase {
 			"servlet.context.helper.select.filter",
 			"(osgi.jaxrs.name=test-cors-url)");
 
-		createFactoryConfiguration(properties);
+		createFactoryConfiguration(
+			WebContextCORSConfiguration.class.getName(), properties);
 
 		registerJaxRsApplication(
 			new CORSTestApplication(), "no-cors", new HashMapDictionary<>());
@@ -87,15 +92,25 @@ public class CORSConfigurationClientTest extends BaseCORSClientTestCase {
 			"servlet.context.helper.select.filter",
 			"(osgi.jaxrs.name=test-cors-wrong-url)");
 
-		createFactoryConfiguration(properties);
+		createFactoryConfiguration(
+			WebContextCORSConfiguration.class.getName(), properties);
 	}
 
 	@Test
 	public void testCORSApplication() throws Exception {
-		assertURL("/cors/cors-app", true);
-		assertURL("/no-cors/cors-app", false);
-		assertURL("/test-cors-url/cors-app", true);
-		assertURL("/test-cors-wrong-url/cors-app", false);
+		assertJaxRSUrl("/cors/cors-app", HttpMethod.GET, true);
+		assertJaxRSUrl("/no-cors/cors-app", HttpMethod.GET, false);
+		assertJaxRSUrl("/test-cors-url/cors-app", HttpMethod.GET, true);
+		assertJaxRSUrl("/test-cors-wrong-url/cors-app", HttpMethod.GET, false);
+	}
+
+	@Test
+	public void testCORSPreflightApplication() throws Exception {
+		assertJaxRSUrl("/cors/cors-app", HttpMethod.OPTIONS, true);
+		assertJaxRSUrl("/no-cors/cors-app", HttpMethod.OPTIONS, false);
+		assertJaxRSUrl("/test-cors-url/cors-app", HttpMethod.OPTIONS, true);
+		assertJaxRSUrl(
+			"/test-cors-wrong-url/cors-app", HttpMethod.OPTIONS, false);
 	}
 
 }
\ No newline at end of file