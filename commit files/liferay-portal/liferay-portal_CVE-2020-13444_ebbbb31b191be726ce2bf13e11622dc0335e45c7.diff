commit ebbbb31b191be726ce2bf13e11622dc0335e45c7
Author: Marcos <marcos.martins@liferay.com>
Date:   Thu Mar 19 08:44:56 2020 -0300

    LPS-63229 Improving data provider search security

diff --git a/modules/apps/dynamic-data-mapping/dynamic-data-mapping-service/src/main/java/com/liferay/dynamic/data/mapping/service/impl/DDMDataProviderInstanceServiceImpl.java b/modules/apps/dynamic-data-mapping/dynamic-data-mapping-service/src/main/java/com/liferay/dynamic/data/mapping/service/impl/DDMDataProviderInstanceServiceImpl.java
index 6846d46b89ad..33e319158e75 100644
--- a/modules/apps/dynamic-data-mapping/dynamic-data-mapping-service/src/main/java/com/liferay/dynamic/data/mapping/service/impl/DDMDataProviderInstanceServiceImpl.java
+++ b/modules/apps/dynamic-data-mapping/dynamic-data-mapping-service/src/main/java/com/liferay/dynamic/data/mapping/service/impl/DDMDataProviderInstanceServiceImpl.java
@@ -21,15 +21,24 @@ import com.liferay.dynamic.data.mapping.service.base.DDMDataProviderInstanceServ
 import com.liferay.dynamic.data.mapping.storage.DDMFormValues;
 import com.liferay.portal.aop.AopService;
 import com.liferay.portal.kernel.exception.PortalException;
+import com.liferay.portal.kernel.json.JSONArray;
+import com.liferay.portal.kernel.json.JSONFactory;
+import com.liferay.portal.kernel.json.JSONObject;
+import com.liferay.portal.kernel.log.Log;
+import com.liferay.portal.kernel.log.LogFactoryUtil;
 import com.liferay.portal.kernel.security.permission.ActionKeys;
 import com.liferay.portal.kernel.security.permission.resource.ModelResourcePermission;
 import com.liferay.portal.kernel.security.permission.resource.PortletResourcePermission;
 import com.liferay.portal.kernel.service.ServiceContext;
 import com.liferay.portal.kernel.util.OrderByComparator;
+import com.liferay.portal.kernel.util.StringUtil;
 
+import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import org.osgi.service.component.annotations.Component;
 import org.osgi.service.component.annotations.Reference;
@@ -160,8 +169,35 @@ public class DDMDataProviderInstanceServiceImpl
 		long companyId, long[] groupIds, String keywords, int start, int end,
 		OrderByComparator<DDMDataProviderInstance> orderByComparator) {
 
-		return ddmDataProviderInstanceFinder.filterByKeywords(
-			companyId, groupIds, keywords, start, end, orderByComparator);
+		List<DDMDataProviderInstance> ddmDataProviderInstances =
+			ddmDataProviderInstanceFinder.filterByKeywords(
+				companyId, groupIds, keywords, start, end, orderByComparator);
+
+		Stream<DDMDataProviderInstance> ddmDataProviderInstanceStream =
+			ddmDataProviderInstances.stream();
+
+		ddmDataProviderInstanceStream = ddmDataProviderInstanceStream.filter(
+			ddmDataProviderInstance -> {
+				try {
+					return _ddmDataProviderInstanceModelResourcePermission.
+						contains(
+							getPermissionChecker(),
+							ddmDataProviderInstance.getDataProviderInstanceId(),
+							ActionKeys.VIEW);
+				}
+				catch (PortalException portalException) {
+					_log.error(portalException, portalException);
+
+					return false;
+				}
+			});
+
+		return ddmDataProviderInstanceStream.map(
+			ddmDataProviderInstance -> _transformDDMDataProviderInstance(
+				ddmDataProviderInstance)
+		).collect(
+			Collectors.toList()
+		);
 	}
 
 	@Override
@@ -205,12 +241,72 @@ public class DDMDataProviderInstanceServiceImpl
 			ddmFormValues, serviceContext);
 	}
 
+	@Reference(unbind = "-")
+	protected void setJSONFactory(JSONFactory jsonFactory) {
+		_jsonFactory = jsonFactory;
+	}
+
+	private JSONArray _filterFieldValues(JSONArray fieldValuesJSONArray) {
+		JSONArray filteredFieldValuesJSONArray = _jsonFactory.createJSONArray();
+
+		Iterator iterator = fieldValuesJSONArray.iterator();
+
+		while (iterator.hasNext()) {
+			JSONObject fieldValueJSONObject = (JSONObject)iterator.next();
+
+			String fieldValueName = fieldValueJSONObject.getString("name");
+
+			if (StringUtil.equals(fieldValueName, "password") ||
+				StringUtil.equals(fieldValueName, "username")) {
+
+				continue;
+			}
+
+			filteredFieldValuesJSONArray.put(fieldValueJSONObject);
+		}
+
+		return filteredFieldValuesJSONArray;
+	}
+
+	private DDMDataProviderInstance _transformDDMDataProviderInstance(
+		DDMDataProviderInstance ddmDataProviderInstance) {
+
+		try {
+			JSONObject definitionJSONObject = _jsonFactory.createJSONObject(
+				ddmDataProviderInstance.getDefinition());
+
+			if (!definitionJSONObject.has("fieldValues")) {
+				return ddmDataProviderInstance;
+			}
+
+			JSONArray fieldValuesJSONArray = definitionJSONObject.getJSONArray(
+				"fieldValues");
+
+			definitionJSONObject.put(
+				"fieldValues", _filterFieldValues(fieldValuesJSONArray));
+
+			ddmDataProviderInstance.setDefinition(
+				definitionJSONObject.toJSONString());
+		}
+		catch (Exception exception) {
+			_log.error(exception, exception);
+		}
+
+		return ddmDataProviderInstance;
+	}
+
+	private static final Log _log = LogFactoryUtil.getLog(
+		DDMDataProviderInstanceServiceImpl.class);
+
 	@Reference(
 		target = "(model.class.name=com.liferay.dynamic.data.mapping.model.DDMDataProviderInstance)"
 	)
 	private ModelResourcePermission<DDMDataProviderInstance>
 		_ddmDataProviderInstanceModelResourcePermission;
 
+	@Reference
+	private JSONFactory _jsonFactory;
+
 	@Reference(target = "(resource.name=" + DDMConstants.RESOURCE_NAME + ")")
 	private PortletResourcePermission _portletResourcePermission;
 