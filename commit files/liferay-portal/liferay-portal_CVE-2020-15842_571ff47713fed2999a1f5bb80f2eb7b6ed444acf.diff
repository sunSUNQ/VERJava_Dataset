commit 571ff47713fed2999a1f5bb80f2eb7b6ed444acf
Author: tina.tian <tina.tian@liferay.com>
Date:   Wed Jan 8 10:00:05 2020 -0800

    LPS-96563 Remove bootstrap feature of cache, including classes, properties and tests.

diff --git a/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/BasePortalCacheManager.java b/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/BasePortalCacheManager.java
index 5f14377c2f71..7c001b77f002 100644
--- a/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/BasePortalCacheManager.java
+++ b/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/BasePortalCacheManager.java
@@ -127,22 +127,6 @@ public abstract class BasePortalCacheManager<K extends Serializable, V>
 
 			portalCache = previousPortalCache;
 		}
-		else if (portalCacheConfiguration != null) {
-			Properties portalCacheBootstrapLoaderProperties =
-				portalCacheConfiguration.
-					getPortalCacheBootstrapLoaderProperties();
-
-			if (portalCacheBootstrapLoaderProperties != null) {
-				PortalCacheBootstrapLoader portalCacheBootstrapLoader =
-					portalCacheBootstrapLoaderFactory.create(
-						portalCacheBootstrapLoaderProperties);
-
-				if (portalCacheBootstrapLoader != null) {
-					portalCacheBootstrapLoader.loadPortalCache(
-						getPortalCacheManagerName(), portalCacheName);
-				}
-			}
-		}
 
 		return portalCache;
 	}
@@ -324,8 +308,6 @@ public abstract class BasePortalCacheManager<K extends Serializable, V>
 	protected final AggregatedPortalCacheManagerListener
 		aggregatedPortalCacheManagerListener =
 			new AggregatedPortalCacheManagerListener();
-	protected PortalCacheBootstrapLoaderFactory
-		portalCacheBootstrapLoaderFactory;
 	protected PortalCacheListenerFactory portalCacheListenerFactory;
 	protected PortalCacheManagerListenerFactory<PortalCacheManager<K, V>>
 		portalCacheManagerListenerFactory;
diff --git a/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/PortalCacheBootstrapLoader.java b/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/PortalCacheBootstrapLoader.java
deleted file mode 100644
index f0d170d666bd..000000000000
--- a/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/PortalCacheBootstrapLoader.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
- *
- * This library is free software; you can redistribute it and/or modify it under
- * the terms of the GNU Lesser General Public License as published by the Free
- * Software Foundation; either version 2.1 of the License, or (at your option)
- * any later version.
- *
- * This library is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
- * details.
- */
-
-package com.liferay.portal.cache;
-
-/**
- * @author Tina Tian
- */
-public interface PortalCacheBootstrapLoader {
-
-	public static final String BOOTSTRAP_ASYNCHRONOUSLY =
-		"bootstrapAsynchronously";
-
-	public static final boolean DEFAULT_BOOTSTRAP_ASYNCHRONOUSLY = true;
-
-	public boolean isAsynchronous();
-
-	public void loadPortalCache(
-		String portalCacheManagerName, String portalCacheName);
-
-}
\ No newline at end of file
diff --git a/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/PortalCacheBootstrapLoaderFactory.java b/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/PortalCacheBootstrapLoaderFactory.java
deleted file mode 100644
index 0f71d6395395..000000000000
--- a/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/PortalCacheBootstrapLoaderFactory.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
- * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
- *
- * This library is free software; you can redistribute it and/or modify it under
- * the terms of the GNU Lesser General Public License as published by the Free
- * Software Foundation; either version 2.1 of the License, or (at your option)
- * any later version.
- *
- * This library is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
- * details.
- */
-
-package com.liferay.portal.cache;
-
-import java.util.Properties;
-
-/**
- * @author Tina Tian
- */
-public interface PortalCacheBootstrapLoaderFactory {
-
-	public PortalCacheBootstrapLoader create(Properties properties);
-
-}
\ No newline at end of file
diff --git a/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/configuration/PortalCacheConfiguration.java b/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/configuration/PortalCacheConfiguration.java
index d227a8d68ef9..2cdb2b94f66f 100644
--- a/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/configuration/PortalCacheConfiguration.java
+++ b/modules/apps/portal-cache/portal-cache-api/src/main/java/com/liferay/portal/cache/configuration/PortalCacheConfiguration.java
@@ -31,8 +31,7 @@ public class PortalCacheConfiguration {
 
 	public PortalCacheConfiguration(
 		String portalCacheName,
-		Set<Properties> portalCacheListenerPropertiesSet,
-		Properties portalCacheBootstrapLoaderProperties) {
+		Set<Properties> portalCacheListenerPropertiesSet) {
 
 		if (portalCacheName == null) {
 			throw new NullPointerException("Portal cache name is null");
@@ -47,13 +46,6 @@ public class PortalCacheConfiguration {
 			_portalCacheListenerPropertiesSet = new HashSet<>(
 				portalCacheListenerPropertiesSet);
 		}
-
-		_portalCacheBootstrapLoaderProperties =
-			portalCacheBootstrapLoaderProperties;
-	}
-
-	public Properties getPortalCacheBootstrapLoaderProperties() {
-		return _portalCacheBootstrapLoaderProperties;
 	}
 
 	public Set<Properties> getPortalCacheListenerPropertiesSet() {
@@ -68,18 +60,9 @@ public class PortalCacheConfiguration {
 		String portalCacheName) {
 
 		return new PortalCacheConfiguration(
-			portalCacheName, _portalCacheListenerPropertiesSet,
-			_portalCacheBootstrapLoaderProperties);
-	}
-
-	public void setPortalCacheBootstrapLoaderProperties(
-		Properties portalCacheBootstrapLoaderProperties) {
-
-		_portalCacheBootstrapLoaderProperties =
-			portalCacheBootstrapLoaderProperties;
+			portalCacheName, _portalCacheListenerPropertiesSet);
 	}
 
-	private Properties _portalCacheBootstrapLoaderProperties;
 	private final Set<Properties> _portalCacheListenerPropertiesSet;
 	private final String _portalCacheName;
 
diff --git a/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/EhcachePortalCacheConfiguration.java b/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/EhcachePortalCacheConfiguration.java
index 43059a3bec3a..e430f9cda65b 100644
--- a/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/EhcachePortalCacheConfiguration.java
+++ b/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/EhcachePortalCacheConfiguration.java
@@ -27,12 +27,9 @@ public class EhcachePortalCacheConfiguration extends PortalCacheConfiguration {
 	public EhcachePortalCacheConfiguration(
 		String portalCacheName,
 		Set<Properties> portalCacheListenerPropertiesSet,
-		Properties portalCacheBootstrapLoaderProperties,
 		boolean requireSerialization) {
 
-		super(
-			portalCacheName, portalCacheListenerPropertiesSet,
-			portalCacheBootstrapLoaderProperties);
+		super(portalCacheName, portalCacheListenerPropertiesSet);
 
 		_requireSerialization = requireSerialization;
 	}
@@ -47,7 +44,7 @@ public class EhcachePortalCacheConfiguration extends PortalCacheConfiguration {
 
 		return new EhcachePortalCacheConfiguration(
 			portalCacheName, getPortalCacheListenerPropertiesSet(),
-			getPortalCacheBootstrapLoaderProperties(), _requireSerialization);
+			_requireSerialization);
 	}
 
 	private final boolean _requireSerialization;
diff --git a/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/MultiVMEhcachePortalCacheManager.java b/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/MultiVMEhcachePortalCacheManager.java
index f69f1bce6535..71be42428677 100644
--- a/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/MultiVMEhcachePortalCacheManager.java
+++ b/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/MultiVMEhcachePortalCacheManager.java
@@ -14,7 +14,6 @@
 
 package com.liferay.portal.cache.ehcache.internal;
 
-import com.liferay.portal.cache.PortalCacheBootstrapLoaderFactory;
 import com.liferay.portal.cache.PortalCacheListenerFactory;
 import com.liferay.portal.cache.PortalCacheManagerListenerFactory;
 import com.liferay.portal.cache.ehcache.internal.configurator.MultiVMEhcachePortalCacheManagerConfigurator;
@@ -76,14 +75,6 @@ public class MultiVMEhcachePortalCacheManager
 			multiVMEhcachePortalCacheManagerConfigurator;
 	}
 
-	@Reference(unbind = "-")
-	protected void setPortalCacheBootstrapLoaderFactory(
-		PortalCacheBootstrapLoaderFactory portalCacheBootstrapLoaderFactory) {
-
-		this.portalCacheBootstrapLoaderFactory =
-			portalCacheBootstrapLoaderFactory;
-	}
-
 	@Reference(unbind = "-")
 	protected void setPortalCacheListenerFactory(
 		PortalCacheListenerFactory portalCacheListenerFactory) {
diff --git a/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/configurator/BaseEhcachePortalCacheManagerConfigurator.java b/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/configurator/BaseEhcachePortalCacheManagerConfigurator.java
index ed67a0f83ccf..aa8b7005c5b7 100644
--- a/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/configurator/BaseEhcachePortalCacheManagerConfigurator.java
+++ b/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/configurator/BaseEhcachePortalCacheManagerConfigurator.java
@@ -83,8 +83,6 @@ public abstract class BaseEhcachePortalCacheManagerConfigurator {
 			return;
 		}
 
-		cacheConfiguration.bootstrapCacheLoaderFactory(null);
-
 		List<?> factoryConfigurations =
 			cacheConfiguration.getCacheEventListenerConfigurations();
 
@@ -215,7 +213,7 @@ public abstract class BaseEhcachePortalCacheManagerConfigurator {
 
 		return new EhcachePortalCacheConfiguration(
 			cacheConfiguration.getName(), portalCacheListenerPropertiesSet,
-			null, requireSerialization);
+			requireSerialization);
 	}
 
 	protected Set<Properties> parseCacheManagerEventListenerConfigurations(
diff --git a/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/configurator/MultiVMEhcachePortalCacheManagerConfigurator.java b/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/configurator/MultiVMEhcachePortalCacheManagerConfigurator.java
index 67d3ecbcf3c1..17095a1c363e 100644
--- a/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/configurator/MultiVMEhcachePortalCacheManagerConfigurator.java
+++ b/modules/apps/portal-cache/portal-cache-ehcache-impl/src/main/java/com/liferay/portal/cache/ehcache/internal/configurator/MultiVMEhcachePortalCacheManagerConfigurator.java
@@ -50,16 +50,8 @@ public class MultiVMEhcachePortalCacheManagerConfigurator
 
 	@Activate
 	protected void activate() {
-		_bootstrapLoaderEnabled = GetterUtil.getBoolean(
-			props.get(PropsKeys.EHCACHE_BOOTSTRAP_CACHE_LOADER_ENABLED));
-		_bootstrapLoaderProperties = props.getProperties(
-			PropsKeys.EHCACHE_BOOTSTRAP_CACHE_LOADER_PROPERTIES +
-				StringPool.PERIOD,
-			true);
 		clusterEnabled = GetterUtil.getBoolean(
 			props.get(PropsKeys.CLUSTER_LINK_ENABLED));
-		_defaultBootstrapLoaderPropertiesString = getPortalPropertiesString(
-			PropsKeys.EHCACHE_BOOTSTRAP_CACHE_LOADER_PROPERTIES_DEFAULT);
 		_defaultReplicatorPropertiesString = getPortalPropertiesString(
 			PropsKeys.EHCACHE_REPLICATOR_PROPERTIES_DEFAULT);
 		_replicatorProperties = props.getProperties(
@@ -137,12 +129,6 @@ public class MultiVMEhcachePortalCacheManagerConfigurator
 			ObjectValuePair<Properties, Properties> propertiesPair =
 				entry.getValue();
 
-			if (_bootstrapLoaderEnabled && (propertiesPair.getKey() != null)) {
-				portalCacheConfiguration.
-					setPortalCacheBootstrapLoaderProperties(
-						propertiesPair.getKey());
-			}
-
 			if (propertiesPair.getValue() != null) {
 				Set<Properties> portalCacheListenerPropertiesSet =
 					portalCacheConfiguration.
@@ -181,20 +167,6 @@ public class MultiVMEhcachePortalCacheManagerConfigurator
 
 		String cacheName = cacheConfiguration.getName();
 
-		if (_bootstrapLoaderEnabled) {
-			String bootstrapLoaderPropertiesString =
-				(String)_bootstrapLoaderProperties.remove(cacheName);
-
-			if (Validator.isNull(bootstrapLoaderPropertiesString)) {
-				bootstrapLoaderPropertiesString =
-					_defaultBootstrapLoaderPropertiesString;
-			}
-
-			portalCacheConfiguration.setPortalCacheBootstrapLoaderProperties(
-				parseProperties(
-					bootstrapLoaderPropertiesString, StringPool.COMMA));
-		}
-
 		String replicatorPropertiesString =
 			(String)_replicatorProperties.remove(cacheName);
 
@@ -228,21 +200,6 @@ public class MultiVMEhcachePortalCacheManagerConfigurator
 		Map<String, ObjectValuePair<Properties, Properties>>
 			mergedPropertiesMap = new HashMap<>();
 
-		if (_bootstrapLoaderEnabled) {
-			for (String portalCacheName :
-					_bootstrapLoaderProperties.stringPropertyNames()) {
-
-				mergedPropertiesMap.put(
-					portalCacheName,
-					new ObjectValuePair(
-						parseProperties(
-							_bootstrapLoaderProperties.getProperty(
-								portalCacheName),
-							StringPool.COMMA),
-						null));
-			}
-		}
-
 		for (String portalCacheName :
 				_replicatorProperties.stringPropertyNames()) {
 
@@ -268,9 +225,6 @@ public class MultiVMEhcachePortalCacheManagerConfigurator
 		return mergedPropertiesMap;
 	}
 
-	private boolean _bootstrapLoaderEnabled;
-	private Properties _bootstrapLoaderProperties;
-	private String _defaultBootstrapLoaderPropertiesString;
 	private String _defaultReplicatorPropertiesString;
 	private Properties _replicatorProperties;
 
diff --git a/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkBootstrapLoaderHelperUtil.java b/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkBootstrapLoaderHelperUtil.java
deleted file mode 100644
index adc71af3148e..000000000000
--- a/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkBootstrapLoaderHelperUtil.java
+++ /dev/null
@@ -1,470 +0,0 @@
-/**
- * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
- *
- * This library is free software; you can redistribute it and/or modify it under
- * the terms of the GNU Lesser General Public License as published by the Free
- * Software Foundation; either version 2.1 of the License, or (at your option)
- * any later version.
- *
- * This library is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
- * details.
- */
-
-package com.liferay.portal.cache.multiple.internal.bootstrap;
-
-import com.liferay.petra.lang.CentralizedThreadLocal;
-import com.liferay.portal.cache.multiple.internal.PortalCacheManagerUtil;
-import com.liferay.portal.kernel.cache.PortalCache;
-import com.liferay.portal.kernel.cache.PortalCacheHelperUtil;
-import com.liferay.portal.kernel.cache.PortalCacheManager;
-import com.liferay.portal.kernel.cluster.ClusterExecutorUtil;
-import com.liferay.portal.kernel.cluster.ClusterNode;
-import com.liferay.portal.kernel.cluster.ClusterNodeResponse;
-import com.liferay.portal.kernel.cluster.ClusterRequest;
-import com.liferay.portal.kernel.cluster.FutureClusterResponses;
-import com.liferay.portal.kernel.exception.SystemException;
-import com.liferay.portal.kernel.io.AnnotatedObjectInputStream;
-import com.liferay.portal.kernel.io.AnnotatedObjectOutputStream;
-import com.liferay.portal.kernel.log.Log;
-import com.liferay.portal.kernel.log.LogFactoryUtil;
-import com.liferay.portal.kernel.util.GetterUtil;
-import com.liferay.portal.kernel.util.MethodHandler;
-import com.liferay.portal.kernel.util.MethodKey;
-import com.liferay.portal.kernel.util.PropsKeys;
-import com.liferay.portal.kernel.util.PropsUtil;
-import com.liferay.portal.kernel.util.SocketUtil;
-
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.OutputStream;
-import java.io.Serializable;
-
-import java.net.ServerSocket;
-import java.net.Socket;
-import java.net.SocketAddress;
-import java.net.SocketException;
-import java.net.SocketTimeoutException;
-
-import java.nio.channels.ServerSocketChannel;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.TimeUnit;
-
-import org.osgi.service.component.annotations.Activate;
-import org.osgi.service.component.annotations.Component;
-
-/**
- * @author Shuyang Zhou
- * @author Sherry Yang
- */
-@Component(enabled = false, immediate = true, service = {})
-public class ClusterLinkBootstrapLoaderHelperUtil {
-
-	public static SocketAddress createServerSocketFromCluster(
-			String portalCacheManagerName, List<String> portalCacheNames)
-		throws Exception {
-
-		ClusterNode localClusterNode =
-			ClusterExecutorUtil.getLocalClusterNode();
-
-		ServerSocketChannel serverSocketChannel =
-			SocketUtil.createServerSocketChannel(
-				localClusterNode.getBindInetAddress(),
-				GetterUtil.getInteger(
-					PropsUtil.get(PropsKeys.EHCACHE_SOCKET_START_PORT), 32454),
-				_serverSocketConfigurator);
-
-		ServerSocket serverSocket = serverSocketChannel.socket();
-
-		ClusterLinkBootstrapLoaderServerThread
-			clusterLinkBootstrapLoaderServerThread =
-				new ClusterLinkBootstrapLoaderServerThread(
-					serverSocket, portalCacheManagerName, portalCacheNames);
-
-		clusterLinkBootstrapLoaderServerThread.start();
-
-		return serverSocket.getLocalSocketAddress();
-	}
-
-	public static boolean isSkipped() {
-		return _skipBootstrapLoaderThreadLocal.get();
-	}
-
-	public static void loadCachesFromCluster(
-			String portalCacheManagerName, String... portalCacheNames)
-		throws Exception {
-
-		synchronized (ClusterLinkBootstrapLoaderHelperUtil.class) {
-			if (!_started) {
-				List<String> portalCaches = _deferredPortalCaches.get(
-					portalCacheManagerName);
-
-				if (portalCaches == null) {
-					portalCaches = new ArrayList<>();
-
-					_deferredPortalCaches.put(
-						portalCacheManagerName, portalCaches);
-				}
-
-				Collections.addAll(portalCaches, portalCacheNames);
-
-				return;
-			}
-		}
-
-		List<ClusterNode> clusterNodes = ClusterExecutorUtil.getClusterNodes();
-
-		if (_log.isInfoEnabled()) {
-			_log.info("Cluster nodes " + clusterNodes);
-		}
-
-		if (clusterNodes.size() <= 1) {
-			if (_log.isDebugEnabled()) {
-				_log.debug(
-					"Not loading cache from cluster because a cluster peer " +
-						"was not found");
-			}
-
-			return;
-		}
-
-		PortalCacheManager<? extends Serializable, ?> portalCacheManager =
-			PortalCacheManagerUtil.getPortalCacheManager(
-				portalCacheManagerName);
-
-		if (!portalCacheManager.isClusterAware()) {
-			return;
-		}
-
-		ClusterRequest clusterRequest = ClusterRequest.createMulticastRequest(
-			new MethodHandler(
-				_createServerSocketFromClusterMethodKey, portalCacheManagerName,
-				Arrays.asList(portalCacheNames)),
-			true);
-
-		FutureClusterResponses futureClusterResponses =
-			ClusterExecutorUtil.execute(clusterRequest);
-
-		BlockingQueue<ClusterNodeResponse> clusterNodeResponses =
-			futureClusterResponses.getPartialResults();
-
-		ClusterNodeResponse clusterNodeResponse = null;
-
-		try {
-			clusterNodeResponse = clusterNodeResponses.poll(
-				GetterUtil.getLong(
-					PropsUtil.get(
-						PropsKeys.CLUSTER_LINK_NODE_BOOTUP_RESPONSE_TIMEOUT),
-					10000),
-				TimeUnit.MILLISECONDS);
-		}
-		catch (InterruptedException ie) {
-			return;
-		}
-
-		if (clusterNodeResponse == null) {
-			if (_log.isWarnEnabled()) {
-				_log.warn(
-					"Unable to load cache from the cluster because there was " +
-						"no peer response");
-			}
-
-			return;
-		}
-
-		if (_log.isInfoEnabled()) {
-			_log.info(
-				"Load cache data from cluster node " +
-					clusterNodeResponse.getClusterNode());
-		}
-
-		Socket socket = null;
-
-		try {
-			SocketAddress remoteSocketAddress =
-				(SocketAddress)clusterNodeResponse.getResult();
-
-			if (remoteSocketAddress == null) {
-				_log.error(
-					"Cluster peer " + clusterNodeResponse.getClusterNode() +
-						" responded with a null socket address");
-
-				return;
-			}
-
-			socket = new Socket();
-
-			socket.connect(remoteSocketAddress);
-
-			socket.shutdownOutput();
-
-			ObjectInputStream objectInputStream =
-				new AnnotatedObjectInputStream(socket.getInputStream());
-
-			PortalCache<Serializable, Serializable> portalCache = null;
-
-			try {
-				while (true) {
-					Object object = objectInputStream.readObject();
-
-					if (object instanceof CacheElement) {
-						CacheElement cacheElement = (CacheElement)object;
-
-						PortalCacheHelperUtil.putWithoutReplicator(
-							portalCache, cacheElement.getKey(),
-							cacheElement.getValue());
-					}
-					else if (object instanceof String) {
-						if (_COMMAND_SOCKET_CLOSE.equals(object)) {
-							break;
-						}
-
-						_skipBootstrapLoaderThreadLocal.set(Boolean.TRUE);
-
-						try {
-							portalCache =
-								(PortalCache<Serializable, Serializable>)
-									portalCacheManager.getPortalCache(
-										(String)object);
-						}
-						finally {
-							_skipBootstrapLoaderThreadLocal.remove();
-						}
-					}
-					else {
-						throw new SystemException(
-							"Socket input stream returned invalid object " +
-								object);
-					}
-				}
-			}
-			finally {
-				if (objectInputStream != null) {
-					objectInputStream.close();
-				}
-			}
-		}
-		catch (Exception e) {
-			throw new Exception(
-				"Unable to load cache data from cluster node " +
-					clusterNodeResponse.getClusterNode(),
-				e);
-		}
-		finally {
-			if (socket != null) {
-				socket.close();
-			}
-		}
-	}
-
-	@Activate
-	protected void activate() {
-		if (!_started) {
-			_started = true;
-		}
-
-		if (_deferredPortalCaches.isEmpty()) {
-			return;
-		}
-
-		if (_log.isDebugEnabled()) {
-			_log.debug("Loading deferred caches");
-		}
-
-		try {
-			for (Map.Entry<String, List<String>> entry :
-					_deferredPortalCaches.entrySet()) {
-
-				List<String> portalCacheNames = entry.getValue();
-
-				if (portalCacheNames.isEmpty()) {
-					continue;
-				}
-
-				loadCachesFromCluster(
-					entry.getKey(), portalCacheNames.toArray(new String[0]));
-			}
-		}
-		catch (Exception e) {
-			if (_log.isWarnEnabled()) {
-				_log.warn("Unable to load cache data from the cluster", e);
-			}
-		}
-		finally {
-			_deferredPortalCaches.clear();
-		}
-	}
-
-	private static final String _COMMAND_SOCKET_CLOSE = "${SOCKET_CLOSE}";
-
-	private static final Log _log = LogFactoryUtil.getLog(
-		ClusterLinkBootstrapLoaderHelperUtil.class);
-
-	private static final MethodKey _createServerSocketFromClusterMethodKey =
-		new MethodKey(
-			ClusterLinkBootstrapLoaderHelperUtil.class,
-			"createServerSocketFromCluster", String.class, List.class);
-	private static final Map<String, List<String>> _deferredPortalCaches =
-		new HashMap<>();
-	private static final SocketUtil.ServerSocketConfigurator
-		_serverSocketConfigurator = new SocketCacheServerSocketConfiguration();
-	private static final ThreadLocal<Boolean> _skipBootstrapLoaderThreadLocal =
-		new CentralizedThreadLocal<>(
-			ClusterLinkBootstrapLoaderHelperUtil.class +
-				"._skipBootstrapLoaderThreadLocal",
-			() -> Boolean.FALSE, false);
-	private static boolean _started;
-
-	private static class CacheElement implements Serializable {
-
-		public CacheElement(Serializable key, Serializable value) {
-			_key = key;
-			_value = value;
-		}
-
-		public Serializable getKey() {
-			return _key;
-		}
-
-		public Serializable getValue() {
-			return _value;
-		}
-
-		private final Serializable _key;
-		private final Serializable _value;
-
-	}
-
-	private static class ClusterLinkBootstrapLoaderServerThread extends Thread {
-
-		public ClusterLinkBootstrapLoaderServerThread(
-			ServerSocket serverSocket, String portalCacheManagerName,
-			List<String> portalCacheNames) {
-
-			_serverSocket = serverSocket;
-			_portalCacheManagerName = portalCacheManagerName;
-			_portalCacheNames = portalCacheNames;
-
-			setDaemon(true);
-			setName(
-				ClusterLinkBootstrapLoaderServerThread.class.getName() + " - " +
-					portalCacheNames);
-			setPriority(Thread.NORM_PRIORITY);
-		}
-
-		@Override
-		public void run() {
-			Socket socket = null;
-
-			try {
-				try {
-					socket = _serverSocket.accept();
-				}
-				catch (SocketTimeoutException ste) {
-					if (_log.isDebugEnabled()) {
-						_log.debug(
-							"Terminating the socket thread " + getName() +
-								" that the client requested but never used");
-					}
-
-					return;
-				}
-				finally {
-					_serverSocket.close();
-				}
-
-				socket.shutdownInput();
-
-				try (OutputStream outputStream = socket.getOutputStream();
-					ObjectOutputStream objectOutputStream =
-						new AnnotatedObjectOutputStream(outputStream)) {
-
-					PortalCacheManager<? extends Serializable, ?>
-						portalCacheManager =
-							PortalCacheManagerUtil.getPortalCacheManager(
-								_portalCacheManagerName);
-
-					for (String portalCacheName : _portalCacheNames) {
-						PortalCache<Serializable, Serializable> portalCache =
-							(PortalCache<Serializable, Serializable>)
-								portalCacheManager.getPortalCache(
-									portalCacheName);
-
-						if (portalCache == null) {
-							_skipBootstrapLoaderThreadLocal.set(Boolean.TRUE);
-
-							try {
-								portalCacheManager.getPortalCache(
-									portalCacheName);
-							}
-							finally {
-								_skipBootstrapLoaderThreadLocal.remove();
-							}
-
-							continue;
-						}
-
-						objectOutputStream.writeObject(portalCacheName);
-
-						List<Serializable> keys = portalCache.getKeys();
-
-						for (Serializable key : keys) {
-							Serializable value = portalCache.get(key);
-
-							if (value != null) {
-								CacheElement cacheElement = new CacheElement(
-									key, value);
-
-								objectOutputStream.writeObject(cacheElement);
-							}
-						}
-					}
-
-					objectOutputStream.writeObject(_COMMAND_SOCKET_CLOSE);
-				}
-			}
-			catch (Exception e) {
-				throw new RuntimeException(e);
-			}
-			finally {
-				if (socket != null) {
-					try {
-						socket.close();
-					}
-					catch (IOException ioe) {
-						throw new RuntimeException(ioe);
-					}
-				}
-			}
-		}
-
-		private final String _portalCacheManagerName;
-		private final List<String> _portalCacheNames;
-		private final ServerSocket _serverSocket;
-
-	}
-
-	private static class SocketCacheServerSocketConfiguration
-		implements SocketUtil.ServerSocketConfigurator {
-
-		@Override
-		public void configure(ServerSocket serverSocket)
-			throws SocketException {
-
-			serverSocket.setSoTimeout(
-				GetterUtil.getInteger(
-					PropsUtil.get(PropsKeys.EHCACHE_SOCKET_SO_TIMEOUT), 10000));
-		}
-
-	}
-
-}
\ No newline at end of file
diff --git a/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkPortalCacheBootstrapLoader.java b/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkPortalCacheBootstrapLoader.java
deleted file mode 100644
index 2351fd17c085..000000000000
--- a/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkPortalCacheBootstrapLoader.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/**
- * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
- *
- * This library is free software; you can redistribute it and/or modify it under
- * the terms of the GNU Lesser General Public License as published by the Free
- * Software Foundation; either version 2.1 of the License, or (at your option)
- * any later version.
- *
- * This library is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
- * details.
- */
-
-package com.liferay.portal.cache.multiple.internal.bootstrap;
-
-import com.liferay.petra.string.StringBundler;
-import com.liferay.portal.cache.PortalCacheBootstrapLoader;
-import com.liferay.portal.kernel.log.Log;
-import com.liferay.portal.kernel.log.LogFactoryUtil;
-import com.liferay.portal.kernel.util.GetterUtil;
-
-import java.util.Properties;
-
-/**
- * @author Tina Tian
- */
-public class ClusterLinkPortalCacheBootstrapLoader
-	implements PortalCacheBootstrapLoader {
-
-	public ClusterLinkPortalCacheBootstrapLoader(Properties properties) {
-		if (properties != null) {
-			_bootstrapAsynchronously = GetterUtil.getBoolean(
-				properties.getProperty(
-					PortalCacheBootstrapLoader.BOOTSTRAP_ASYNCHRONOUSLY),
-				PortalCacheBootstrapLoader.DEFAULT_BOOTSTRAP_ASYNCHRONOUSLY);
-		}
-		else {
-			_bootstrapAsynchronously =
-				PortalCacheBootstrapLoader.DEFAULT_BOOTSTRAP_ASYNCHRONOUSLY;
-		}
-	}
-
-	@Override
-	public boolean isAsynchronous() {
-		return _bootstrapAsynchronously;
-	}
-
-	@Override
-	public void loadPortalCache(
-		String portalCacheManagerName, String portalCacheName) {
-
-		if (ClusterLinkBootstrapLoaderHelperUtil.isSkipped()) {
-			return;
-		}
-
-		if (_bootstrapAsynchronously) {
-			BootstrapLoaderClientThread bootstrapLoaderClientThread =
-				new BootstrapLoaderClientThread(
-					portalCacheManagerName, portalCacheName);
-
-			bootstrapLoaderClientThread.start();
-		}
-		else {
-			doLoad(portalCacheManagerName, portalCacheName);
-		}
-	}
-
-	protected void doLoad(
-		String portalCacheManagerName, String portalCacheName) {
-
-		if (_log.isDebugEnabled()) {
-			_log.debug("Bootstraping " + portalCacheName);
-		}
-
-		try {
-			ClusterLinkBootstrapLoaderHelperUtil.loadCachesFromCluster(
-				portalCacheManagerName, portalCacheName);
-		}
-		catch (Exception e) {
-			if (_log.isWarnEnabled()) {
-				_log.warn("Unable to load cache data from the cluster", e);
-			}
-		}
-	}
-
-	private static final Log _log = LogFactoryUtil.getLog(
-		ClusterLinkPortalCacheBootstrapLoader.class);
-
-	private final boolean _bootstrapAsynchronously;
-
-	private class BootstrapLoaderClientThread extends Thread {
-
-		public BootstrapLoaderClientThread(
-			String portalCacheManagerName, String portalCacheName) {
-
-			if (_log.isDebugEnabled()) {
-				_log.debug(
-					StringBundler.concat(
-						"Bootstrap loader client thread for cache ",
-						portalCacheName, " from cache manager ",
-						portalCacheManagerName));
-			}
-
-			_portalCacheManagerName = portalCacheManagerName;
-			_portalCacheName = portalCacheName;
-
-			setDaemon(true);
-			setName(
-				StringBundler.concat(
-					BootstrapLoaderClientThread.class.getName(), " - ",
-					portalCacheManagerName, " - ", portalCacheName));
-			setPriority(Thread.NORM_PRIORITY);
-		}
-
-		@Override
-		public void run() {
-			try {
-				doLoad(_portalCacheManagerName, _portalCacheName);
-			}
-			catch (Exception e) {
-				if (_log.isWarnEnabled()) {
-					_log.warn("Unable to asynchronously stream bootstrap", e);
-				}
-			}
-		}
-
-		private final String _portalCacheManagerName;
-		private final String _portalCacheName;
-
-	}
-
-}
\ No newline at end of file
diff --git a/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkPortalCacheBootstrapLoaderFactory.java b/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkPortalCacheBootstrapLoaderFactory.java
deleted file mode 100644
index 415763c16146..000000000000
--- a/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/bootstrap/ClusterLinkPortalCacheBootstrapLoaderFactory.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
- *
- * This library is free software; you can redistribute it and/or modify it under
- * the terms of the GNU Lesser General Public License as published by the Free
- * Software Foundation; either version 2.1 of the License, or (at your option)
- * any later version.
- *
- * This library is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
- * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
- * details.
- */
-
-package com.liferay.portal.cache.multiple.internal.bootstrap;
-
-import com.liferay.portal.cache.PortalCacheBootstrapLoader;
-import com.liferay.portal.cache.PortalCacheBootstrapLoaderFactory;
-
-import java.util.Properties;
-
-import org.osgi.service.component.annotations.Component;
-
-/**
- * @author Tina Tian
- */
-@Component(
-	enabled = false, immediate = true,
-	service = PortalCacheBootstrapLoaderFactory.class
-)
-public class ClusterLinkPortalCacheBootstrapLoaderFactory
-	implements PortalCacheBootstrapLoaderFactory {
-
-	@Override
-	public PortalCacheBootstrapLoader create(Properties properties) {
-		return new ClusterLinkPortalCacheBootstrapLoader(properties);
-	}
-
-}
\ No newline at end of file
diff --git a/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/portal/profile/ModulePortalProfile.java b/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/portal/profile/ModulePortalProfile.java
index 0c3530926909..8d385397fcc6 100644
--- a/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/portal/profile/ModulePortalProfile.java
+++ b/modules/apps/portal-cache/portal-cache-multiple/src/main/java/com/liferay/portal/cache/multiple/internal/portal/profile/ModulePortalProfile.java
@@ -14,12 +14,9 @@
 
 package com.liferay.portal.cache.multiple.internal.portal.profile;
 
-import com.liferay.portal.cache.PortalCacheBootstrapLoaderFactory;
 import com.liferay.portal.cache.PortalCacheReplicatorFactory;
 import com.liferay.portal.cache.multiple.internal.ClusterLinkPortalCacheReplicatorFactory;
 import com.liferay.portal.cache.multiple.internal.PortalCacheManagerUtil;
-import com.liferay.portal.cache.multiple.internal.bootstrap.ClusterLinkBootstrapLoaderHelperUtil;
-import com.liferay.portal.cache.multiple.internal.bootstrap.ClusterLinkPortalCacheBootstrapLoaderFactory;
 import com.liferay.portal.cache.multiple.internal.cluster.link.ClusterLinkPortalCacheClusterChannelFactory;
 import com.liferay.portal.cache.multiple.internal.cluster.link.PortalCacheClusterLink;
 import com.liferay.portal.cache.multiple.internal.cluster.link.messaging.ClusterLinkMessagingConfigurator;
@@ -63,12 +60,6 @@ public class ModulePortalProfile extends BaseDSModulePortalProfile {
 
 			BundleContext bundleContext = componentContext.getBundleContext();
 
-			bundleContext.registerService(
-				PortalCacheBootstrapLoaderFactory.class,
-				ProxyFactory.newDummyInstance(
-					PortalCacheBootstrapLoaderFactory.class),
-				new HashMapDictionary<>());
-
 			bundleContext.registerService(
 				PortalCacheReplicatorFactory.class,
 				ProxyFactory.newDummyInstance(
@@ -78,9 +69,7 @@ public class ModulePortalProfile extends BaseDSModulePortalProfile {
 
 		init(
 			componentContext, supportedPortalProfileNames,
-			ClusterLinkBootstrapLoaderHelperUtil.class.getName(),
 			ClusterLinkMessagingConfigurator.class.getName(),
-			ClusterLinkPortalCacheBootstrapLoaderFactory.class.getName(),
 			ClusterLinkPortalCacheClusterChannelFactory.class.getName(),
 			ClusterLinkPortalCacheClusterListener.class.getName(),
 			ClusterLinkPortalCacheReplicatorFactory.class.getName(),
diff --git a/modules/apps/portal-cache/portal-cache-test-util/src/main/java/com/liferay/portal/cache/test/util/TestPortalCacheManager.java b/modules/apps/portal-cache/portal-cache-test-util/src/main/java/com/liferay/portal/cache/test/util/TestPortalCacheManager.java
index 5693796fdc5d..6c6a73b3fc32 100644
--- a/modules/apps/portal-cache/portal-cache-test-util/src/main/java/com/liferay/portal/cache/test/util/TestPortalCacheManager.java
+++ b/modules/apps/portal-cache/portal-cache-test-util/src/main/java/com/liferay/portal/cache/test/util/TestPortalCacheManager.java
@@ -130,7 +130,7 @@ public class TestPortalCacheManager<K extends Serializable, V>
 		return new PortalCacheManagerConfiguration(
 			null,
 			new PortalCacheConfiguration(
-				PortalCacheConfiguration.PORTAL_CACHE_NAME_DEFAULT, null, null),
+				PortalCacheConfiguration.PORTAL_CACHE_NAME_DEFAULT, null),
 			null);
 	}
 
diff --git a/portal-impl/src/com/liferay/portal/verify/VerifyProperties.java b/portal-impl/src/com/liferay/portal/verify/VerifyProperties.java
index 0565d3d637f0..f1c813921a1b 100644
--- a/portal-impl/src/com/liferay/portal/verify/VerifyProperties.java
+++ b/portal-impl/src/com/liferay/portal/verify/VerifyProperties.java
@@ -1687,7 +1687,10 @@ public class VerifyProperties extends VerifyProcess {
 			"configuration.jsp",
 		"editor.wysiwyg.portal-web.docroot.html.portlet.portal_settings." +
 			"email_notifications.jsp",
+		"ehcache.bootstrap.cache.loader.enabled",
 		"ehcache.bootstrap.cache.loader.factory",
+		"ehcache.bootstrap.cache.loader.properties",
+		"ehcache.bootstrap.cache.loader.properties.default",
 		"ehcache.cache.event.listener.factory",
 		"ehcache.cache.manager.peer.listener.factory",
 		"ehcache.cache.manager.peer.provider.factory",
diff --git a/portal-impl/src/portal.properties b/portal-impl/src/portal.properties
index dd9fe1c3a3a2..755a9fa6e29d 100644
--- a/portal-impl/src/portal.properties
+++ b/portal-impl/src/portal.properties
@@ -1631,29 +1631,6 @@
     ehcache.single.vm.config.location=/ehcache/liferay-single-vm.xml
     ehcache.multi.vm.config.location=/ehcache/liferay-multi-vm.xml
 
-    #
-    # Set this to true to enable the Ehcache bootstrap cache loader.
-    #
-    # Env: LIFERAY_EHCACHE_PERIOD_BOOTSTRAP_PERIOD_CACHE_PERIOD_LOADER_PERIOD_ENABLED
-    #
-    ehcache.bootstrap.cache.loader.enabled=false
-
-    #
-    # Input a list of comma delimited key value pair to set bootstrap loader
-    # properties for the default cache.
-    #
-    # Env: LIFERAY_EHCACHE_PERIOD_BOOTSTRAP_PERIOD_CACHE_PERIOD_LOADER_PERIOD_PROPERTIES_PERIOD_DEFAULT
-    #
-    ehcache.bootstrap.cache.loader.properties.default=
-
-    #
-    # Input a list of comma delimited key value pair to set bootstrap loader
-    # properties for a specific cache.
-    #
-    # Env: LIFERAY_EHCACHE_PERIOD_BOOTSTRAP_PERIOD_CACHE_PERIOD_LOADER_PERIOD_PROPERTIES_PERIOD__DOLLAR__OPENCURLYBRACE_SPECIFIC_PERIOD_CACHE_PERIOD_NAME_CLOSECURLYBRACE_
-    #
-    #ehcache.bootstrap.cache.loader.properties.${specific.cache.name}=
-
     #
     # Input a list of comma delimited key value pair to set replication
     # properties for the default cache.
diff --git a/portal-impl/test/unit/com/liferay/portal/dao/orm/hibernate/region/dependencies/test-multi-ehcache-config.xml b/portal-impl/test/unit/com/liferay/portal/dao/orm/hibernate/region/dependencies/test-multi-ehcache-config.xml
index 8736b2d6e2a9..29c30947438b 100644
--- a/portal-impl/test/unit/com/liferay/portal/dao/orm/hibernate/region/dependencies/test-multi-ehcache-config.xml
+++ b/portal-impl/test/unit/com/liferay/portal/dao/orm/hibernate/region/dependencies/test-multi-ehcache-config.xml
@@ -19,7 +19,6 @@
 			propertySeparator=","
 		/>
 		<cacheEventListenerFactory class="com.liferay.dummy.DummyCacheEventListenerFactory" />
-		<bootstrapCacheLoaderFactory class="com.liferay.portal.cache.ehcache.LiferayBootstrapCacheLoaderFactory" />
 	</defaultCache>
 
 	<cache name="test.cache">
@@ -29,6 +28,5 @@
 			propertySeparator=","
 		/>
 		<cacheEventListenerFactory class="com.liferay.dummy.DummyCacheEventListenerFactory" />
-		<bootstrapCacheLoaderFactory class="com.liferay.portal.cache.ehcache.LiferayBootstrapCacheLoaderFactory" />
 	</cache>
 </ehcache>
\ No newline at end of file
diff --git a/portal-kernel/src/com/liferay/portal/kernel/util/PropsKeys.java b/portal-kernel/src/com/liferay/portal/kernel/util/PropsKeys.java
index 4c9866d2130c..d50588a7a38c 100644
--- a/portal-kernel/src/com/liferay/portal/kernel/util/PropsKeys.java
+++ b/portal-kernel/src/com/liferay/portal/kernel/util/PropsKeys.java
@@ -1081,16 +1081,6 @@ public interface PropsKeys {
 	public static final String EHCACHE_BLOCKING_CACHE_ALLOWED =
 		"ehcache.blocking.cache.allowed";
 
-	public static final String EHCACHE_BOOTSTRAP_CACHE_LOADER_ENABLED =
-		"ehcache.bootstrap.cache.loader.enabled";
-
-	public static final String EHCACHE_BOOTSTRAP_CACHE_LOADER_PROPERTIES =
-		"ehcache.bootstrap.cache.loader.properties";
-
-	public static final String
-		EHCACHE_BOOTSTRAP_CACHE_LOADER_PROPERTIES_DEFAULT =
-			"ehcache.bootstrap.cache.loader.properties.default";
-
 	public static final String EHCACHE_MULTI_VM_CONFIG_LOCATION =
 		"ehcache.multi.vm.config.location";
 
diff --git a/portal-web/test/functional/com/liferay/portalweb/tests/coreinfrastructureee/clustering/clusteringframework/ClusteringMissingPlugins.testcase b/portal-web/test/functional/com/liferay/portalweb/tests/coreinfrastructureee/clustering/clusteringframework/ClusteringMissingPlugins.testcase
index 4c99ce779fbf..7549cd0f4249 100644
--- a/portal-web/test/functional/com/liferay/portalweb/tests/coreinfrastructureee/clustering/clusteringframework/ClusteringMissingPlugins.testcase
+++ b/portal-web/test/functional/com/liferay/portalweb/tests/coreinfrastructureee/clustering/clusteringframework/ClusteringMissingPlugins.testcase
@@ -27,66 +27,9 @@ definition {
 		}
 	}
 
-	@ignore = "true"
-	@priority = "3"
-	test CacheBootstrapLoader {
-		property custom.properties = "ehcache.bootstrap.cache.loader.enabled=true${line.separator}ehcache.bootstrap.cache.loader.properties.test.cache=bootstrapAsynchronously=false";
-		property test.name.skip.portal.instance = "ClusteringMissingPlugins#CacheBootstrapLoader";
-
-		Clustering.viewClusterStatusInConsole();
-
-		Clustering.enableDebugging(
-			categoryName = "com.liferay.portal.cache.ehcache.internal.event.PortalCacheCacheEventListener.test.cache",
-			nodePort = "8080");
-
-		Clustering.enableDebugging(
-			categoryName = "com.liferay.portal.cache.ehcache.internal.event.PortalCacheCacheEventListener.test.cache",
-			nodePort = "9080");
-
-		Clustering.deployJarOnSpecificServer(
-			liferayDependencyJars = "com.liferay.cluster.test.module.jar",
-			nodePort = "8080");
-
-		Clustering.viewTextNotPresentOnSpecificNode(
-			exceptionText = "Could not resolve module: com.liferay.cluster.test.module",
-			nodePort = "8080");
-
-		Clustering.runGroovyScript(
-			nodePort = "8080",
-			scriptFile = "groovy-script-portal-cache-put-modules.groovy");
-
-		Clustering.viewTextPresentOnSpecificNode(
-			expectedText = "Put test.key into test.cache",
-			nodePort = "8080");
-
-		Clustering.viewTextNotPresentOnSpecificNode(
-			exceptionText = "Unable to deserialize object",
-			nodePort = "9080");
-
-		Clustering.deployJarOnSpecificServer(
-			liferayDependencyJars = "com.liferay.cluster.test.module.jar",
-			nodePort = "9080");
-
-		Clustering.viewTextNotPresentOnSpecificNode(
-			exceptionText = "Could not resolve module: com.liferay.cluster.test.module",
-			nodePort = "9080");
-
-		Clustering.runGroovyScript(
-			nodePort = "9080",
-			scriptFile = "groovy-script-portal-cache-get.groovy");
-
-		Clustering.viewTextPresentOnSpecificNode(
-			expectedText = "Put test.key into test.cache",
-			nodePort = "9080");
-
-		AssertTextEquals(
-			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
-			value1 = "test.key=test.value");
-	}
-
 	@priority = "4"
 	test CacheReplicationbyCopy {
-		property custom.properties = "ehcache.bootstrap.cache.loader.enabled=false${line.separator}ehcache.replicator.properties.test.cache=replicatePutsViaCopy=true";
+		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePutsViaCopy=true";
 		property test.name.skip.portal.instance = "ClusteringMissingPlugins#CacheReplicationbyCopy";
 
 		Clustering.viewClusterStatusInConsole();