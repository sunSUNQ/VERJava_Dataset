commit ae27ad5dfe58c11697101d6d7fe35d38f7bcb4ca
Author: tina.tian <tina.tian@liferay.com>
Date:   Fri Mar 27 16:04:09 2020 -0700

    LPS-110849 Fix unit test

diff --git a/modules/apps/portal-template/portal-template-freemarker/src/test/java/com/liferay/portal/template/freemarker/internal/FreeMarkerTemplateTest.java b/modules/apps/portal-template/portal-template-freemarker/src/test/java/com/liferay/portal/template/freemarker/internal/FreeMarkerTemplateTest.java
index b93f3fb7b195..81af7b30bdbd 100644
--- a/modules/apps/portal-template/portal-template-freemarker/src/test/java/com/liferay/portal/template/freemarker/internal/FreeMarkerTemplateTest.java
+++ b/modules/apps/portal-template/portal-template-freemarker/src/test/java/com/liferay/portal/template/freemarker/internal/FreeMarkerTemplateTest.java
@@ -95,7 +95,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_TEMPLATE_FILE_NAME), null, _configuration,
 			_templateContextHelper, _templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -115,7 +115,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_TEMPLATE_FILE_NAME), null, _configuration,
 			_templateContextHelper, _templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -137,7 +137,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_TEMPLATE_FILE_NAME), null, _configuration,
 			_templateContextHelper, _templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -155,7 +155,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_WRONG_TEMPLATE_ID), null, _configuration,
 			_templateContextHelper, _templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -180,7 +180,7 @@ public class FreeMarkerTemplateTest {
 				_WRONG_TEMPLATE_ID, _TEST_TEMPLATE_CONTENT),
 			null, _configuration, _templateContextHelper,
 			_templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -198,7 +198,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_TEMPLATE_FILE_NAME), null, _configuration,
 			_templateContextHelper, _templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -218,7 +218,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_WRONG_TEMPLATE_ID), null, _configuration,
 			_templateContextHelper, _templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -238,7 +238,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_WRONG_TEMPLATE_ID), null, _configuration,
 			_templateContextHelper, _templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -264,7 +264,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_WRONG_TEMPLATE_ID), null, _configuration,
 			_templateContextHelper, _templateResourceCache, false,
-			(BeansWrapper)_configuration.getObjectWrapper());
+			(BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		template.put(_TEST_KEY, _TEST_VALUE);
 
@@ -289,7 +289,7 @@ public class FreeMarkerTemplateTest {
 		Template template = new FreeMarkerTemplate(
 			new MockTemplateResource(_TEMPLATE_FILE_NAME), context,
 			_configuration, _templateContextHelper, _templateResourceCache,
-			false, (BeansWrapper)_configuration.getObjectWrapper());
+			false, (BeansWrapper)_configuration.getObjectWrapper(), null);
 
 		UnsyncStringWriter unsyncStringWriter = new UnsyncStringWriter();
 
diff --git a/modules/apps/portal-template/portal-template-freemarker/src/test/java/com/liferay/portal/template/freemarker/internal/RestrictedLiferayObjectWrapperTest.java b/modules/apps/portal-template/portal-template-freemarker/src/test/java/com/liferay/portal/template/freemarker/internal/RestrictedLiferayObjectWrapperTest.java
index 2c8b61b62fb6..aa4cb2fa7a6a 100644
--- a/modules/apps/portal-template/portal-template-freemarker/src/test/java/com/liferay/portal/template/freemarker/internal/RestrictedLiferayObjectWrapperTest.java
+++ b/modules/apps/portal-template/portal-template-freemarker/src/test/java/com/liferay/portal/template/freemarker/internal/RestrictedLiferayObjectWrapperTest.java
@@ -22,7 +22,9 @@ import com.liferay.portal.kernel.test.ReflectionTestUtil;
 import com.liferay.portal.kernel.test.rule.CodeCoverageAssertor;
 
 import freemarker.ext.beans.InvalidPropertyException;
+import freemarker.ext.beans.SimpleMethodModel;
 
+import freemarker.template.SimpleScalar;
 import freemarker.template.TemplateModel;
 import freemarker.template.TemplateModelException;
 
@@ -47,72 +49,6 @@ public class RestrictedLiferayObjectWrapperTest
 	public static final CodeCoverageAssertor codeCoverageAssertor =
 		CodeCoverageAssertor.INSTANCE;
 
-	@Test
-	public void testCheckClassIsRestricted() {
-		_testCheckClassIsRestricted(
-			new RestrictedLiferayObjectWrapper(null, null, null),
-			TestLiferayObject.class, null);
-
-		_testCheckClassIsRestricted(
-			new RestrictedLiferayObjectWrapper(
-				new String[] {TestLiferayObject.class.getName()},
-				new String[] {TestLiferayObject.class.getName()}, null),
-			TestLiferayObject.class, null);
-
-		_testCheckClassIsRestricted(
-			new RestrictedLiferayObjectWrapper(
-				null, new String[] {"java.lang.String"}, null),
-			TestLiferayObject.class, null);
-
-		_testCheckClassIsRestricted(
-			new RestrictedLiferayObjectWrapper(
-				null, new String[] {"com.liferay.portal.cache"}, null),
-			TestLiferayObject.class, null);
-
-		_testCheckClassIsRestricted(
-			new RestrictedLiferayObjectWrapper(
-				null, new String[] {TestLiferayObject.class.getName()}, null),
-			TestLiferayObject.class,
-			StringBundler.concat(
-				"Denied resolving class ", TestLiferayObject.class.getName(),
-				" by ", TestLiferayObject.class.getName()));
-
-		_testCheckClassIsRestricted(
-			new RestrictedLiferayObjectWrapper(
-				null, new String[] {"com.liferay.portal.template.freemarker"},
-				null),
-			TestLiferayObject.class,
-			StringBundler.concat(
-				"Denied resolving class ", TestLiferayObject.class.getName(),
-				" by com.liferay.portal.template.freemarker"));
-
-		_testCheckClassIsRestricted(
-			new RestrictedLiferayObjectWrapper(
-				null, new String[] {"com.liferay.portal.template.freemarker"},
-				null),
-			byte.class, null);
-	}
-
-	@Test
-	public void testCheckClassIsRestrictedWithNoContextClassloader() {
-		Thread thread = Thread.currentThread();
-
-		ClassLoader contextClassLoader = thread.getContextClassLoader();
-
-		thread.setContextClassLoader(null);
-
-		try {
-			_testCheckClassIsRestricted(
-				new RestrictedLiferayObjectWrapper(
-					new String[] {TestLiferayObject.class.getName()},
-					new String[] {TestLiferayObject.class.getName()}, null),
-				TestLiferayObject.class, null);
-		}
-		finally {
-			thread.setContextClassLoader(contextClassLoader);
-		}
-	}
-
 	@Test
 	public void testConstructor() {
 		try (CaptureHandler captureHandler =
@@ -157,6 +93,116 @@ public class RestrictedLiferayObjectWrapperTest
 		}
 	}
 
+	@Test
+	public void testIsRestricted() {
+		Assert.assertFalse(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(null, null, null),
+				TestLiferayObject.class));
+
+		Assert.assertFalse(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(
+					new String[] {TestLiferayObject.class.getName()},
+					new String[] {TestLiferayObject.class.getName()}, null),
+				TestLiferayObject.class));
+
+		Assert.assertFalse(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(
+					null, new String[] {"java.lang.String"}, null),
+				TestLiferayObject.class));
+
+		Assert.assertFalse(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(
+					null, new String[] {"com.liferay.portal.cache"}, null),
+				TestLiferayObject.class));
+
+		Assert.assertTrue(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(
+					null, new String[] {TestLiferayObject.class.getName()},
+					null),
+				TestLiferayObject.class));
+
+		Assert.assertTrue(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(
+					null,
+					new String[] {"com.liferay.portal.template.freemarker"},
+					null),
+				TestLiferayObject.class));
+
+		Assert.assertTrue(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(
+					null, new String[] {"com.liferay.portal.*"}, null),
+				TestLiferayObject.class));
+
+		Assert.assertFalse(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(
+					null,
+					new String[] {"com.liferay.portal.template.freemarker"},
+					null),
+				byte.class));
+
+		Assert.assertFalse(
+			_isRestricted(
+				new RestrictedLiferayObjectWrapper(
+					null,
+					new String[] {"com.liferay.portal.template.freemarker"},
+					null),
+				byte.class));
+	}
+
+	@Test
+	public void testIsRestrictedWithNoContextClassloader() {
+		Thread thread = Thread.currentThread();
+
+		ClassLoader contextClassLoader = thread.getContextClassLoader();
+
+		thread.setContextClassLoader(null);
+
+		try {
+			Assert.assertFalse(
+				_isRestricted(
+					new RestrictedLiferayObjectWrapper(
+						new String[] {TestLiferayObject.class.getName()},
+						new String[] {TestLiferayObject.class.getName()}, null),
+					TestLiferayObject.class));
+		}
+		finally {
+			thread.setContextClassLoader(contextClassLoader);
+		}
+	}
+
+	@Test
+	public void testRestrictedClass() throws Exception {
+		RestrictedLiferayObjectWrapper restrictedLiferayObjectWrapper =
+			new RestrictedLiferayObjectWrapper(
+				null, new String[] {TestLiferayMethodObject.class.getName()},
+				null);
+
+		TemplateModel templateModel = restrictedLiferayObjectWrapper.wrap(
+			new TestLiferayMethodObject("test"));
+
+		Assert.assertThat(
+			templateModel,
+			CoreMatchers.instanceOf(LiferayFreeMarkerStringModel.class));
+
+		LiferayFreeMarkerStringModel liferayFreeMarkerStringModel =
+			(LiferayFreeMarkerStringModel)templateModel;
+
+		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "name");
+		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "Name");
+		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "getName");
+		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "getname");
+		_testRestrictedMethodNames(
+			liferayFreeMarkerStringModel, "generateName");
+	}
+
 	@Test
 	public void testRestrictedMethodNames() throws Exception {
 		RestrictedLiferayObjectWrapper restrictedLiferayObjectWrapper =
@@ -167,7 +213,7 @@ public class RestrictedLiferayObjectWrapperTest
 				});
 
 		TemplateModel templateModel = restrictedLiferayObjectWrapper.wrap(
-			new TestLiferayMethodObject("name"));
+			new TestLiferayMethodObject("test"));
 
 		Assert.assertThat(
 			templateModel,
@@ -180,10 +226,19 @@ public class RestrictedLiferayObjectWrapperTest
 		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "Name");
 		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "getName");
 		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "getname");
+
+		SimpleMethodModel simpleMethodModel =
+			(SimpleMethodModel)liferayFreeMarkerStringModel.get("generate");
+
+		TemplateModel resultTemplateModel =
+			(TemplateModel)simpleMethodModel.exec(
+				Collections.singletonList(new SimpleScalar("generate")));
+
+		Assert.assertEquals("test-generate", resultTemplateModel.toString());
 	}
 
 	@Test
-	public void testRestrictedMethodNamesIncorrectSyntax() throws Exception {
+	public void testRestrictedMethodNamesIncorrectSyntax() {
 		try (CaptureHandler captureHandler =
 				JDKLoggerTestUtil.configureJDKLogger(
 					RestrictedLiferayObjectWrapper.class.getName(),
@@ -245,28 +300,40 @@ public class RestrictedLiferayObjectWrapperTest
 				}));
 	}
 
-	private void _testCheckClassIsRestricted(
-		RestrictedLiferayObjectWrapper restrictedLiferayObjectWrapper,
-		Class<?> targetClass, String exceptionMessage) {
+	public class TestLiferayMethodObject {
 
-		try {
-			ReflectionTestUtil.invoke(
-				restrictedLiferayObjectWrapper, "_checkClassIsRestricted",
-				new Class<?>[] {Class.class}, targetClass);
+		public String generate(String postfix) {
+			return _name + StringPool.DASH + postfix;
+		}
 
-			Assert.assertNull(
-				"Should throw TemplateModelException", exceptionMessage);
+		public String getName() {
+			return _name;
 		}
-		catch (Exception exception) {
-			Assert.assertSame(
-				TemplateModelException.class, exception.getClass());
 
-			TemplateModelException templateModelException =
-				(TemplateModelException)exception;
+		public void setName(String name) {
+			_name = name;
+		}
 
-			Assert.assertEquals(
-				exceptionMessage, templateModelException.getMessage());
+		@Override
+		public String toString() {
+			return _name;
 		}
+
+		private TestLiferayMethodObject(String name) {
+			_name = name;
+		}
+
+		private String _name;
+
+	}
+
+	private boolean _isRestricted(
+		RestrictedLiferayObjectWrapper restrictedLiferayObjectWrapper,
+		Class<?> targetClass) {
+
+		return ReflectionTestUtil.invoke(
+			restrictedLiferayObjectWrapper, "_isRestricted",
+			new Class<?>[] {Class.class}, targetClass);
 	}
 
 	private void _testRestrictedMethodNames(
@@ -290,27 +357,4 @@ public class RestrictedLiferayObjectWrapperTest
 		}
 	}
 
-	private class TestLiferayMethodObject {
-
-		public String getName() {
-			return _name;
-		}
-
-		public void setName(String name) {
-			_name = name;
-		}
-
-		@Override
-		public String toString() {
-			return _name;
-		}
-
-		private TestLiferayMethodObject(String name) {
-			_name = name;
-		}
-
-		private String _name;
-
-	}
-
 }
\ No newline at end of file