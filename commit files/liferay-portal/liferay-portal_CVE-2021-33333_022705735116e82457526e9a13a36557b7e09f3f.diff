commit 022705735116e82457526e9a13a36557b7e09f3f
Author: InaÃÅcio Nery <inacio.nery@liferay.com>
Date:   Fri May 29 14:45:09 2020 -0300

    LPS-113656 regen

diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalService.java b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalService.java
index 0882202751a8..c2e0565c37f6 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalService.java
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalService.java
@@ -205,6 +205,10 @@ public interface KaleoInstanceLocalService
 	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
 	public KaleoInstance fetchKaleoInstance(long kaleoInstanceId);
 
+	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
+	public KaleoInstance fetchKaleoInstance(
+		long kaleoInstanceId, long companyId, long userId);
+
 	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
 	public ActionableDynamicQuery getActionableDynamicQuery();
 
diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalServiceUtil.java b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalServiceUtil.java
index b721d488d722..7fa03e01fafc 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalServiceUtil.java
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalServiceUtil.java
@@ -241,6 +241,13 @@ public class KaleoInstanceLocalServiceUtil {
 		return getService().fetchKaleoInstance(kaleoInstanceId);
 	}
 
+	public static com.liferay.portal.workflow.kaleo.model.KaleoInstance
+		fetchKaleoInstance(long kaleoInstanceId, long companyId, long userId) {
+
+		return getService().fetchKaleoInstance(
+			kaleoInstanceId, companyId, userId);
+	}
+
 	public static com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery
 		getActionableDynamicQuery() {
 
diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalServiceWrapper.java b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalServiceWrapper.java
index f62fe7a546e7..c76d5bfa1649 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalServiceWrapper.java
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/KaleoInstanceLocalServiceWrapper.java
@@ -252,6 +252,14 @@ public class KaleoInstanceLocalServiceWrapper
 		return _kaleoInstanceLocalService.fetchKaleoInstance(kaleoInstanceId);
 	}
 
+	@Override
+	public com.liferay.portal.workflow.kaleo.model.KaleoInstance
+		fetchKaleoInstance(long kaleoInstanceId, long companyId, long userId) {
+
+		return _kaleoInstanceLocalService.fetchKaleoInstance(
+			kaleoInstanceId, companyId, userId);
+	}
+
 	@Override
 	public com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery
 		getActionableDynamicQuery() {
diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/KaleoInstancePersistence.java b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/KaleoInstancePersistence.java
index cd1ceaa27943..1619583ab3c2 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/KaleoInstancePersistence.java
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/KaleoInstancePersistence.java
@@ -796,6 +796,66 @@ public interface KaleoInstancePersistence
 	 */
 	public int countByCN_CPK(String className, long classPK);
 
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or throws a <code>NoSuchInstanceException</code> if it could not be found.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the matching kaleo instance
+	 * @throws NoSuchInstanceException if a matching kaleo instance could not be found
+	 */
+	public KaleoInstance findByKII_C_U(
+			long kaleoInstanceId, long companyId, long userId)
+		throws NoSuchInstanceException;
+
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or returns <code>null</code> if it could not be found. Uses the finder cache.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the matching kaleo instance, or <code>null</code> if a matching kaleo instance could not be found
+	 */
+	public KaleoInstance fetchByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId);
+
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or returns <code>null</code> if it could not be found, optionally using the finder cache.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @param useFinderCache whether to use the finder cache
+	 * @return the matching kaleo instance, or <code>null</code> if a matching kaleo instance could not be found
+	 */
+	public KaleoInstance fetchByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId,
+		boolean useFinderCache);
+
+	/**
+	 * Removes the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; from the database.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the kaleo instance that was removed
+	 */
+	public KaleoInstance removeByKII_C_U(
+			long kaleoInstanceId, long companyId, long userId)
+		throws NoSuchInstanceException;
+
+	/**
+	 * Returns the number of kaleo instances where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63;.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the number of matching kaleo instances
+	 */
+	public int countByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId);
+
 	/**
 	 * Returns all the kaleo instances where companyId = &#63; and kaleoDefinitionName = &#63; and kaleoDefinitionVersion = &#63; and completionDate = &#63;.
 	 *
diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/KaleoInstanceUtil.java b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/KaleoInstanceUtil.java
index 361e01dde1c8..1213eede44b6 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/KaleoInstanceUtil.java
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-api/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/KaleoInstanceUtil.java
@@ -1058,6 +1058,88 @@ public class KaleoInstanceUtil {
 		return getPersistence().countByCN_CPK(className, classPK);
 	}
 
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or throws a <code>NoSuchInstanceException</code> if it could not be found.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the matching kaleo instance
+	 * @throws NoSuchInstanceException if a matching kaleo instance could not be found
+	 */
+	public static KaleoInstance findByKII_C_U(
+			long kaleoInstanceId, long companyId, long userId)
+		throws com.liferay.portal.workflow.kaleo.exception.
+			NoSuchInstanceException {
+
+		return getPersistence().findByKII_C_U(
+			kaleoInstanceId, companyId, userId);
+	}
+
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or returns <code>null</code> if it could not be found. Uses the finder cache.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the matching kaleo instance, or <code>null</code> if a matching kaleo instance could not be found
+	 */
+	public static KaleoInstance fetchByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId) {
+
+		return getPersistence().fetchByKII_C_U(
+			kaleoInstanceId, companyId, userId);
+	}
+
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or returns <code>null</code> if it could not be found, optionally using the finder cache.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @param useFinderCache whether to use the finder cache
+	 * @return the matching kaleo instance, or <code>null</code> if a matching kaleo instance could not be found
+	 */
+	public static KaleoInstance fetchByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId,
+		boolean useFinderCache) {
+
+		return getPersistence().fetchByKII_C_U(
+			kaleoInstanceId, companyId, userId, useFinderCache);
+	}
+
+	/**
+	 * Removes the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; from the database.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the kaleo instance that was removed
+	 */
+	public static KaleoInstance removeByKII_C_U(
+			long kaleoInstanceId, long companyId, long userId)
+		throws com.liferay.portal.workflow.kaleo.exception.
+			NoSuchInstanceException {
+
+		return getPersistence().removeByKII_C_U(
+			kaleoInstanceId, companyId, userId);
+	}
+
+	/**
+	 * Returns the number of kaleo instances where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63;.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the number of matching kaleo instances
+	 */
+	public static int countByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId) {
+
+		return getPersistence().countByKII_C_U(
+			kaleoInstanceId, companyId, userId);
+	}
+
 	/**
 	 * Returns all the kaleo instances where companyId = &#63; and kaleoDefinitionName = &#63; and kaleoDefinitionVersion = &#63; and completionDate = &#63;.
 	 *
diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/java/com/liferay/portal/workflow/kaleo/model/impl/KaleoInstanceModelImpl.java b/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/java/com/liferay/portal/workflow/kaleo/model/impl/KaleoInstanceModelImpl.java
index 7125c33cc6d1..a28ba49c02dc 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/java/com/liferay/portal/workflow/kaleo/model/impl/KaleoInstanceModelImpl.java
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/java/com/liferay/portal/workflow/kaleo/model/impl/KaleoInstanceModelImpl.java
@@ -138,9 +138,9 @@ public class KaleoInstanceModelImpl
 
 	public static final long KALEODEFINITIONVERSIONID_COLUMN_BITMASK = 128L;
 
-	public static final long USERID_COLUMN_BITMASK = 256L;
+	public static final long KALEOINSTANCEID_COLUMN_BITMASK = 256L;
 
-	public static final long KALEOINSTANCEID_COLUMN_BITMASK = 512L;
+	public static final long USERID_COLUMN_BITMASK = 512L;
 
 	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
 		_entityCacheEnabled = entityCacheEnabled;
@@ -394,9 +394,19 @@ public class KaleoInstanceModelImpl
 	public void setKaleoInstanceId(long kaleoInstanceId) {
 		_columnBitmask = -1L;
 
+		if (!_setOriginalKaleoInstanceId) {
+			_setOriginalKaleoInstanceId = true;
+
+			_originalKaleoInstanceId = _kaleoInstanceId;
+		}
+
 		_kaleoInstanceId = kaleoInstanceId;
 	}
 
+	public long getOriginalKaleoInstanceId() {
+		return _originalKaleoInstanceId;
+	}
+
 	@Override
 	public long getGroupId() {
 		return _groupId;
@@ -831,6 +841,11 @@ public class KaleoInstanceModelImpl
 	public void resetOriginalValues() {
 		KaleoInstanceModelImpl kaleoInstanceModelImpl = this;
 
+		kaleoInstanceModelImpl._originalKaleoInstanceId =
+			kaleoInstanceModelImpl._kaleoInstanceId;
+
+		kaleoInstanceModelImpl._setOriginalKaleoInstanceId = false;
+
 		kaleoInstanceModelImpl._originalCompanyId =
 			kaleoInstanceModelImpl._companyId;
 
@@ -1044,6 +1059,8 @@ public class KaleoInstanceModelImpl
 
 	private long _mvccVersion;
 	private long _kaleoInstanceId;
+	private long _originalKaleoInstanceId;
+	private boolean _setOriginalKaleoInstanceId;
 	private long _groupId;
 	private long _companyId;
 	private long _originalCompanyId;
diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/impl/KaleoInstancePersistenceImpl.java b/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/impl/KaleoInstancePersistenceImpl.java
index 9dfb92735d6d..3e670d2e915a 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/impl/KaleoInstancePersistenceImpl.java
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/java/com/liferay/portal/workflow/kaleo/service/persistence/impl/KaleoInstancePersistenceImpl.java
@@ -33,6 +33,7 @@ import com.liferay.portal.kernel.service.persistence.impl.BasePersistenceImpl;
 import com.liferay.portal.kernel.util.GetterUtil;
 import com.liferay.portal.kernel.util.OrderByComparator;
 import com.liferay.portal.kernel.util.ProxyUtil;
+import com.liferay.portal.kernel.util.StringUtil;
 import com.liferay.portal.workflow.kaleo.exception.NoSuchInstanceException;
 import com.liferay.portal.workflow.kaleo.model.KaleoInstance;
 import com.liferay.portal.workflow.kaleo.model.KaleoInstanceTable;
@@ -47,6 +48,7 @@ import java.lang.reflect.InvocationHandler;
 
 import java.sql.Timestamp;
 
+import java.util.Collections;
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
@@ -2816,6 +2818,278 @@ public class KaleoInstancePersistenceImpl
 	private static final String _FINDER_COLUMN_CN_CPK_CLASSPK_2 =
 		"kaleoInstance.classPK = ?";
 
+	private FinderPath _finderPathFetchByKII_C_U;
+	private FinderPath _finderPathCountByKII_C_U;
+
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or throws a <code>NoSuchInstanceException</code> if it could not be found.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the matching kaleo instance
+	 * @throws NoSuchInstanceException if a matching kaleo instance could not be found
+	 */
+	@Override
+	public KaleoInstance findByKII_C_U(
+			long kaleoInstanceId, long companyId, long userId)
+		throws NoSuchInstanceException {
+
+		KaleoInstance kaleoInstance = fetchByKII_C_U(
+			kaleoInstanceId, companyId, userId);
+
+		if (kaleoInstance == null) {
+			StringBundler sb = new StringBundler(8);
+
+			sb.append(_NO_SUCH_ENTITY_WITH_KEY);
+
+			sb.append("kaleoInstanceId=");
+			sb.append(kaleoInstanceId);
+
+			sb.append(", companyId=");
+			sb.append(companyId);
+
+			sb.append(", userId=");
+			sb.append(userId);
+
+			sb.append("}");
+
+			if (_log.isDebugEnabled()) {
+				_log.debug(sb.toString());
+			}
+
+			throw new NoSuchInstanceException(sb.toString());
+		}
+
+		return kaleoInstance;
+	}
+
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or returns <code>null</code> if it could not be found. Uses the finder cache.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the matching kaleo instance, or <code>null</code> if a matching kaleo instance could not be found
+	 */
+	@Override
+	public KaleoInstance fetchByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId) {
+
+		return fetchByKII_C_U(kaleoInstanceId, companyId, userId, true);
+	}
+
+	/**
+	 * Returns the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; or returns <code>null</code> if it could not be found, optionally using the finder cache.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @param useFinderCache whether to use the finder cache
+	 * @return the matching kaleo instance, or <code>null</code> if a matching kaleo instance could not be found
+	 */
+	@Override
+	public KaleoInstance fetchByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId,
+		boolean useFinderCache) {
+
+		Object[] finderArgs = null;
+
+		if (useFinderCache) {
+			finderArgs = new Object[] {kaleoInstanceId, companyId, userId};
+		}
+
+		Object result = null;
+
+		if (useFinderCache) {
+			result = finderCache.getResult(
+				_finderPathFetchByKII_C_U, finderArgs, this);
+		}
+
+		if (result instanceof KaleoInstance) {
+			KaleoInstance kaleoInstance = (KaleoInstance)result;
+
+			if ((kaleoInstanceId != kaleoInstance.getKaleoInstanceId()) ||
+				(companyId != kaleoInstance.getCompanyId()) ||
+				(userId != kaleoInstance.getUserId())) {
+
+				result = null;
+			}
+		}
+
+		if (result == null) {
+			StringBundler sb = new StringBundler(5);
+
+			sb.append(_SQL_SELECT_KALEOINSTANCE_WHERE);
+
+			sb.append(_FINDER_COLUMN_KII_C_U_KALEOINSTANCEID_2);
+
+			sb.append(_FINDER_COLUMN_KII_C_U_COMPANYID_2);
+
+			sb.append(_FINDER_COLUMN_KII_C_U_USERID_2);
+
+			String sql = sb.toString();
+
+			Session session = null;
+
+			try {
+				session = openSession();
+
+				Query query = session.createQuery(sql);
+
+				QueryPos queryPos = QueryPos.getInstance(query);
+
+				queryPos.add(kaleoInstanceId);
+
+				queryPos.add(companyId);
+
+				queryPos.add(userId);
+
+				List<KaleoInstance> list = query.list();
+
+				if (list.isEmpty()) {
+					if (useFinderCache) {
+						finderCache.putResult(
+							_finderPathFetchByKII_C_U, finderArgs, list);
+					}
+				}
+				else {
+					if (list.size() > 1) {
+						Collections.sort(list, Collections.reverseOrder());
+
+						if (_log.isWarnEnabled()) {
+							if (!useFinderCache) {
+								finderArgs = new Object[] {
+									kaleoInstanceId, companyId, userId
+								};
+							}
+
+							_log.warn(
+								"KaleoInstancePersistenceImpl.fetchByKII_C_U(long, long, long, boolean) with parameters (" +
+									StringUtil.merge(finderArgs) +
+										") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
+						}
+					}
+
+					KaleoInstance kaleoInstance = list.get(0);
+
+					result = kaleoInstance;
+
+					cacheResult(kaleoInstance);
+				}
+			}
+			catch (Exception exception) {
+				if (useFinderCache) {
+					finderCache.removeResult(
+						_finderPathFetchByKII_C_U, finderArgs);
+				}
+
+				throw processException(exception);
+			}
+			finally {
+				closeSession(session);
+			}
+		}
+
+		if (result instanceof List<?>) {
+			return null;
+		}
+		else {
+			return (KaleoInstance)result;
+		}
+	}
+
+	/**
+	 * Removes the kaleo instance where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63; from the database.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the kaleo instance that was removed
+	 */
+	@Override
+	public KaleoInstance removeByKII_C_U(
+			long kaleoInstanceId, long companyId, long userId)
+		throws NoSuchInstanceException {
+
+		KaleoInstance kaleoInstance = findByKII_C_U(
+			kaleoInstanceId, companyId, userId);
+
+		return remove(kaleoInstance);
+	}
+
+	/**
+	 * Returns the number of kaleo instances where kaleoInstanceId = &#63; and companyId = &#63; and userId = &#63;.
+	 *
+	 * @param kaleoInstanceId the kaleo instance ID
+	 * @param companyId the company ID
+	 * @param userId the user ID
+	 * @return the number of matching kaleo instances
+	 */
+	@Override
+	public int countByKII_C_U(
+		long kaleoInstanceId, long companyId, long userId) {
+
+		FinderPath finderPath = _finderPathCountByKII_C_U;
+
+		Object[] finderArgs = new Object[] {kaleoInstanceId, companyId, userId};
+
+		Long count = (Long)finderCache.getResult(finderPath, finderArgs, this);
+
+		if (count == null) {
+			StringBundler sb = new StringBundler(4);
+
+			sb.append(_SQL_COUNT_KALEOINSTANCE_WHERE);
+
+			sb.append(_FINDER_COLUMN_KII_C_U_KALEOINSTANCEID_2);
+
+			sb.append(_FINDER_COLUMN_KII_C_U_COMPANYID_2);
+
+			sb.append(_FINDER_COLUMN_KII_C_U_USERID_2);
+
+			String sql = sb.toString();
+
+			Session session = null;
+
+			try {
+				session = openSession();
+
+				Query query = session.createQuery(sql);
+
+				QueryPos queryPos = QueryPos.getInstance(query);
+
+				queryPos.add(kaleoInstanceId);
+
+				queryPos.add(companyId);
+
+				queryPos.add(userId);
+
+				count = (Long)query.uniqueResult();
+
+				finderCache.putResult(finderPath, finderArgs, count);
+			}
+			catch (Exception exception) {
+				finderCache.removeResult(finderPath, finderArgs);
+
+				throw processException(exception);
+			}
+			finally {
+				closeSession(session);
+			}
+		}
+
+		return count.intValue();
+	}
+
+	private static final String _FINDER_COLUMN_KII_C_U_KALEOINSTANCEID_2 =
+		"kaleoInstance.kaleoInstanceId = ? AND ";
+
+	private static final String _FINDER_COLUMN_KII_C_U_COMPANYID_2 =
+		"kaleoInstance.companyId = ? AND ";
+
+	private static final String _FINDER_COLUMN_KII_C_U_USERID_2 =
+		"kaleoInstance.userId = ?";
+
 	private FinderPath _finderPathWithPaginationFindByC_KDN_KDV_CD;
 	private FinderPath _finderPathWithoutPaginationFindByC_KDN_KDV_CD;
 	private FinderPath _finderPathCountByC_KDN_KDV_CD;
@@ -3571,6 +3845,14 @@ public class KaleoInstancePersistenceImpl
 			entityCacheEnabled, KaleoInstanceImpl.class,
 			kaleoInstance.getPrimaryKey(), kaleoInstance);
 
+		finderCache.putResult(
+			_finderPathFetchByKII_C_U,
+			new Object[] {
+				kaleoInstance.getKaleoInstanceId(),
+				kaleoInstance.getCompanyId(), kaleoInstance.getUserId()
+			},
+			kaleoInstance);
+
 		kaleoInstance.resetOriginalValues();
 	}
 
@@ -3625,6 +3907,8 @@ public class KaleoInstancePersistenceImpl
 
 		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
 		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
+
+		clearUniqueFindersCache((KaleoInstanceModelImpl)kaleoInstance, true);
 	}
 
 	@Override
@@ -3636,6 +3920,9 @@ public class KaleoInstancePersistenceImpl
 			entityCache.removeResult(
 				entityCacheEnabled, KaleoInstanceImpl.class,
 				kaleoInstance.getPrimaryKey());
+
+			clearUniqueFindersCache(
+				(KaleoInstanceModelImpl)kaleoInstance, true);
 		}
 	}
 
@@ -3651,6 +3938,49 @@ public class KaleoInstancePersistenceImpl
 		}
 	}
 
+	protected void cacheUniqueFindersCache(
+		KaleoInstanceModelImpl kaleoInstanceModelImpl) {
+
+		Object[] args = new Object[] {
+			kaleoInstanceModelImpl.getKaleoInstanceId(),
+			kaleoInstanceModelImpl.getCompanyId(),
+			kaleoInstanceModelImpl.getUserId()
+		};
+
+		finderCache.putResult(
+			_finderPathCountByKII_C_U, args, Long.valueOf(1), false);
+		finderCache.putResult(
+			_finderPathFetchByKII_C_U, args, kaleoInstanceModelImpl, false);
+	}
+
+	protected void clearUniqueFindersCache(
+		KaleoInstanceModelImpl kaleoInstanceModelImpl, boolean clearCurrent) {
+
+		if (clearCurrent) {
+			Object[] args = new Object[] {
+				kaleoInstanceModelImpl.getKaleoInstanceId(),
+				kaleoInstanceModelImpl.getCompanyId(),
+				kaleoInstanceModelImpl.getUserId()
+			};
+
+			finderCache.removeResult(_finderPathCountByKII_C_U, args);
+			finderCache.removeResult(_finderPathFetchByKII_C_U, args);
+		}
+
+		if ((kaleoInstanceModelImpl.getColumnBitmask() &
+			 _finderPathFetchByKII_C_U.getColumnBitmask()) != 0) {
+
+			Object[] args = new Object[] {
+				kaleoInstanceModelImpl.getOriginalKaleoInstanceId(),
+				kaleoInstanceModelImpl.getOriginalCompanyId(),
+				kaleoInstanceModelImpl.getOriginalUserId()
+			};
+
+			finderCache.removeResult(_finderPathCountByKII_C_U, args);
+			finderCache.removeResult(_finderPathFetchByKII_C_U, args);
+		}
+	}
+
 	/**
 	 * Creates a new kaleo instance with the primary key. Does not add the kaleo instance to the database.
 	 *
@@ -4036,6 +4366,9 @@ public class KaleoInstancePersistenceImpl
 			entityCacheEnabled, KaleoInstanceImpl.class,
 			kaleoInstance.getPrimaryKey(), kaleoInstance, false);
 
+		clearUniqueFindersCache(kaleoInstanceModelImpl, false);
+		cacheUniqueFindersCache(kaleoInstanceModelImpl);
+
 		kaleoInstance.resetOriginalValues();
 
 		return kaleoInstance;
@@ -4426,6 +4759,23 @@ public class KaleoInstancePersistenceImpl
 			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countByCN_CPK",
 			new String[] {String.class.getName(), Long.class.getName()});
 
+		_finderPathFetchByKII_C_U = new FinderPath(
+			entityCacheEnabled, finderCacheEnabled, KaleoInstanceImpl.class,
+			FINDER_CLASS_NAME_ENTITY, "fetchByKII_C_U",
+			new String[] {
+				Long.class.getName(), Long.class.getName(), Long.class.getName()
+			},
+			KaleoInstanceModelImpl.KALEOINSTANCEID_COLUMN_BITMASK |
+			KaleoInstanceModelImpl.COMPANYID_COLUMN_BITMASK |
+			KaleoInstanceModelImpl.USERID_COLUMN_BITMASK);
+
+		_finderPathCountByKII_C_U = new FinderPath(
+			entityCacheEnabled, finderCacheEnabled, Long.class,
+			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countByKII_C_U",
+			new String[] {
+				Long.class.getName(), Long.class.getName(), Long.class.getName()
+			});
+
 		_finderPathWithPaginationFindByC_KDN_KDV_CD = new FinderPath(
 			entityCacheEnabled, finderCacheEnabled, KaleoInstanceImpl.class,
 			FINDER_CLASS_NAME_LIST_WITH_PAGINATION, "findByC_KDN_KDV_CD",
diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/resources/META-INF/sql/indexes.sql b/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/resources/META-INF/sql/indexes.sql
index ce9e18efaedd..1ffb79a5bd8d 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/resources/META-INF/sql/indexes.sql
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-service/src/main/resources/META-INF/sql/indexes.sql
@@ -16,6 +16,7 @@ create index IX_58D85ECB on KaleoInstance (className[$COLUMN_LENGTH:200$], class
 create index IX_BF5839F8 on KaleoInstance (companyId, kaleoDefinitionName[$COLUMN_LENGTH:200$], kaleoDefinitionVersion, completionDate);
 create index IX_C6D7A867 on KaleoInstance (companyId, userId);
 create index IX_3DA1A5AC on KaleoInstance (kaleoDefinitionVersionId, completed);
+create index IX_6D12641D on KaleoInstance (kaleoInstanceId, companyId, userId);
 
 create index IX_360D34D9 on KaleoInstanceToken (companyId, parentKaleoInstanceTokenId, completionDate);
 create index IX_1181057E on KaleoInstanceToken (kaleoDefinitionVersionId);
diff --git a/modules/apps/portal-workflow/portal-workflow-kaleo-test/src/testIntegration/java/com/liferay/portal/workflow/kaleo/service/persistence/test/KaleoInstancePersistenceTest.java b/modules/apps/portal-workflow/portal-workflow-kaleo-test/src/testIntegration/java/com/liferay/portal/workflow/kaleo/service/persistence/test/KaleoInstancePersistenceTest.java
index 204c3cba2152..347ec7d2c00b 100644
--- a/modules/apps/portal-workflow/portal-workflow-kaleo-test/src/testIntegration/java/com/liferay/portal/workflow/kaleo/service/persistence/test/KaleoInstancePersistenceTest.java
+++ b/modules/apps/portal-workflow/portal-workflow-kaleo-test/src/testIntegration/java/com/liferay/portal/workflow/kaleo/service/persistence/test/KaleoInstancePersistenceTest.java
@@ -21,6 +21,7 @@ import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
 import com.liferay.portal.kernel.dao.orm.ProjectionFactoryUtil;
 import com.liferay.portal.kernel.dao.orm.QueryUtil;
 import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
+import com.liferay.portal.kernel.test.ReflectionTestUtil;
 import com.liferay.portal.kernel.test.rule.AggregateTestRule;
 import com.liferay.portal.kernel.test.util.RandomTestUtil;
 import com.liferay.portal.kernel.transaction.Propagation;
@@ -254,6 +255,15 @@ public class KaleoInstancePersistenceTest {
 		_persistence.countByCN_CPK((String)null, 0L);
 	}
 
+	@Test
+	public void testCountByKII_C_U() throws Exception {
+		_persistence.countByKII_C_U(
+			RandomTestUtil.nextLong(), RandomTestUtil.nextLong(),
+			RandomTestUtil.nextLong());
+
+		_persistence.countByKII_C_U(0L, 0L, 0L);
+	}
+
 	@Test
 	public void testCountByC_KDN_KDV_CD() throws Exception {
 		_persistence.countByC_KDN_KDV_CD(
@@ -514,6 +524,31 @@ public class KaleoInstancePersistenceTest {
 		Assert.assertEquals(0, result.size());
 	}
 
+	@Test
+	public void testResetOriginalValues() throws Exception {
+		KaleoInstance newKaleoInstance = addKaleoInstance();
+
+		_persistence.clearCache();
+
+		KaleoInstance existingKaleoInstance = _persistence.findByPrimaryKey(
+			newKaleoInstance.getPrimaryKey());
+
+		Assert.assertEquals(
+			Long.valueOf(existingKaleoInstance.getKaleoInstanceId()),
+			ReflectionTestUtil.<Long>invoke(
+				existingKaleoInstance, "getOriginalKaleoInstanceId",
+				new Class<?>[0]));
+		Assert.assertEquals(
+			Long.valueOf(existingKaleoInstance.getCompanyId()),
+			ReflectionTestUtil.<Long>invoke(
+				existingKaleoInstance, "getOriginalCompanyId",
+				new Class<?>[0]));
+		Assert.assertEquals(
+			Long.valueOf(existingKaleoInstance.getUserId()),
+			ReflectionTestUtil.<Long>invoke(
+				existingKaleoInstance, "getOriginalUserId", new Class<?>[0]));
+	}
+
 	protected KaleoInstance addKaleoInstance() throws Exception {
 		long pk = RandomTestUtil.nextLong();
 