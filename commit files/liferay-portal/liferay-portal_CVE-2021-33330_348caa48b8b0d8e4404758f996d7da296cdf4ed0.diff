commit 348caa48b8b0d8e4404758f996d7da296cdf4ed0
Author: Marta Medio <marta.medio@liferay.com>
Date:   Tue Jun 16 16:07:35 2020 +0200

    LPS-113348 Extract RequestFilter and add OAuth2 check

diff --git a/modules/apps/portal-remote/portal-remote-cors-impl/src/main/java/com/liferay/portal/remote/cors/internal/jaxrs/feature/CORSAnnotationDynamicFeature.java b/modules/apps/portal-remote/portal-remote-cors-impl/src/main/java/com/liferay/portal/remote/cors/internal/jaxrs/feature/CORSAnnotationDynamicFeature.java
index 2e4402f2c064..b32e9abedf77 100644
--- a/modules/apps/portal-remote/portal-remote-cors-impl/src/main/java/com/liferay/portal/remote/cors/internal/jaxrs/feature/CORSAnnotationDynamicFeature.java
+++ b/modules/apps/portal-remote/portal-remote-cors-impl/src/main/java/com/liferay/portal/remote/cors/internal/jaxrs/feature/CORSAnnotationDynamicFeature.java
@@ -14,6 +14,7 @@
 
 package com.liferay.portal.remote.cors.internal.jaxrs.feature;
 
+import com.liferay.oauth2.provider.scope.liferay.OAuth2ProviderScopeLiferayAccessControlContext;
 import com.liferay.petra.reflect.AnnotationLocator;
 import com.liferay.petra.string.StringPool;
 import com.liferay.portal.kernel.util.HashMapBuilder;
@@ -25,8 +26,10 @@ import java.io.IOException;
 
 import java.util.Map;
 
+import javax.ws.rs.HttpMethod;
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.container.ContainerRequestFilter;
+import javax.ws.rs.container.ContainerResponseContext;
 import javax.ws.rs.container.ContainerResponseFilter;
 import javax.ws.rs.container.DynamicFeature;
 import javax.ws.rs.container.PreMatching;
@@ -61,28 +64,9 @@ public class CORSAnnotationDynamicFeature implements DynamicFeature {
 
 			context.register(
 				new CORSPreflighContainerRequestFilter(corsSupport));
-			context.register(buildCORSResponseFilter(corsSupport));
-		}
-	}
-
-	protected ContainerResponseFilter buildCORSResponseFilter(
-		CORSSupport corsSupport) {
-
-		return (containerRequestContext, containerResponseContext) -> {
-			MultivaluedMap<String, String> headers =
-				containerRequestContext.getHeaders();
-
-			if (corsSupport.isCORSRequest(headers::getFirst) &&
-				corsSupport.isValidCORSRequest(
-					containerRequestContext.getMethod(), headers::getFirst)) {
 
-				MultivaluedMap<String, Object> responseHeaders =
-					containerResponseContext.getHeaders();
-
-				corsSupport.writeResponseHeaders(
-					headers::getFirst, responseHeaders::addFirst);
-			}
-		};
+			context.register(new CORSContainerRequestFilter(corsSupport));
+		}
 	}
 
 	protected CORS getCORS(ResourceInfo resourceInfo) {
@@ -120,6 +104,40 @@ public class CORSAnnotationDynamicFeature implements DynamicFeature {
 	@Context
 	private ResourceInfo _resourceInfo;
 
+	private static class CORSContainerRequestFilter
+		implements ContainerResponseFilter {
+
+		public CORSContainerRequestFilter(CORSSupport corsSupport) {
+			_corsSupport = corsSupport;
+		}
+
+		@Override
+		public void filter(
+				ContainerRequestContext containerRequestContext,
+				ContainerResponseContext containerResponseContext)
+			throws IOException {
+
+			MultivaluedMap<String, String> headers =
+				containerRequestContext.getHeaders();
+
+			if (OAuth2ProviderScopeLiferayAccessControlContext.
+					isOAuth2AuthVerified() &&
+				_corsSupport.isCORSRequest(headers::getFirst) &&
+				_corsSupport.isValidCORSRequest(
+					containerRequestContext.getMethod(), headers::getFirst)) {
+
+				MultivaluedMap<String, Object> responseHeaders =
+					containerResponseContext.getHeaders();
+
+				_corsSupport.writeResponseHeaders(
+					headers::getFirst, responseHeaders::addFirst);
+			}
+		}
+
+		private final CORSSupport _corsSupport;
+
+	}
+
 	@PreMatching
 	private static class CORSPreflighContainerRequestFilter
 		implements ContainerRequestFilter {
@@ -137,7 +155,7 @@ public class CORSAnnotationDynamicFeature implements DynamicFeature {
 
 			if (_corsSupport.isCORSRequest(headers::getFirst) &&
 				StringUtil.equals(
-					containerRequestContext.getMethod(), "OPTIONS") &&
+					containerRequestContext.getMethod(), HttpMethod.OPTIONS) &&
 				_corsSupport.isValidCORSPreflightRequest(headers::getFirst)) {
 
 				Response.ResponseBuilder responseBuilder = Response.ok();