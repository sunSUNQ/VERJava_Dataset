commit b1d58addf9ed7de209522f6968ad5ee4db12fd62
Author: Marta Medio <marta.medio@liferay.com>
Date:   Wed Jun 17 11:07:50 2020 +0200

    LPS-113348 Simplification of tests to check that CORS does not work without OAuth2

diff --git a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSAnnotationClientTest.java b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSAnnotationClientTest.java
index fcba5a27be4e..3cdfd0b29b68 100644
--- a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSAnnotationClientTest.java
+++ b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSAnnotationClientTest.java
@@ -50,13 +50,11 @@ public class CORSAnnotationClientTest extends BaseCORSClientTestCase {
 	}
 
 	@Test
-	public void testCORSApplication() throws Exception {
-		assertJaxRSUrl("/test/cors-app", HttpMethod.GET, true);
-	}
+	public void testApplicationAnnotationNoCORSWithoutOAuth2()
+		throws Exception {
 
-	@Test
-	public void testCORSPrelightApplication() throws Exception {
 		assertJaxRSUrl("/test/cors-app", HttpMethod.OPTIONS, true);
+		assertJaxRSUrl("/test/cors-app", HttpMethod.GET, false);
 	}
 
 }
\ No newline at end of file
diff --git a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationClientTest.java b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationClientTest.java
index d3faf21f02f8..92ace3230f51 100644
--- a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationClientTest.java
+++ b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationClientTest.java
@@ -57,60 +57,12 @@ public class CORSConfigurationClientTest extends BaseCORSClientTestCase {
 
 		createFactoryConfiguration(
 			WebContextCORSConfiguration.class.getName(), properties);
-
-		properties = new HashMapDictionary<>();
-
-		properties.put("osgi.jaxrs.name", "test-cors-url");
-
-		registerJaxRsApplication(
-			new CORSTestApplication(), "test-cors-url", properties);
-
-		properties = new HashMapDictionary<>();
-
-		properties.put("filter.mapping.url.patterns", "/cors-app");
-		properties.put(
-			"servlet.context.helper.select.filter",
-			"(osgi.jaxrs.name=test-cors-url)");
-
-		createFactoryConfiguration(
-			WebContextCORSConfiguration.class.getName(), properties);
-
-		registerJaxRsApplication(
-			new CORSTestApplication(), "no-cors", new HashMapDictionary<>());
-
-		properties = new HashMapDictionary<>();
-
-		properties.put("osgi.jaxrs.name", "test-cors-wrong-url");
-
-		registerJaxRsApplication(
-			new CORSTestApplication(), "test-cors-wrong-url", properties);
-
-		properties = new HashMapDictionary<>();
-
-		properties.put("filter.mapping.url.patterns", "/wrong");
-		properties.put(
-			"servlet.context.helper.select.filter",
-			"(osgi.jaxrs.name=test-cors-wrong-url)");
-
-		createFactoryConfiguration(
-			WebContextCORSConfiguration.class.getName(), properties);
-	}
-
-	@Test
-	public void testCORSApplication() throws Exception {
-		assertJaxRSUrl("/cors/cors-app", HttpMethod.GET, true);
-		assertJaxRSUrl("/no-cors/cors-app", HttpMethod.GET, false);
-		assertJaxRSUrl("/test-cors-url/cors-app", HttpMethod.GET, true);
-		assertJaxRSUrl("/test-cors-wrong-url/cors-app", HttpMethod.GET, false);
 	}
 
 	@Test
-	public void testCORSPreflightApplication() throws Exception {
+	public void testApplicationNoCorsWithoutOAuth2() throws Exception {
 		assertJaxRSUrl("/cors/cors-app", HttpMethod.OPTIONS, true);
-		assertJaxRSUrl("/no-cors/cors-app", HttpMethod.OPTIONS, false);
-		assertJaxRSUrl("/test-cors-url/cors-app", HttpMethod.OPTIONS, true);
-		assertJaxRSUrl(
-			"/test-cors-wrong-url/cors-app", HttpMethod.OPTIONS, false);
+		assertJaxRSUrl("/cors/cors-app", HttpMethod.GET, false);
 	}
 
 }
\ No newline at end of file
diff --git a/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationPortalTest.java b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationPortalTest.java
new file mode 100644
index 000000000000..ae409264cc5a
--- /dev/null
+++ b/modules/apps/portal-remote/portal-remote-cors-test/src/testIntegration/java/com/liferay/portal/remote/cors/client/test/CORSConfigurationPortalTest.java
@@ -0,0 +1,61 @@
+/**
+ * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
+ *
+ * This library is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License as published by the Free
+ * Software Foundation; either version 2.1 of the License, or (at your option)
+ * any later version.
+ *
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
+ * details.
+ */
+
+package com.liferay.portal.remote.cors.client.test;
+
+import com.liferay.arquillian.extension.junit.bridge.junit.Arquillian;
+import com.liferay.portal.kernel.test.rule.AggregateTestRule;
+import com.liferay.portal.kernel.util.HashMapDictionary;
+import com.liferay.portal.remote.cors.configuration.PortalCORSConfiguration;
+import com.liferay.portal.test.rule.LiferayIntegrationTestRule;
+
+import java.util.Dictionary;
+
+import javax.ws.rs.HttpMethod;
+
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+/**
+ * @author Marta Medio
+ */
+@RunWith(Arquillian.class)
+public class CORSConfigurationPortalTest extends BaseCORSClientTestCase {
+
+	@ClassRule
+	@Rule
+	public static final AggregateTestRule aggregateTestRule =
+		new LiferayIntegrationTestRule();
+
+	@Test
+	public void testNoCORSUsingBasic() throws Exception {
+		assertJsonWSUrl("/user/get-current-user", HttpMethod.OPTIONS, true);
+		assertJsonWSUrl("/user/get-current-user", HttpMethod.GET, false);
+
+		Dictionary<String, Object> properties = new HashMapDictionary<>();
+
+		properties.put("configuration.name", "test-cors");
+
+		properties.put("filter.mapping.url.pattern", "/api/jsonws/*");
+
+		createFactoryConfiguration(
+			PortalCORSConfiguration.class.getName(), properties);
+
+		assertJsonWSUrl("/user/get-current-user", HttpMethod.OPTIONS, true);
+		assertJsonWSUrl("/user/get-current-user", HttpMethod.GET, false);
+	}
+
+}
\ No newline at end of file