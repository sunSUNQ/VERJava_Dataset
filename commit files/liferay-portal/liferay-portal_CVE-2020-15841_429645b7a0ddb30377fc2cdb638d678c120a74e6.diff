commit 429645b7a0ddb30377fc2cdb638d678c120a74e6
Author: Tomáš Polešovský <tomas.polesovsky@liferay.com>
Date:   Wed Oct 30 16:34:27 2019 +0100

    LPS-104370 Fix other places

diff --git a/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/java/com/liferay/portal/settings/authentication/ldap/web/internal/portlet/action/PortalSettingsTestLDAPGroupsMVCRenderCommand.java b/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/java/com/liferay/portal/settings/authentication/ldap/web/internal/portlet/action/PortalSettingsTestLDAPGroupsMVCRenderCommand.java
index 087b7b68a98b..7a1db5e24f7c 100644
--- a/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/java/com/liferay/portal/settings/authentication/ldap/web/internal/portlet/action/PortalSettingsTestLDAPGroupsMVCRenderCommand.java
+++ b/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/java/com/liferay/portal/settings/authentication/ldap/web/internal/portlet/action/PortalSettingsTestLDAPGroupsMVCRenderCommand.java
@@ -15,7 +15,17 @@
 package com.liferay.portal.settings.authentication.ldap.web.internal.portlet.action;
 
 import com.liferay.configuration.admin.constants.ConfigurationAdminPortletKeys;
+import com.liferay.portal.kernel.log.Log;
+import com.liferay.portal.kernel.log.LogFactoryUtil;
 import com.liferay.portal.kernel.portlet.bridges.mvc.MVCRenderCommand;
+import com.liferay.portal.kernel.portlet.bridges.mvc.MVCRenderConstants;
+import com.liferay.portal.kernel.security.auth.AuthTokenUtil;
+import com.liferay.portal.kernel.security.auth.PrincipalException;
+import com.liferay.portal.kernel.util.Portal;
+
+import javax.portlet.PortletException;
+import javax.portlet.RenderRequest;
+import javax.portlet.RenderResponse;
 
 import javax.servlet.ServletContext;
 
@@ -35,6 +45,32 @@ import org.osgi.service.component.annotations.Reference;
 public class PortalSettingsTestLDAPGroupsMVCRenderCommand
 	extends BasePortalSettingsMVCRenderCommand {
 
+	@Override
+	public String render(
+			RenderRequest renderRequest, RenderResponse renderResponse)
+		throws PortletException {
+
+		try {
+			AuthTokenUtil.checkCSRFToken(
+				_portal.getOriginalServletRequest(
+					_portal.getHttpServletRequest(renderRequest)),
+				getClass().getName());
+
+			return super.render(renderRequest, renderResponse);
+		}
+		catch (PrincipalException pe) {
+			if (_log.isDebugEnabled()) {
+				_log.debug(
+					"Unable to test LDAP connection: " + pe.getMessage(), pe);
+			}
+			else if (_log.isWarnEnabled()) {
+				_log.warn("Unable to test LDAP connection: " + pe.getMessage());
+			}
+		}
+
+		return MVCRenderConstants.MVC_PATH_VALUE_SKIP_DISPATCH;
+	}
+
 	@Override
 	protected String getJspPath() {
 		return _JSP_PATH;
@@ -51,4 +87,10 @@ public class PortalSettingsTestLDAPGroupsMVCRenderCommand
 	private static final String _JSP_PATH =
 		"/com.liferay.portal.settings.web/test_ldap_groups.jsp";
 
+	private static final Log _log = LogFactoryUtil.getLog(
+		PortalSettingsTestLDAPGroupsMVCRenderCommand.class);
+
+	@Reference
+	private Portal _portal;
+
 }
\ No newline at end of file
diff --git a/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/java/com/liferay/portal/settings/authentication/ldap/web/internal/portlet/action/PortalSettingsTestLDAPUsersMVCRenderCommand.java b/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/java/com/liferay/portal/settings/authentication/ldap/web/internal/portlet/action/PortalSettingsTestLDAPUsersMVCRenderCommand.java
index 79a7a3b3db1d..dff93f4689cd 100644
--- a/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/java/com/liferay/portal/settings/authentication/ldap/web/internal/portlet/action/PortalSettingsTestLDAPUsersMVCRenderCommand.java
+++ b/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/java/com/liferay/portal/settings/authentication/ldap/web/internal/portlet/action/PortalSettingsTestLDAPUsersMVCRenderCommand.java
@@ -15,7 +15,17 @@
 package com.liferay.portal.settings.authentication.ldap.web.internal.portlet.action;
 
 import com.liferay.configuration.admin.constants.ConfigurationAdminPortletKeys;
+import com.liferay.portal.kernel.log.Log;
+import com.liferay.portal.kernel.log.LogFactoryUtil;
 import com.liferay.portal.kernel.portlet.bridges.mvc.MVCRenderCommand;
+import com.liferay.portal.kernel.portlet.bridges.mvc.MVCRenderConstants;
+import com.liferay.portal.kernel.security.auth.AuthTokenUtil;
+import com.liferay.portal.kernel.security.auth.PrincipalException;
+import com.liferay.portal.kernel.util.Portal;
+
+import javax.portlet.PortletException;
+import javax.portlet.RenderRequest;
+import javax.portlet.RenderResponse;
 
 import javax.servlet.ServletContext;
 
@@ -35,6 +45,32 @@ import org.osgi.service.component.annotations.Reference;
 public class PortalSettingsTestLDAPUsersMVCRenderCommand
 	extends BasePortalSettingsMVCRenderCommand {
 
+	@Override
+	public String render(
+			RenderRequest renderRequest, RenderResponse renderResponse)
+		throws PortletException {
+
+		try {
+			AuthTokenUtil.checkCSRFToken(
+				_portal.getOriginalServletRequest(
+					_portal.getHttpServletRequest(renderRequest)),
+				getClass().getName());
+
+			return super.render(renderRequest, renderResponse);
+		}
+		catch (PrincipalException pe) {
+			if (_log.isDebugEnabled()) {
+				_log.debug(
+					"Unable to test LDAP connection: " + pe.getMessage(), pe);
+			}
+			else if (_log.isWarnEnabled()) {
+				_log.warn("Unable to test LDAP connection: " + pe.getMessage());
+			}
+		}
+
+		return MVCRenderConstants.MVC_PATH_VALUE_SKIP_DISPATCH;
+	}
+
 	@Override
 	protected String getJspPath() {
 		return _JSP_PATH;
@@ -51,4 +87,10 @@ public class PortalSettingsTestLDAPUsersMVCRenderCommand
 	private static final String _JSP_PATH =
 		"/com.liferay.portal.settings.web/test_ldap_users.jsp";
 
+	private static final Log _log = LogFactoryUtil.getLog(
+		PortalSettingsTestLDAPUsersMVCRenderCommand.class);
+
+	@Reference
+	private Portal _portal;
+
 }
\ No newline at end of file
diff --git a/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/resources/META-INF/resources/com.liferay.portal.settings.web/edit_ldap_server.jsp b/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/resources/META-INF/resources/com.liferay.portal.settings.web/edit_ldap_server.jsp
index 95ff0ff0d3e3..55a5232d3d35 100644
--- a/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/resources/META-INF/resources/com.liferay.portal.settings.web/edit_ldap_server.jsp
+++ b/modules/apps/portal-settings/portal-settings-authentication-ldap-web/src/main/resources/META-INF/resources/com.liferay.portal.settings.web/edit_ldap_server.jsp
@@ -507,13 +507,14 @@ renderResponse.setTitle((ldapServerId == 0) ? LanguageUtil.get(resourceBundle, "
 
 			var url = null;
 
-			var data = {};
+			var data = {
+				p_auth: '<%= AuthTokenUtil.getToken(request) %>'
+			};
 
 			if (type === 'ldapConnection') {
 				url =
 					'<portlet:renderURL copyCurrentRenderParameters="<%= false %>" windowState="<%= LiferayWindowState.EXCLUSIVE.toString() %>"><portlet:param name="mvcRenderCommandName" value="/portal_settings/test_ldap_connection" /></portlet:renderURL>';
 
-				data.p_auth = '<%= AuthTokenUtil.getToken(request) %>';
 			} else if (type === 'ldapGroups') {
 				url =
 					'<portlet:renderURL copyCurrentRenderParameters="<%= false %>" windowState="<%= LiferayWindowState.EXCLUSIVE.toString() %>"><portlet:param name="mvcRenderCommandName" value="/portal_settings/test_ldap_groups" /></portlet:renderURL>';