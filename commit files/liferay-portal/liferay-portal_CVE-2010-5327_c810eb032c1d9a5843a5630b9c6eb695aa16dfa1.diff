commit c810eb032c1d9a5843a5630b9c6eb695aa16dfa1
Author: Mika Koivisto <mika.koivisto@liferay.com>
Date:   Fri Apr 15 15:56:44 2016 +0300

    LPS-64814 Add proper key serialization and deserialization

diff --git a/util-java/src/com/liferay/util/Encryptor.java b/util-java/src/com/liferay/util/Encryptor.java
index 3a1ebae737d8..1597e24082f0 100644
--- a/util-java/src/com/liferay/util/Encryptor.java
+++ b/util-java/src/com/liferay/util/Encryptor.java
@@ -37,6 +37,7 @@ import java.util.concurrent.ConcurrentHashMap;
 
 import javax.crypto.Cipher;
 import javax.crypto.KeyGenerator;
+import javax.crypto.spec.SecretKeySpec;
 
 /**
  * @author Brian Wing Shun Chan
@@ -117,6 +118,12 @@ public class Encryptor {
 		}
 	}
 
+	public static Key deserializeKey(String base64String) {
+		byte[] encodedKey = Base64.decode(base64String);
+
+		return new SecretKeySpec(encodedKey, Encryptor.KEY_ALGORITHM);
+	}
+
 	public static String digest(String text) {
 		return DigesterUtil.digest(text);
 	}
@@ -245,6 +252,10 @@ public class Encryptor {
 		return (Provider)providerClass.newInstance();
 	}
 
+	public static String serializeKey(Key key) {
+		return Base64.encode(key.getEncoded());
+	}
+
 	private static final Log _log = LogFactoryUtil.getLog(Encryptor.class);
 
 	private static final Map<String, Cipher> _decryptCipherMap =
diff --git a/util-java/test/unit/com/liferay/util/EncryptorTest.java b/util-java/test/unit/com/liferay/util/EncryptorTest.java
new file mode 100644
index 000000000000..5caa073f1a04
--- /dev/null
+++ b/util-java/test/unit/com/liferay/util/EncryptorTest.java
@@ -0,0 +1,86 @@
+/**
+ * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
+ *
+ * This library is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License as published by the Free
+ * Software Foundation; either version 2.1 of the License, or (at your option)
+ * any later version.
+ *
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
+ * details.
+ */
+
+package com.liferay.util;
+
+import com.liferay.portal.kernel.util.Props;
+import com.liferay.portal.kernel.util.PropsKeys;
+import com.liferay.portal.kernel.util.PropsUtil;
+
+import java.security.Key;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.mockito.Mockito;
+
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.modules.junit4.PowerMockRunner;
+
+/**
+ * @author Mika Koivisto
+ */
+@RunWith(PowerMockRunner.class)
+@PowerMockIgnore("javax.crypto.*")
+public class EncryptorTest extends PowerMockito {
+
+	@Before
+	public void setUp() {
+		Props props = mock(Props.class);
+
+		_propsUtil = new PropsUtil();
+
+		_oldProps = _propsUtil.getProps();
+
+		_propsUtil.setProps(props);
+
+		when(
+			props.get(Mockito.eq(PropsKeys.COMPANY_ENCRYPTION_ALGORITHM))
+		).thenReturn(
+			"AES"
+		);
+
+		when(
+			props.get(Mockito.eq(PropsKeys.COMPANY_ENCRYPTION_KEY_SIZE))
+		).thenReturn(
+			"128"
+		);
+	}
+
+	@After
+	public void tearDown() {
+		_propsUtil.setProps(_oldProps);
+	}
+
+	@Test
+	public void testKeySerialization() throws Exception {
+		Key key = Encryptor.generateKey();
+
+		String encryptedString = Encryptor.encrypt(key, "Hello World!");
+
+		String serializedKey = Encryptor.serializeKey(key);
+
+		key = Encryptor.deserializeKey(serializedKey);
+
+		Assert.assertEquals(
+			"Hello World!", Encryptor.decrypt(key, encryptedString));
+	}
+
+	private Props _oldProps;
+	private PropsUtil _propsUtil;
+}