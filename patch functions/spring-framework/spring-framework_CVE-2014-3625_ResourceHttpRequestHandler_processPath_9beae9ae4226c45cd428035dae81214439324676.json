[{"cve_id": "spring-framework", "added_line": [{"target_line_num": 226, "target_line_code": "* Process the given resource path to be used."}, {"target_line_num": 227, "target_line_code": "* <p>The default implementation replaces any combination of leading '/' and"}, {"target_line_num": 228, "target_line_code": "* control characters (00-1F and 7F) with a single \"/\" or \"\". For example"}, {"target_line_num": 230, "target_line_code": "* @since 3.2.12"}, {"target_line_num": 231, "target_line_code": "*/"}, {"target_line_num": 232, "target_line_code": "protected String processPath(String path) {"}, {"target_line_num": 233, "target_line_code": "boolean slash = false;"}, {"target_line_num": 234, "target_line_code": "for (int i = 0; i < path.length(); i++) {"}, {"target_line_num": 235, "target_line_code": "if (path.charAt(i) == '/') {"}, {"target_line_num": 236, "target_line_code": "slash = true;"}, {"target_line_num": 238, "target_line_code": "else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {"}, {"target_line_num": 239, "target_line_code": "if (i == 0 || (i == 1 && slash)) {"}, {"target_line_num": 240, "target_line_code": "return path;"}, {"target_line_num": 242, "target_line_code": "path = slash ? \"/\" + path.substring(i) : path.substring(i);"}, {"target_line_num": 243, "target_line_code": "if (logger.isTraceEnabled()) {"}, {"target_line_num": 244, "target_line_code": "logger.trace(\"Path trimmed for leading '/' and control characters: \" + path);"}, {"target_line_num": 246, "target_line_code": "return path;"}, {"target_line_num": 249, "target_line_code": "return (slash ? \"/\" : \"\");"}, {"target_line_num": 252, "target_line_code": "/**"}, {"target_line_num": 253, "target_line_code": "* Identifies invalid resource paths. By default rejects:"}, {"target_line_num": 254, "target_line_code": "* <ul>"}, {"target_line_num": 255, "target_line_code": "* <li>Paths that contain \"WEB-INF\" or \"META-INF\""}, {"target_line_num": 256, "target_line_code": "* <li>Paths that contain \"../\" after a call to"}, {"target_line_num": 257, "target_line_code": "* {@link org.springframework.util.StringUtils#cleanPath}."}, {"target_line_num": 258, "target_line_code": "* <li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl"}, {"target_line_num": 259, "target_line_code": "* valid URL} or would represent one after the leading slash is removed."}, {"target_line_num": 260, "target_line_code": "* </ul>"}, {"target_line_num": 261, "target_line_code": "* <p><strong>Note:</strong> this method assumes that leading, duplicate '/'"}, {"target_line_num": 262, "target_line_code": "* or control characters (e.g. white space) have been trimmed so that the"}, {"target_line_num": 263, "target_line_code": "* path starts predictably with a single '/' or does not have one."}, {"target_line_num": 265, "target_line_code": "* @return {@code true} if the path is invalid, {@code false} otherwise"}, {"target_line_num": 268, "target_line_code": "if (logger.isTraceEnabled()) {"}, {"target_line_num": 269, "target_line_code": "logger.trace(\"Applying \\\"invalid path\\\" checks to path: \" + path);"}, {"target_line_num": 271, "target_line_code": "if (path.contains(\"WEB-INF\") || path.contains(\"META-INF\")) {"}, {"target_line_num": 272, "target_line_code": "if (logger.isTraceEnabled()) {"}, {"target_line_num": 273, "target_line_code": "logger.trace(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\");"}, {"target_line_num": 275, "target_line_code": "return true;"}, {"target_line_num": 277, "target_line_code": "if (path.contains(\":/\")) {"}, {"target_line_num": 278, "target_line_code": "String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path);"}, {"target_line_num": 279, "target_line_code": "if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith(\"url:\")) {"}, {"target_line_num": 280, "target_line_code": "if (logger.isTraceEnabled()) {"}, {"target_line_num": 281, "target_line_code": "logger.trace(\"Path represents URL or has \\\"url:\\\" prefix.\");"}, {"target_line_num": 283, "target_line_code": "return true;"}, {"target_line_num": 286, "target_line_code": "if (path.contains(\"../\")) {"}, {"target_line_num": 287, "target_line_code": "path = StringUtils.cleanPath(path);"}, {"target_line_num": 288, "target_line_code": "if (path.contains(\"../\")) {"}, {"target_line_num": 289, "target_line_code": "if (logger.isTraceEnabled()) {"}, {"target_line_num": 290, "target_line_code": "logger.trace(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\");"}, {"target_line_num": 292, "target_line_code": "return true;"}, {"target_line_num": 295, "target_line_code": "return false;"}, {"target_line_num": 298, "target_line_code": "private boolean isResourceUnderLocation(Resource resource, Resource location) throws IOException {"}, {"target_line_num": 299, "target_line_code": "if (!resource.getClass().equals(location.getClass())) {"}, {"target_line_num": 300, "target_line_code": "return false;"}, {"target_line_num": 302, "target_line_code": "String resourcePath;"}, {"target_line_num": 303, "target_line_code": "String locationPath;"}, {"target_line_num": 304, "target_line_code": "if (resource instanceof ClassPathResource) {"}, {"target_line_num": 305, "target_line_code": "resourcePath = ((ClassPathResource) resource).getPath();"}, {"target_line_num": 306, "target_line_code": "locationPath = ((ClassPathResource) location).getPath();"}, {"target_line_num": 308, "target_line_code": "else if (resource instanceof UrlResource) {"}, {"target_line_num": 309, "target_line_code": "resourcePath = resource.getURL().toExternalForm();"}, {"target_line_num": 310, "target_line_code": "locationPath = location.getURL().toExternalForm();"}, {"target_line_num": 312, "target_line_code": "else {"}, {"target_line_num": 313, "target_line_code": "resourcePath = resource.getURL().getPath();"}, {"target_line_num": 314, "target_line_code": "locationPath = location.getURL().getPath();"}, {"target_line_num": 316, "target_line_code": "locationPath = (locationPath.endsWith(\"/\") || locationPath.isEmpty() ? locationPath : locationPath + \"/\");"}, {"target_line_num": 317, "target_line_code": "if (!resourcePath.startsWith(locationPath)) {"}, {"target_line_num": 318, "target_line_code": "return false;"}, {"target_line_num": 320, "target_line_code": "if (resourcePath.contains(\"%\")) {"}, {"target_line_num": 322, "target_line_code": "if (URLDecoder.decode(resourcePath, \"UTF-8\").contains(\"../\")) {"}, {"target_line_num": 323, "target_line_code": "if (logger.isTraceEnabled()) {"}, {"target_line_num": 324, "target_line_code": "logger.trace(\"Resolved resource path contains \\\"../\\\" after decoding: \" + resourcePath);"}, {"target_line_num": 326, "target_line_code": "return false;"}, {"target_line_num": 329, "target_line_code": "return true;"}], "removed_line": [{"source_line_num": 197, "source_line_code": "* Validates the given path: returns {@code true} if the given path is not a valid resource path."}, {"source_line_num": 198, "source_line_code": "* <p>The default implementation rejects paths containing \"WEB-INF\" or \"META-INF\" as well as paths"}, {"source_line_num": 199, "source_line_code": "* with relative paths (\"../\") that result in access of a parent directory."}, {"source_line_num": 201, "source_line_code": "* @return {@code true} if the path has been recognized as invalid, {@code false} otherwise"}, {"source_line_num": 204, "source_line_code": "return (path.contains(\"WEB-INF\") || path.contains(\"META-INF\") || StringUtils.cleanPath(path).startsWith(\"..\"));"}], "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java", "patch_func": "processPath", "diff_file": "spring-framework_CVE-2014-3625_9beae9ae4226c45cd428035dae81214439324676.diff", "patch_tag": "v4.0.8.RELEASE", "source_tag": "v4.0.7.RELEASE"}]