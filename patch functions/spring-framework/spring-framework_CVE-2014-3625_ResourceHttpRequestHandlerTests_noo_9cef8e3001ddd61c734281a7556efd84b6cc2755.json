[{"cve_id": "spring-framework", "added_line": [{"target_line_num": 132, "target_line_code": "public void invalidPath() throws Exception {"}, {"target_line_num": 134, "target_line_code": "Resource location = new ClassPathResource(\"test/\", getClass());"}, {"target_line_num": 135, "target_line_code": "this.handler.setLocations(Arrays.asList(location));"}, {"target_line_num": 137, "target_line_code": "testInvalidPath(location, \"../testsecret/secret.txt\");"}, {"target_line_num": 138, "target_line_code": "testInvalidPath(location, \"test/../../testsecret/secret.txt\");"}, {"target_line_num": 139, "target_line_code": "testInvalidPath(location, \":/../../testsecret/secret.txt\");"}, {"target_line_num": 141, "target_line_code": "location = new UrlResource(getClass().getResource(\"./test/\"));"}, {"target_line_num": 135, "target_line_code": "this.handler.setLocations(Arrays.asList(location));"}, {"target_line_num": 143, "target_line_code": "Resource secretResource = new UrlResource(getClass().getResource(\"testsecret/secret.txt\"));"}, {"target_line_num": 144, "target_line_code": "String secretPath = secretResource.getURL().getPath();"}, {"target_line_num": 146, "target_line_code": "testInvalidPath(location, \"file:\" + secretPath);"}, {"target_line_num": 147, "target_line_code": "testInvalidPath(location, \"/file:\" + secretPath);"}, {"target_line_num": 148, "target_line_code": "testInvalidPath(location, \"url:\" + secretPath);"}, {"target_line_num": 149, "target_line_code": "testInvalidPath(location, \"/url:\" + secretPath);"}, {"target_line_num": 150, "target_line_code": "testInvalidPath(location, \"/\" + secretPath);"}, {"target_line_num": 152, "target_line_code": "testInvalidPath(location, \"/%2E%2E/testsecret/secret.txt\");"}, {"target_line_num": 153, "target_line_code": "testInvalidPath(location, \"/  \" + secretPath);"}, {"target_line_num": 148, "target_line_code": "testInvalidPath(location, \"url:\" + secretPath);"}, {"target_line_num": 157, "target_line_code": "@Test"}, {"target_line_num": 158, "target_line_code": "public void ignoreInvalidEscapeSequence() throws Exception {"}, {"target_line_num": 159, "target_line_code": "this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, \"/%foo%/bar.txt\");"}, {"target_line_num": 157, "target_line_code": "@Test"}, {"target_line_num": 166, "target_line_code": "public void processPath() throws Exception {"}, {"target_line_num": 167, "target_line_code": "assertSame(\"/foo/bar\", this.handler.processPath(\"/foo/bar\"));"}, {"target_line_num": 168, "target_line_code": "assertSame(\"foo/bar\", this.handler.processPath(\"foo/bar\"));"}, {"target_line_num": 171, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath(\"  /foo/bar\"));"}, {"target_line_num": 172, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath((char) 1 + \"/foo/bar\"));"}, {"target_line_num": 173, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath((char) 31 + \"/foo/bar\"));"}, {"target_line_num": 174, "target_line_code": "assertEquals(\"foo/bar\", this.handler.processPath(\"  foo/bar\"));"}, {"target_line_num": 175, "target_line_code": "assertEquals(\"foo/bar\", this.handler.processPath((char) 31 + \"foo/bar\"));"}, {"target_line_num": 178, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath((char) 127 + \"/foo/bar\"));"}, {"target_line_num": 178, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath((char) 127 + \"/foo/bar\"));"}, {"target_line_num": 182, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath(\"  /  foo/bar\"));"}, {"target_line_num": 183, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath(\"  /  /  foo/bar\"));"}, {"target_line_num": 188, "target_line_code": "assertEquals(\"\", this.handler.processPath(\"   \"));"}, {"target_line_num": 189, "target_line_code": "assertEquals(\"/\", this.handler.processPath(\"/\"));"}, {"target_line_num": 191, "target_line_code": "assertEquals(\"/\", this.handler.processPath(\"/ /   / \"));"}, {"target_line_num": 194, "target_line_code": "@Test"}, {"target_line_num": 195, "target_line_code": "public void initAllowedLocations() throws Exception {"}, {"target_line_num": 196, "target_line_code": "PathResourceResolver resolver = (PathResourceResolver) this.handler.getResourceResolvers().get(0);"}, {"target_line_num": 197, "target_line_code": "Resource[] locations = resolver.getAllowedLocations();"}, {"target_line_num": 199, "target_line_code": "assertEquals(2, locations.length);"}, {"target_line_num": 200, "target_line_code": "assertEquals(\"test/\", ((ClassPathResource) locations[0]).getPath());"}, {"target_line_num": 201, "target_line_code": "assertEquals(\"testalternatepath/\", ((ClassPathResource) locations[1]).getPath());"}, {"target_line_num": 204, "target_line_code": "@Test"}, {"target_line_num": 205, "target_line_code": "public void initAllowedLocationsWithExplicitConfiguration() throws Exception {"}, {"target_line_num": 206, "target_line_code": "ClassPathResource location1 = new ClassPathResource(\"test/\", getClass());"}, {"target_line_num": 207, "target_line_code": "ClassPathResource location2 = new ClassPathResource(\"testalternatepath/\", getClass());"}, {"target_line_num": 209, "target_line_code": "PathResourceResolver pathResolver = new PathResourceResolver();"}, {"target_line_num": 210, "target_line_code": "pathResolver.setAllowedLocations(location1);"}, {"target_line_num": 212, "target_line_code": "ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler();"}, {"target_line_num": 213, "target_line_code": "handler.setResourceResolvers(Arrays.asList(pathResolver));"}, {"target_line_num": 214, "target_line_code": "handler.setLocations(Arrays.asList(location1, location2));"}, {"target_line_num": 215, "target_line_code": "handler.afterPropertiesSet();"}, {"target_line_num": 217, "target_line_code": "Resource[] locations = pathResolver.getAllowedLocations();"}, {"target_line_num": 218, "target_line_code": "assertEquals(1, locations.length);"}, {"target_line_num": 219, "target_line_code": "assertEquals(\"test/\", ((ClassPathResource) locations[0]).getPath());"}, {"target_line_num": 133, "target_line_code": "public void invalidPath() throws Exception {"}, {"target_line_num": 135, "target_line_code": "Resource location = new ClassPathResource(\"test/\", getClass());"}, {"target_line_num": 136, "target_line_code": "this.handler.setLocations(Arrays.asList(location));"}, {"target_line_num": 138, "target_line_code": "testInvalidPath(location, \"../testsecret/secret.txt\");"}, {"target_line_num": 139, "target_line_code": "testInvalidPath(location, \"test/../../testsecret/secret.txt\");"}, {"target_line_num": 140, "target_line_code": "testInvalidPath(location, \":/../../testsecret/secret.txt\");"}, {"target_line_num": 142, "target_line_code": "location = new UrlResource(getClass().getResource(\"./test/\"));"}, {"target_line_num": 143, "target_line_code": "this.handler.setLocations(Arrays.asList(location));"}, {"target_line_num": 144, "target_line_code": "Resource secretResource = new UrlResource(getClass().getResource(\"testsecret/secret.txt\"));"}, {"target_line_num": 145, "target_line_code": "String secretPath = secretResource.getURL().getPath();"}, {"target_line_num": 147, "target_line_code": "testInvalidPath(location, \"file:\" + secretPath);"}, {"target_line_num": 148, "target_line_code": "testInvalidPath(location, \"/file:\" + secretPath);"}, {"target_line_num": 149, "target_line_code": "testInvalidPath(location, \"url:\" + secretPath);"}, {"target_line_num": 150, "target_line_code": "testInvalidPath(location, \"/url:\" + secretPath);"}, {"target_line_num": 151, "target_line_code": "testInvalidPath(location, \"/\" + secretPath);"}, {"target_line_num": 153, "target_line_code": "testInvalidPath(location, \"/%2E%2E/testsecret/secret.txt\");"}, {"target_line_num": 154, "target_line_code": "testInvalidPath(location, \"/  \" + secretPath);"}, {"target_line_num": 155, "target_line_code": "testInvalidPath(location, \"url:\" + secretPath);"}, {"target_line_num": 158, "target_line_code": "@Test"}, {"target_line_num": 159, "target_line_code": "public void ignoreInvalidEscapeSequence() throws Exception {"}, {"target_line_num": 160, "target_line_code": "this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, \"/%foo%/bar.txt\");"}, {"target_line_num": 166, "target_line_code": "@Test"}, {"target_line_num": 167, "target_line_code": "public void processPath() throws Exception {"}, {"target_line_num": 168, "target_line_code": "assertSame(\"/foo/bar\", this.handler.processPath(\"/foo/bar\"));"}, {"target_line_num": 169, "target_line_code": "assertSame(\"foo/bar\", this.handler.processPath(\"foo/bar\"));"}, {"target_line_num": 172, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath(\"  /foo/bar\"));"}, {"target_line_num": 173, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath((char) 1 + \"/foo/bar\"));"}, {"target_line_num": 174, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath((char) 31 + \"/foo/bar\"));"}, {"target_line_num": 175, "target_line_code": "assertEquals(\"foo/bar\", this.handler.processPath(\"  foo/bar\"));"}, {"target_line_num": 176, "target_line_code": "assertEquals(\"foo/bar\", this.handler.processPath((char) 31 + \"foo/bar\"));"}, {"target_line_num": 179, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath((char) 127 + \"/foo/bar\"));"}, {"target_line_num": 180, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath((char) 127 + \"/foo/bar\"));"}, {"target_line_num": 183, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath(\"  /  foo/bar\"));"}, {"target_line_num": 184, "target_line_code": "assertEquals(\"/foo/bar\", this.handler.processPath(\"  /  /  foo/bar\"));"}, {"target_line_num": 189, "target_line_code": "assertEquals(\"\", this.handler.processPath(\"   \"));"}, {"target_line_num": 190, "target_line_code": "assertEquals(\"/\", this.handler.processPath(\"/\"));"}, {"target_line_num": 192, "target_line_code": "assertEquals(\"/\", this.handler.processPath(\"/ /   / \"));"}, {"target_line_num": 195, "target_line_code": "@Test"}, {"target_line_num": 196, "target_line_code": "public void initAllowedLocations() throws Exception {"}, {"target_line_num": 197, "target_line_code": "PathResourceResolver resolver = (PathResourceResolver) this.handler.getResourceResolvers().get(0);"}, {"target_line_num": 198, "target_line_code": "Resource[] locations = resolver.getAllowedLocations();"}, {"target_line_num": 200, "target_line_code": "assertEquals(2, locations.length);"}, {"target_line_num": 201, "target_line_code": "assertEquals(\"test/\", ((ClassPathResource) locations[0]).getPath());"}, {"target_line_num": 202, "target_line_code": "assertEquals(\"testalternatepath/\", ((ClassPathResource) locations[1]).getPath());"}, {"target_line_num": 205, "target_line_code": "@Test"}, {"target_line_num": 206, "target_line_code": "public void initAllowedLocationsWithExplicitConfiguration() throws Exception {"}, {"target_line_num": 207, "target_line_code": "ClassPathResource location1 = new ClassPathResource(\"test/\", getClass());"}, {"target_line_num": 208, "target_line_code": "ClassPathResource location2 = new ClassPathResource(\"testalternatepath/\", getClass());"}, {"target_line_num": 210, "target_line_code": "PathResourceResolver pathResolver = new PathResourceResolver();"}, {"target_line_num": 211, "target_line_code": "pathResolver.setAllowedLocations(location1);"}, {"target_line_num": 213, "target_line_code": "ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler();"}, {"target_line_num": 214, "target_line_code": "handler.setResourceResolvers(Arrays.asList(pathResolver));"}, {"target_line_num": 215, "target_line_code": "handler.setLocations(Arrays.asList(location1, location2));"}, {"target_line_num": 216, "target_line_code": "handler.afterPropertiesSet();"}, {"target_line_num": 218, "target_line_code": "Resource[] locations = pathResolver.getAllowedLocations();"}, {"target_line_num": 219, "target_line_code": "assertEquals(1, locations.length);"}, {"target_line_num": 220, "target_line_code": "assertEquals(\"test/\", ((ClassPathResource) locations[0]).getPath());"}], "removed_line": [{"source_line_num": 129, "source_line_code": "public void getResourceViaDirectoryTraversal() throws Exception {"}, {"source_line_num": 131, "source_line_code": "this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, \"../testsecret/secret.txt\");"}, {"source_line_num": 132, "source_line_code": "this.handler.handleRequest(this.request, this.response);"}, {"source_line_num": 133, "source_line_code": "assertEquals(404, this.response.getStatus());"}, {"source_line_num": 135, "source_line_code": "this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, \"test/../../testsecret/secret.txt\");"}, {"source_line_num": 140, "source_line_code": "this.handler.setLocations(Arrays.<Resource>asList(new ClassPathResource(\"testsecret/\", getClass())));"}, {"source_line_num": 141, "source_line_code": "this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, \"secret.txt\");"}, {"source_line_num": 142, "source_line_code": "this.response = new MockHttpServletResponse();"}, {"source_line_num": 143, "source_line_code": "this.handler.handleRequest(this.request, this.response);"}, {"source_line_num": 144, "source_line_code": "assertEquals(200, this.response.getStatus());"}, {"source_line_num": 145, "source_line_code": "assertEquals(\"text/plain\", this.response.getContentType());"}, {"source_line_num": 146, "source_line_code": "assertEquals(\"big secret\", this.response.getContentAsString());"}, {"source_line_num": 130, "source_line_code": "public void getResourceViaDirectoryTraversal() throws Exception {"}], "filename": "spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java", "patch_func": "no", "diff_file": "spring-framework_CVE-2014-3625_9cef8e3001ddd61c734281a7556efd84b6cc2755.diff", "patch_tag": "v4.1.2.RELEASE", "source_tag": "v4.1.1.RELEASE"}]