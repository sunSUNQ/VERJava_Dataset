[{"cve_id": "spring-framework", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "* Copyright 2002-2016 the original author or authors."}, {"target_line_num": 4, "target_line_code": "*"}, {"target_line_num": 5, "target_line_code": "* Licensed under the Apache License, Version 2.0 (the \"License\");"}, {"target_line_num": 6, "target_line_code": "* you may not use this file except in compliance with the License."}, {"target_line_num": 7, "target_line_code": "* You may obtain a copy of the License at"}, {"target_line_num": 8, "target_line_code": "*"}, {"target_line_num": 10, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "* Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 12, "target_line_code": "* distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 13, "target_line_code": "* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 14, "target_line_code": "* See the License for the specific language governing permissions and"}, {"target_line_num": 15, "target_line_code": "* limitations under the License."}, {"target_line_num": 16, "target_line_code": "*/"}, {"target_line_num": 17, "target_line_code": "package org.springframework.web.servlet.support;"}, {"target_line_num": 19, "target_line_code": "import java.io.IOException;"}, {"target_line_num": 20, "target_line_code": "import java.util.ArrayList;"}, {"target_line_num": 21, "target_line_code": "import java.util.List;"}, {"target_line_num": 22, "target_line_code": "import java.util.Map;"}, {"target_line_num": 23, "target_line_code": "import java.util.Properties;"}, {"target_line_num": 24, "target_line_code": "import javax.servlet.http.HttpServletRequest;"}, {"target_line_num": 25, "target_line_code": "import javax.servlet.http.HttpServletRequestWrapper;"}, {"target_line_num": 27, "target_line_code": "import org.springframework.beans.factory.BeanFactoryUtils;"}, {"target_line_num": 28, "target_line_code": "import org.springframework.context.ApplicationContext;"}, {"target_line_num": 29, "target_line_code": "import org.springframework.core.annotation.AnnotationAwareOrderComparator;"}, {"target_line_num": 30, "target_line_code": "import org.springframework.core.io.ClassPathResource;"}, {"target_line_num": 31, "target_line_code": "import org.springframework.core.io.Resource;"}, {"target_line_num": 32, "target_line_code": "import org.springframework.core.io.support.PropertiesLoaderUtils;"}, {"target_line_num": 33, "target_line_code": "import org.springframework.util.ClassUtils;"}, {"target_line_num": 34, "target_line_code": "import org.springframework.util.StringUtils;"}, {"target_line_num": 35, "target_line_code": "import org.springframework.web.cors.CorsConfiguration;"}, {"target_line_num": 36, "target_line_code": "import org.springframework.web.cors.CorsConfigurationSource;"}, {"target_line_num": 37, "target_line_code": "import org.springframework.web.servlet.DispatcherServlet;"}, {"target_line_num": 38, "target_line_code": "import org.springframework.web.servlet.HandlerExecutionChain;"}, {"target_line_num": 39, "target_line_code": "import org.springframework.web.servlet.HandlerInterceptor;"}, {"target_line_num": 40, "target_line_code": "import org.springframework.web.servlet.HandlerMapping;"}, {"target_line_num": 42, "target_line_code": "/**"}, {"target_line_num": 43, "target_line_code": "* Helper class to get information from the {@code HandlerMapping} that would"}, {"target_line_num": 44, "target_line_code": "* serve a specific request."}, {"target_line_num": 45, "target_line_code": "*"}, {"target_line_num": 46, "target_line_code": "* <p>Provides the following methods:"}, {"target_line_num": 47, "target_line_code": "* <ul>"}, {"target_line_num": 48, "target_line_code": "* <li>{@link #getMatchableHandlerMapping} -- obtain a {@code HandlerMapping}"}, {"target_line_num": 49, "target_line_code": "* to check request-matching criteria against."}, {"target_line_num": 50, "target_line_code": "* <li>{@link #getCorsConfiguration} -- obtain the CORS configuration for the"}, {"target_line_num": 51, "target_line_code": "* request."}, {"target_line_num": 52, "target_line_code": "* </ul>"}, {"target_line_num": 53, "target_line_code": "*"}, {"target_line_num": 54, "target_line_code": "* @author Rossen Stoyanchev"}, {"target_line_num": 55, "target_line_code": "* @since 4.3"}, {"target_line_num": 56, "target_line_code": "*/"}, {"target_line_num": 57, "target_line_code": "public class HandlerMappingIntrospector implements CorsConfigurationSource {"}, {"target_line_num": 59, "target_line_code": "private final List<HandlerMapping> handlerMappings;"}, {"target_line_num": 62, "target_line_code": "/**"}, {"target_line_num": 63, "target_line_code": "* Constructor that detects the configured {@code HandlerMapping}s in the"}, {"target_line_num": 64, "target_line_code": "* given {@code ApplicationContext} or falling back on"}, {"target_line_num": 65, "target_line_code": "* \"DispatcherServlet.properties\" like the {@code DispatcherServlet}."}, {"target_line_num": 66, "target_line_code": "*/"}, {"target_line_num": 67, "target_line_code": "public HandlerMappingIntrospector(ApplicationContext context) {"}, {"target_line_num": 68, "target_line_code": "this.handlerMappings = initHandlerMappings(context);"}, {"target_line_num": 72, "target_line_code": "private static List<HandlerMapping> initHandlerMappings(ApplicationContext context) {"}, {"target_line_num": 74, "target_line_code": "Map<String, HandlerMapping> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors("}, {"target_line_num": 75, "target_line_code": "context, HandlerMapping.class, true, false);"}, {"target_line_num": 77, "target_line_code": "if (!beans.isEmpty()) {"}, {"target_line_num": 78, "target_line_code": "List<HandlerMapping> mappings = new ArrayList<HandlerMapping>(beans.values());"}, {"target_line_num": 79, "target_line_code": "AnnotationAwareOrderComparator.sort(mappings);"}, {"target_line_num": 80, "target_line_code": "return mappings;"}, {"target_line_num": 83, "target_line_code": "return initDefaultHandlerMappings(context);"}, {"target_line_num": 86, "target_line_code": "private static List<HandlerMapping> initDefaultHandlerMappings(ApplicationContext context) {"}, {"target_line_num": 87, "target_line_code": "Properties props;"}, {"target_line_num": 88, "target_line_code": "String path = \"DispatcherServlet.properties\";"}, {"target_line_num": 89, "target_line_code": "try {"}, {"target_line_num": 90, "target_line_code": "Resource resource = new ClassPathResource(path, DispatcherServlet.class);"}, {"target_line_num": 91, "target_line_code": "props = PropertiesLoaderUtils.loadProperties(resource);"}, {"target_line_num": 93, "target_line_code": "catch (IOException ex) {"}, {"target_line_num": 94, "target_line_code": "throw new IllegalStateException(\"Could not load '\" + path + \"': \" + ex.getMessage());"}, {"target_line_num": 97, "target_line_code": "String value = props.getProperty(HandlerMapping.class.getName());"}, {"target_line_num": 98, "target_line_code": "String[] names = StringUtils.commaDelimitedListToStringArray(value);"}, {"target_line_num": 99, "target_line_code": "List<HandlerMapping> result = new ArrayList<HandlerMapping>(names.length);"}, {"target_line_num": 100, "target_line_code": "for (String name : names) {"}, {"target_line_num": 101, "target_line_code": "try {"}, {"target_line_num": 102, "target_line_code": "Class<?> clazz = ClassUtils.forName(name, DispatcherServlet.class.getClassLoader());"}, {"target_line_num": 103, "target_line_code": "Object mapping = context.getAutowireCapableBeanFactory().createBean(clazz);"}, {"target_line_num": 104, "target_line_code": "result.add((HandlerMapping) mapping);"}, {"target_line_num": 106, "target_line_code": "catch (ClassNotFoundException ex) {"}, {"target_line_num": 107, "target_line_code": "throw new IllegalStateException(\"Could not find default HandlerMapping [\" + name + \"]\");"}, {"target_line_num": 110, "target_line_code": "return result;"}, {"target_line_num": 114, "target_line_code": "/**"}, {"target_line_num": 115, "target_line_code": "* Return the configured HandlerMapping's."}, {"target_line_num": 116, "target_line_code": "*/"}, {"target_line_num": 117, "target_line_code": "public List<HandlerMapping> getHandlerMappings() {"}, {"target_line_num": 118, "target_line_code": "return this.handlerMappings;"}, {"target_line_num": 122, "target_line_code": "/**"}, {"target_line_num": 123, "target_line_code": "* Find the {@link HandlerMapping} that would handle the given request and"}, {"target_line_num": 124, "target_line_code": "* return it as a {@link MatchableHandlerMapping} that can be used to"}, {"target_line_num": 125, "target_line_code": "* test request-matching criteria. If the matching HandlerMapping is not an"}, {"target_line_num": 126, "target_line_code": "* instance of {@link MatchableHandlerMapping}, an IllegalStateException is"}, {"target_line_num": 127, "target_line_code": "* raised."}, {"target_line_num": 128, "target_line_code": "*"}, {"target_line_num": 129, "target_line_code": "* @param request the current request"}, {"target_line_num": 130, "target_line_code": "* @return the resolved matcher, or {@code null}"}, {"target_line_num": 131, "target_line_code": "* @throws Exception if any of the HandlerMapping's raise an exception"}, {"target_line_num": 132, "target_line_code": "*/"}, {"target_line_num": 133, "target_line_code": "public MatchableHandlerMapping getMatchableHandlerMapping(HttpServletRequest request) throws Exception {"}, {"target_line_num": 134, "target_line_code": "HttpServletRequest wrapper = new RequestAttributeChangeIgnoringWrapper(request);"}, {"target_line_num": 135, "target_line_code": "for (HandlerMapping handlerMapping : this.handlerMappings) {"}, {"target_line_num": 136, "target_line_code": "Object handler = handlerMapping.getHandler(wrapper);"}, {"target_line_num": 137, "target_line_code": "if (handler == null) {"}, {"target_line_num": 138, "target_line_code": "continue;"}, {"target_line_num": 140, "target_line_code": "if (handlerMapping instanceof MatchableHandlerMapping) {"}, {"target_line_num": 141, "target_line_code": "return ((MatchableHandlerMapping) handlerMapping);"}, {"target_line_num": 143, "target_line_code": "throw new IllegalStateException(\"HandlerMapping is not a MatchableHandlerMapping\");"}, {"target_line_num": 145, "target_line_code": "return null;"}, {"target_line_num": 148, "target_line_code": "@Override"}, {"target_line_num": 149, "target_line_code": "public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {"}, {"target_line_num": 150, "target_line_code": "HttpServletRequest wrapper = new RequestAttributeChangeIgnoringWrapper(request);"}, {"target_line_num": 151, "target_line_code": "for (HandlerMapping handlerMapping : this.handlerMappings) {"}, {"target_line_num": 152, "target_line_code": "HandlerExecutionChain handler = null;"}, {"target_line_num": 153, "target_line_code": "try {"}, {"target_line_num": 154, "target_line_code": "handler = handlerMapping.getHandler(wrapper);"}, {"target_line_num": 156, "target_line_code": "catch (Exception ex) {"}, {"target_line_num": 159, "target_line_code": "if (handler == null) {"}, {"target_line_num": 160, "target_line_code": "continue;"}, {"target_line_num": 162, "target_line_code": "if (handler.getInterceptors() != null) {"}, {"target_line_num": 163, "target_line_code": "for (HandlerInterceptor interceptor : handler.getInterceptors()) {"}, {"target_line_num": 164, "target_line_code": "if (interceptor instanceof CorsConfigurationSource) {"}, {"target_line_num": 165, "target_line_code": "return ((CorsConfigurationSource) interceptor).getCorsConfiguration(wrapper);"}, {"target_line_num": 169, "target_line_code": "if (handler.getHandler() instanceof CorsConfigurationSource) {"}, {"target_line_num": 170, "target_line_code": "return ((CorsConfigurationSource) handler.getHandler()).getCorsConfiguration(wrapper);"}, {"target_line_num": 173, "target_line_code": "return null;"}, {"target_line_num": 177, "target_line_code": "/**"}, {"target_line_num": 178, "target_line_code": "* Request wrapper that ignores request attribute changes."}, {"target_line_num": 179, "target_line_code": "*/"}, {"target_line_num": 180, "target_line_code": "private static class RequestAttributeChangeIgnoringWrapper extends HttpServletRequestWrapper {"}, {"target_line_num": 183, "target_line_code": "private RequestAttributeChangeIgnoringWrapper(HttpServletRequest request) {"}, {"target_line_num": 184, "target_line_code": "super(request);"}, {"target_line_num": 187, "target_line_code": "@Override"}, {"target_line_num": 188, "target_line_code": "public void setAttribute(String name, Object value) {"}], "removed_line": [], "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/support/HandlerMappingIntrospector.java", "patch_func": "HandlerMappingIntrospector", "diff_file": "spring-framework_CVE-2016-5007_a30ab3.diff", "patch_tag": "v4.3.1.RELEASE", "source_tag": "v4.3.0.RELEASE"}]