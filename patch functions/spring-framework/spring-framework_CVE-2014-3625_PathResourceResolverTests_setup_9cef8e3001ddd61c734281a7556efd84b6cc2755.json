[{"cve_id": "spring-framework", "added_line": [{"target_line_num": 1, "target_line_code": "/*"}, {"target_line_num": 2, "target_line_code": "* Copyright 2002-2014 the original author or authors."}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 4, "target_line_code": "* Licensed under the Apache License, Version 2.0 (the \"License\");"}, {"target_line_num": 5, "target_line_code": "* you may not use this file except in compliance with the License."}, {"target_line_num": 6, "target_line_code": "* You may obtain a copy of the License at"}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 10, "target_line_code": "* Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 11, "target_line_code": "* distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 12, "target_line_code": "* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 13, "target_line_code": "* See the License for the specific language governing permissions and"}, {"target_line_num": 14, "target_line_code": "* limitations under the License."}, {"target_line_num": 15, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "import static org.junit.Assert.assertEquals;"}, {"target_line_num": 19, "target_line_code": "import static org.junit.Assert.assertNotNull;"}, {"target_line_num": 20, "target_line_code": "import static org.junit.Assert.assertNull;"}, {"target_line_num": 21, "target_line_code": "import static org.junit.Assert.assertTrue;"}, {"target_line_num": 23, "target_line_code": "import java.io.IOException;"}, {"target_line_num": 24, "target_line_code": "import java.util.Arrays;"}, {"target_line_num": 30, "target_line_code": "import org.springframework.core.io.UrlResource;"}, {"target_line_num": 37, "target_line_code": "* @author Rossen Stoyanchev"}, {"target_line_num": 41, "target_line_code": "private PathResourceResolver resolver;"}, {"target_line_num": 46, "target_line_code": "this.resolver = new PathResourceResolver();"}, {"target_line_num": 49, "target_line_code": "@Test"}, {"target_line_num": 50, "target_line_code": "public void resolveFromClasspath() throws IOException {"}, {"target_line_num": 51, "target_line_code": "Resource location = new ClassPathResource(\"test/\", PathResourceResolver.class);"}, {"target_line_num": 52, "target_line_code": "String requestPath = \"bar.css\";"}, {"target_line_num": 53, "target_line_code": "Resource actual = this.resolver.resolveResource(null, requestPath, Arrays.asList(location), null);"}, {"target_line_num": 54, "target_line_code": "assertEquals(location.createRelative(requestPath), actual);"}, {"target_line_num": 49, "target_line_code": "@Test"}, {"target_line_num": 58, "target_line_code": "public void resolveFromClasspathRoot() throws IOException {"}, {"target_line_num": 59, "target_line_code": "Resource location = new ClassPathResource(\"/\");"}, {"target_line_num": 60, "target_line_code": "String requestPath = \"org/springframework/web/servlet/resource/test/bar.css\";"}, {"target_line_num": 53, "target_line_code": "Resource actual = this.resolver.resolveResource(null, requestPath, Arrays.asList(location), null);"}, {"target_line_num": 62, "target_line_code": "assertNotNull(actual);"}, {"target_line_num": 49, "target_line_code": "@Test"}, {"target_line_num": 66, "target_line_code": "public void checkResource() throws IOException {"}, {"target_line_num": 67, "target_line_code": "Resource location = new ClassPathResource(\"test/\", PathResourceResolver.class);"}, {"target_line_num": 68, "target_line_code": "testCheckResource(location, \"../testsecret/secret.txt\");"}, {"target_line_num": 69, "target_line_code": "testCheckResource(location, \"test/../../testsecret/secret.txt\");"}, {"target_line_num": 71, "target_line_code": "location = new UrlResource(getClass().getResource(\"./test/\"));"}, {"target_line_num": 72, "target_line_code": "String secretPath = new UrlResource(getClass().getResource(\"testsecret/secret.txt\")).getURL().getPath();"}, {"target_line_num": 73, "target_line_code": "testCheckResource(location, \"file:\" + secretPath);"}, {"target_line_num": 74, "target_line_code": "testCheckResource(location, \"/file:\" + secretPath);"}, {"target_line_num": 75, "target_line_code": "testCheckResource(location, \"/\" + secretPath);"}, {"target_line_num": 77, "target_line_code": "testCheckResource(location, \"/%2E%2E/testsecret/secret.txt\");"}, {"target_line_num": 78, "target_line_code": "testCheckResource(location, \"/%2e%2e/testsecret/secret.txt\");"}, {"target_line_num": 79, "target_line_code": "testCheckResource(location, \" \" + secretPath);"}, {"target_line_num": 80, "target_line_code": "testCheckResource(location, \"/  \" + secretPath);"}, {"target_line_num": 81, "target_line_code": "testCheckResource(location, \"url:\" + secretPath);"}, {"target_line_num": 85, "target_line_code": "public void checkResourceWithAllowedLocations() {"}, {"target_line_num": 86, "target_line_code": "this.resolver.setAllowedLocations("}, {"target_line_num": 87, "target_line_code": "new ClassPathResource(\"test/\", PathResourceResolver.class),"}, {"target_line_num": 88, "target_line_code": "new ClassPathResource(\"testalternatepath/\", PathResourceResolver.class)"}, {"target_line_num": 89, "target_line_code": ");"}, {"target_line_num": 91, "target_line_code": "Resource location = new ClassPathResource(\"test/main.css\", PathResourceResolver.class);"}, {"target_line_num": 92, "target_line_code": "String actual = this.resolver.resolveUrlPath(\"../testalternatepath/bar.css\", Arrays.asList(location), null);"}, {"target_line_num": 93, "target_line_code": "assertEquals(\"../testalternatepath/bar.css\", actual);"}, {"target_line_num": 96, "target_line_code": "private void testCheckResource(Resource location, String requestPath) throws IOException {"}, {"target_line_num": 97, "target_line_code": "Resource actual = this.resolver.resolveResource(null, requestPath, Arrays.asList(location), null);"}, {"target_line_num": 98, "target_line_code": "assertTrue(location.createRelative(requestPath).exists());"}, {"target_line_num": 99, "target_line_code": "assertNull(actual);"}, {"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "* Copyright 2002-2014 the original author or authors."}, {"target_line_num": 4, "target_line_code": "*"}, {"target_line_num": 5, "target_line_code": "* Licensed under the Apache License, Version 2.0 (the \"License\");"}, {"target_line_num": 6, "target_line_code": "* you may not use this file except in compliance with the License."}, {"target_line_num": 7, "target_line_code": "* You may obtain a copy of the License at"}, {"target_line_num": 8, "target_line_code": "*"}, {"target_line_num": 10, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "* Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 12, "target_line_code": "* distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 13, "target_line_code": "* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 14, "target_line_code": "* See the License for the specific language governing permissions and"}, {"target_line_num": 15, "target_line_code": "* limitations under the License."}, {"target_line_num": 16, "target_line_code": "*/"}, {"target_line_num": 19, "target_line_code": "import static org.junit.Assert.assertEquals;"}, {"target_line_num": 20, "target_line_code": "import static org.junit.Assert.assertNotNull;"}, {"target_line_num": 21, "target_line_code": "import static org.junit.Assert.assertNull;"}, {"target_line_num": 22, "target_line_code": "import static org.junit.Assert.assertTrue;"}, {"target_line_num": 24, "target_line_code": "import java.io.IOException;"}, {"target_line_num": 25, "target_line_code": "import java.util.Arrays;"}, {"target_line_num": 31, "target_line_code": "import org.springframework.core.io.UrlResource;"}, {"target_line_num": 38, "target_line_code": "* @author Rossen Stoyanchev"}, {"target_line_num": 42, "target_line_code": "private PathResourceResolver resolver;"}, {"target_line_num": 47, "target_line_code": "this.resolver = new PathResourceResolver();"}, {"target_line_num": 50, "target_line_code": "@Test"}, {"target_line_num": 51, "target_line_code": "public void resolveFromClasspath() throws IOException {"}, {"target_line_num": 52, "target_line_code": "Resource location = new ClassPathResource(\"test/\", PathResourceResolver.class);"}, {"target_line_num": 53, "target_line_code": "String requestPath = \"bar.css\";"}, {"target_line_num": 54, "target_line_code": "Resource actual = this.resolver.resolveResource(null, requestPath, Arrays.asList(location), null);"}, {"target_line_num": 55, "target_line_code": "assertEquals(location.createRelative(requestPath), actual);"}, {"target_line_num": 58, "target_line_code": "@Test"}, {"target_line_num": 59, "target_line_code": "public void resolveFromClasspathRoot() throws IOException {"}, {"target_line_num": 60, "target_line_code": "Resource location = new ClassPathResource(\"/\");"}, {"target_line_num": 61, "target_line_code": "String requestPath = \"org/springframework/web/servlet/resource/test/bar.css\";"}, {"target_line_num": 62, "target_line_code": "Resource actual = this.resolver.resolveResource(null, requestPath, Arrays.asList(location), null);"}, {"target_line_num": 63, "target_line_code": "assertNotNull(actual);"}, {"target_line_num": 66, "target_line_code": "@Test"}, {"target_line_num": 67, "target_line_code": "public void checkResource() throws IOException {"}, {"target_line_num": 68, "target_line_code": "Resource location = new ClassPathResource(\"test/\", PathResourceResolver.class);"}, {"target_line_num": 69, "target_line_code": "testCheckResource(location, \"../testsecret/secret.txt\");"}, {"target_line_num": 70, "target_line_code": "testCheckResource(location, \"test/../../testsecret/secret.txt\");"}, {"target_line_num": 72, "target_line_code": "location = new UrlResource(getClass().getResource(\"./test/\"));"}, {"target_line_num": 73, "target_line_code": "String secretPath = new UrlResource(getClass().getResource(\"testsecret/secret.txt\")).getURL().getPath();"}, {"target_line_num": 74, "target_line_code": "testCheckResource(location, \"file:\" + secretPath);"}, {"target_line_num": 75, "target_line_code": "testCheckResource(location, \"/file:\" + secretPath);"}, {"target_line_num": 76, "target_line_code": "testCheckResource(location, \"/\" + secretPath);"}, {"target_line_num": 78, "target_line_code": "testCheckResource(location, \"/%2E%2E/testsecret/secret.txt\");"}, {"target_line_num": 79, "target_line_code": "testCheckResource(location, \"/%2e%2e/testsecret/secret.txt\");"}, {"target_line_num": 80, "target_line_code": "testCheckResource(location, \" \" + secretPath);"}, {"target_line_num": 81, "target_line_code": "testCheckResource(location, \"/  \" + secretPath);"}, {"target_line_num": 82, "target_line_code": "testCheckResource(location, \"url:\" + secretPath);"}, {"target_line_num": 86, "target_line_code": "public void checkResourceWithAllowedLocations() {"}, {"target_line_num": 87, "target_line_code": "this.resolver.setAllowedLocations("}, {"target_line_num": 88, "target_line_code": "new ClassPathResource(\"test/\", PathResourceResolver.class),"}, {"target_line_num": 89, "target_line_code": "new ClassPathResource(\"testalternatepath/\", PathResourceResolver.class)"}, {"target_line_num": 90, "target_line_code": ");"}, {"target_line_num": 92, "target_line_code": "Resource location = new ClassPathResource(\"test/main.css\", PathResourceResolver.class);"}, {"target_line_num": 93, "target_line_code": "String actual = this.resolver.resolveUrlPath(\"../testalternatepath/bar.css\", Arrays.asList(location), null);"}, {"target_line_num": 94, "target_line_code": "assertEquals(\"../testalternatepath/bar.css\", actual);"}, {"target_line_num": 97, "target_line_code": "private void testCheckResource(Resource location, String requestPath) throws IOException {"}, {"target_line_num": 98, "target_line_code": "Resource actual = this.resolver.resolveResource(null, requestPath, Arrays.asList(location), null);"}, {"target_line_num": 99, "target_line_code": "assertTrue(location.createRelative(requestPath).exists());"}, {"target_line_num": 100, "target_line_code": "assertNull(actual);"}], "removed_line": [{"source_line_num": 5, "source_line_code": "import java.util.ArrayList;"}, {"source_line_num": 6, "source_line_code": "import java.util.List;"}, {"source_line_num": 13, "source_line_code": "import static org.junit.Assert.*;"}, {"source_line_num": 22, "source_line_code": "private ResourceResolverChain chain;"}, {"source_line_num": 24, "source_line_code": "private List<Resource> locations;"}, {"source_line_num": 29, "source_line_code": "List<ResourceResolver> resolvers = new ArrayList<>();"}, {"source_line_num": 30, "source_line_code": "resolvers.add(new PathResourceResolver());"}, {"source_line_num": 31, "source_line_code": "this.chain = new DefaultResourceResolverChain(resolvers);"}, {"source_line_num": 33, "source_line_code": "this.locations = new ArrayList<>();"}, {"source_line_num": 34, "source_line_code": "this.locations.add(new ClassPathResource(\"test/\", getClass()));"}, {"source_line_num": 38, "source_line_code": "public void resolveResourceInternal() {"}, {"source_line_num": 39, "source_line_code": "String file = \"bar.css\";"}, {"source_line_num": 40, "source_line_code": "Resource expected = new ClassPathResource(\"test/\" + file, getClass());"}, {"source_line_num": 41, "source_line_code": "Resource actual = this.chain.resolveResource(null, file, this.locations);"}, {"source_line_num": 43, "source_line_code": "assertEquals(expected, actual);"}, {"source_line_num": 4, "source_line_code": "import java.util.ArrayList;"}, {"source_line_num": 5, "source_line_code": "import java.util.List;"}, {"source_line_num": 23, "source_line_code": "private ResourceResolverChain chain;"}, {"source_line_num": 25, "source_line_code": "private List<Resource> locations;"}, {"source_line_num": 30, "source_line_code": "List<ResourceResolver> resolvers = new ArrayList<>();"}, {"source_line_num": 31, "source_line_code": "resolvers.add(new PathResourceResolver());"}, {"source_line_num": 32, "source_line_code": "this.chain = new DefaultResourceResolverChain(resolvers);"}, {"source_line_num": 34, "source_line_code": "this.locations = new ArrayList<>();"}, {"source_line_num": 35, "source_line_code": "this.locations.add(new ClassPathResource(\"test/\", getClass()));"}, {"source_line_num": 39, "source_line_code": "public void resolveResourceInternal() {"}, {"source_line_num": 40, "source_line_code": "String file = \"bar.css\";"}, {"source_line_num": 41, "source_line_code": "Resource expected = new ClassPathResource(\"test/\" + file, getClass());"}, {"source_line_num": 42, "source_line_code": "Resource actual = this.chain.resolveResource(null, file, this.locations);"}, {"source_line_num": 44, "source_line_code": "assertEquals(expected, actual);"}], "filename": "spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java", "patch_func": "setup", "diff_file": "spring-framework_CVE-2014-3625_9cef8e3001ddd61c734281a7556efd84b6cc2755.diff", "patch_tag": "v4.1.2.RELEASE", "source_tag": "v4.1.1.RELEASE"}]