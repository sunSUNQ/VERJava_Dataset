[{"cve_id": "jenkins", 
	"added_line": [
		{"target_line_num": 2, "target_line_code": "/*"}, 
		{"target_line_num": 3, "target_line_code": "* The MIT License"}, 
		{"target_line_num": 4, "target_line_code": "*"}, 
		{"target_line_num": 5, "target_line_code": "* Copyright (c) 2019 CloudBees, Inc."}, 
		{"target_line_num": 6, "target_line_code": "*"}, 
		{"target_line_num": 7, "target_line_code": "* Permission is hereby granted, free of charge, to any person obtaining a copy"}, 
		{"target_line_num": 8, "target_line_code": "* of this software and associated documentation files (the \"Software\"), to deal"}, 
		{"target_line_num": 9, "target_line_code": "* in the Software without restriction, including without limitation the rights"}, {"target_line_num": 10, "target_line_code": "* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"}, 
		{"target_line_num": 11, "target_line_code": "* copies of the Software, and to permit persons to whom the Software is"}, 
		{"target_line_num": 12, "target_line_code": "* furnished to do so, subject to the following conditions:"}, {"target_line_num": 13, "target_line_code": "*"}, 
		{"target_line_num": 14, "target_line_code": "* The above copyright notice and this permission notice shall be included in"}, 
		{"target_line_num": 15, "target_line_code": "* all copies or substantial portions of the Software."}, {"target_line_num": 16, "target_line_code": "*"}, 
		{"target_line_num": 17, "target_line_code": "* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"}, 
		{"target_line_num": 18, "target_line_code": "* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"}, 
		{"target_line_num": 19, "target_line_code": "* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"}, 
		{"target_line_num": 20, "target_line_code": "* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"}, {"target_line_num": 21, "target_line_code": "* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"}, {"target_line_num": 22, "target_line_code": "* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN"}, 
		{"target_line_num": 23, "target_line_code": "* THE SOFTWARE."}, 
		{"target_line_num": 24, "target_line_code": "*/"}, 
		{"target_line_num": 26, "target_line_code": "package jenkins.security.stapler;"}, 
		{"target_line_num": 28, "target_line_code": "import com.google.common.annotations.VisibleForTesting;"}, {"target_line_num": 29, "target_line_code": "import jenkins.model.Jenkins;"}, {"target_line_num": 30, "target_line_code": "import jenkins.util.SystemProperties;"}, 
		{"target_line_num": 31, "target_line_code": "import org.apache.commons.io.IOUtils;"}, {"target_line_num": 32, "target_line_code": "import org.kohsuke.accmod.Restricted;"}, {"target_line_num": 33, "target_line_code": "import org.kohsuke.accmod.restrictions.NoExternalUse;"}, 
		{"target_line_num": 34, "target_line_code": "import org.kohsuke.stapler.CancelRequestHandlingException;"}, {"target_line_num": 35, "target_line_code": "import org.kohsuke.stapler.DispatchValidator;"}, {"target_line_num": 36, "target_line_code": "import org.kohsuke.stapler.StaplerRequest;"}, {"target_line_num": 37, "target_line_code": "import org.kohsuke.stapler.StaplerResponse;"}, 
		{"target_line_num": 38, "target_line_code": "import org.kohsuke.stapler.WebApp;"}, {"target_line_num": 40, "target_line_code": "import javax.annotation.CheckForNull;"}, {"target_line_num": 41, "target_line_code": "import javax.annotation.Nonnull;"}, {"target_line_num": 42, "target_line_code": "import javax.servlet.ServletContext;"}, {"target_line_num": 43, "target_line_code": "import java.io.IOException;"}, {"target_line_num": 44, "target_line_code": "import java.io.InputStream;"}, {"target_line_num": 45, "target_line_code": "import java.nio.charset.StandardCharsets;"}, {"target_line_num": 46, "target_line_code": "import java.nio.file.Files;"}, {"target_line_num": 47, "target_line_code": "import java.nio.file.Path;"}, {"target_line_num": 48, "target_line_code": "import java.nio.file.Paths;"}, {"target_line_num": 49, "target_line_code": "import java.util.ArrayList;"}, {"target_line_num": 50, "target_line_code": "import java.util.Arrays;"}, {"target_line_num": 51, "target_line_code": "import java.util.Collection;"}, {"target_line_num": 52, "target_line_code": "import java.util.Collections;"}, {"target_line_num": 53, "target_line_code": "import java.util.HashMap;"}, {"target_line_num": 54, "target_line_code": "import java.util.HashSet;"}, {"target_line_num": 55, "target_line_code": "import java.util.List;"}, {"target_line_num": 56, "target_line_code": "import java.util.Map;"}, {"target_line_num": 57, "target_line_code": "import java.util.Set;"}, {"target_line_num": 58, "target_line_code": "import java.util.concurrent.ConcurrentHashMap;"}, {"target_line_num": 59, "target_line_code": "import java.util.concurrent.locks.ReadWriteLock;"}, {"target_line_num": 60, "target_line_code": "import java.util.concurrent.locks.ReentrantReadWriteLock;"}, {"target_line_num": 61, "target_line_code": "import java.util.function.Function;"}, {"target_line_num": 62, "target_line_code": "import java.util.function.Supplier;"}, {"target_line_num": 63, "target_line_code": "import java.util.logging.Level;"}, {"target_line_num": 64, "target_line_code": "import java.util.logging.Logger;"}, {"target_line_num": 66, "target_line_code": "/**"}, {"target_line_num": 67, "target_line_code": "* Validates views dispatched by Stapler. This validation consists of two phases:"}, {"target_line_num": 68, "target_line_code": "* <ul>"}, {"target_line_num": 69, "target_line_code": "*     <li>Before views are loaded, the model class is checked for {@link StaplerViews}/{@link StaplerFragments} along"}, {"target_line_num": 70, "target_line_code": "*     with whitelist entries specified by the default views whitelist and the optionally defined whitelist specified"}, {"target_line_num": 71, "target_line_code": "*     by the system property {@code jenkins.security.stapler.StaplerDispatchValidator.whitelist}. Then,"}, {"target_line_num": 72, "target_line_code": "*     the model class's superclass and interfaces are recursively inspected adding views and fragments that do not"}, {"target_line_num": 73, "target_line_code": "*     conflict with the views and fragments already declared. This effectively allows model classes to override"}, {"target_line_num": 74, "target_line_code": "*     parent classes.</li>"}, {"target_line_num": 75, "target_line_code": "*     <li>Before views write any response output, this validator is checked to see if the view has declared itself"}, {"target_line_num": 76, "target_line_code": "*     dispatchable using the {@code l:view} Jelly tag. As this validation comes later, annotations will take"}, {"target_line_num": 77, "target_line_code": "*     precedence over the use or lack of a layout tag.</li>"}, {"target_line_num": 78, "target_line_code": "* </ul>"}, {"target_line_num": 79, "target_line_code": "* <p>Validation can be disabled by setting the system property"}, {"target_line_num": 80, "target_line_code": "* {@code jenkins.security.stapler.StaplerDispatchValidator.disabled=true} or setting {@link #DISABLED} to"}, {"target_line_num": 81, "target_line_code": "* {@code true} in the script console.</p>"}, {"target_line_num": 82, "target_line_code": "*"}, {"target_line_num": 83, "target_line_code": "* @since TODO"}, {"target_line_num": 84, "target_line_code": "*/"}, {"target_line_num": 85, "target_line_code": "@Restricted(NoExternalUse.class)"}, {"target_line_num": 86, "target_line_code": "public class StaplerDispatchValidator implements DispatchValidator {"}, {"target_line_num": 88, "target_line_code": "private static final Logger LOGGER = Logger.getLogger(StaplerDispatchValidator.class.getName());"}, {"target_line_num": 89, "target_line_code": "private static final String ATTRIBUTE_NAME = StaplerDispatchValidator.class.getName() + \".status\";"}, {"target_line_num": 90, "target_line_code": "private static final String ESCAPE_HATCH = StaplerDispatchValidator.class.getName() + \".disabled\";"}, {"target_line_num": 91, "target_line_code": "/**"}, {"target_line_num": 92, "target_line_code": "* Escape hatch to disable dispatch validation."}, {"target_line_num": 93, "target_line_code": "*/"}, {"target_line_num": 94, "target_line_code": "public static /* script-console editable */ boolean DISABLED = SystemProperties.getBoolean(ESCAPE_HATCH);"}, {"target_line_num": 96, "target_line_code": "private static @CheckForNull Boolean setStatus(@Nonnull StaplerRequest req, @CheckForNull Boolean status) {"}, {"target_line_num": 97, "target_line_code": "if (status == null) {"}, {"target_line_num": 98, "target_line_code": "return null;"}, {"target_line_num": 100, "target_line_code": "LOGGER.fine(() -> \"Request dispatch set status to \" + status + \" for URL \" + req.getPathInfo());"}, {"target_line_num": 101, "target_line_code": "req.setAttribute(ATTRIBUTE_NAME, status);"}, {"target_line_num": 102, "target_line_code": "return status;"}, {"target_line_num": 105, "target_line_code": "private static @CheckForNull Boolean computeStatusIfNull(@Nonnull StaplerRequest req, @Nonnull Supplier<Boolean> statusIfNull) {"}, {"target_line_num": 106, "target_line_code": "Object requestStatus = req.getAttribute(ATTRIBUTE_NAME);"}, {"target_line_num": 107, "target_line_code": "return requestStatus instanceof Boolean ? (Boolean) requestStatus : setStatus(req, statusIfNull.get());"}, {"target_line_num": 110, "target_line_code": "private final ValidatorCache cache;"}, {"target_line_num": 112, "target_line_code": "public StaplerDispatchValidator() {"}, {"target_line_num": 113, "target_line_code": "cache = new ValidatorCache();"}, {"target_line_num": 114, "target_line_code": "cache.load();"}, {"target_line_num": 117, "target_line_code": "@Override"}, {"target_line_num": 118, "target_line_code": "public @CheckForNull Boolean isDispatchAllowed(@Nonnull StaplerRequest req, @Nonnull StaplerResponse rsp) {"}, {"target_line_num": 119, "target_line_code": "if (DISABLED) {"}, {"target_line_num": 120, "target_line_code": "return true;"}, {"target_line_num": 122, "target_line_code": "Boolean status = computeStatusIfNull(req, () -> {"}, {"target_line_num": 123, "target_line_code": "if (rsp.getContentType() != null) {"}, {"target_line_num": 124, "target_line_code": "return true;"}, {"target_line_num": 126, "target_line_code": "if (rsp.getStatus() >= 300) {"}, {"target_line_num": 127, "target_line_code": "return true;"}, {"target_line_num": 129, "target_line_code": "return null;"}, {"target_line_num": 130, "target_line_code": "});"}, {"target_line_num": 131, "target_line_code": "LOGGER.finer(() -> req.getRequestURI() + \" -> \" + status);"}, {"target_line_num": 132, "target_line_code": "return status;"}, {"target_line_num": 135, "target_line_code": "@Override"}, {"target_line_num": 136, "target_line_code": "public @CheckForNull Boolean isDispatchAllowed(@Nonnull StaplerRequest req, @Nonnull StaplerResponse rsp, @Nonnull String viewName, @CheckForNull Object node) {"}, {"target_line_num": 137, "target_line_code": "if (DISABLED) {"}, {"target_line_num": 138, "target_line_code": "return true;"}, {"target_line_num": 140, "target_line_code": "Boolean status = computeStatusIfNull(req, () -> {"}, {"target_line_num": 141, "target_line_code": "if (viewName.equals(\"index\")) {"}, {"target_line_num": 142, "target_line_code": "return true;"}, {"target_line_num": 144, "target_line_code": "if (node == null) {"}, {"target_line_num": 145, "target_line_code": "return null;"}, {"target_line_num": 147, "target_line_code": "return cache.find(node.getClass()).isViewValid(viewName);"}, {"target_line_num": 148, "target_line_code": "});"}, {"target_line_num": 149, "target_line_code": "LOGGER.finer(() -> \"<\" + req.getRequestURI() + \", \" + viewName + \", \" + node + \"> -> \" + status);"}, {"target_line_num": 150, "target_line_code": "return status;"}, {"target_line_num": 153, "target_line_code": "@Override"}, {"target_line_num": 154, "target_line_code": "public void allowDispatch(@Nonnull StaplerRequest req, @Nonnull StaplerResponse rsp) {"}, {"target_line_num": 155, "target_line_code": "if (DISABLED) {"}, {"target_line_num": 156, "target_line_code": "return;"}, {"target_line_num": 158, "target_line_code": "setStatus(req, true);"}, {"target_line_num": 161, "target_line_code": "@Override"}, {"target_line_num": 162, "target_line_code": "public void requireDispatchAllowed(@Nonnull StaplerRequest req, @Nonnull StaplerResponse rsp) throws CancelRequestHandlingException {"}, {"target_line_num": 163, "target_line_code": "if (DISABLED) {"}, {"target_line_num": 164, "target_line_code": "return;"}, {"target_line_num": 166, "target_line_code": "Boolean status = isDispatchAllowed(req, rsp);"}, {"target_line_num": 167, "target_line_code": "if (status == null || !status) {"}, {"target_line_num": 168, "target_line_code": "LOGGER.fine(() -> \"Cancelling dispatch for \" + req.getRequestURI());"}, {"target_line_num": 169, "target_line_code": "throw new CancelRequestHandlingException();"}, {"target_line_num": 173, "target_line_code": "@VisibleForTesting"}, {"target_line_num": 174, "target_line_code": "static StaplerDispatchValidator getInstance(@Nonnull ServletContext context) {"}, {"target_line_num": 175, "target_line_code": "return (StaplerDispatchValidator) WebApp.get(context).getDispatchValidator();"}, {"target_line_num": 178, "target_line_code": "@VisibleForTesting"}, {"target_line_num": 179, "target_line_code": "void loadWhitelist(@Nonnull InputStream in) throws IOException {"}, {"target_line_num": 180, "target_line_code": "cache.loadWhitelist(IOUtils.readLines(in));"}, {"target_line_num": 183, "target_line_code": "private static class ValidatorCache {"}, {"target_line_num": 184, "target_line_code": "private final Map<String, Validator> validators = new HashMap<>();"}, {"target_line_num": 185, "target_line_code": "private final ReadWriteLock lock = new ReentrantReadWriteLock();"}, {"target_line_num": 189, "target_line_code": "private @Nonnull Validator computeIfAbsent(@Nonnull String className, @Nonnull Function<String, Validator> constructor) {"}, {"target_line_num": 190, "target_line_code": "lock.readLock().lock();"}, {"target_line_num": 191, "target_line_code": "try {"}, {"target_line_num": 192, "target_line_code": "if (validators.containsKey(className)) {"}, {"target_line_num": 194, "target_line_code": "return validators.get(className);"}, {"target_line_num": 196, "target_line_code": "} finally {"}, {"target_line_num": 197, "target_line_code": "lock.readLock().unlock();"}, {"target_line_num": 199, "target_line_code": "lock.writeLock().lock();"}, {"target_line_num": 200, "target_line_code": "try {"}, {"target_line_num": 201, "target_line_code": "if (validators.containsKey(className)) {"}, {"target_line_num": 203, "target_line_code": "return validators.get(className);"}, {"target_line_num": 205, "target_line_code": "Validator value = constructor.apply(className);"}, {"target_line_num": 206, "target_line_code": "validators.put(className, value);"}, {"target_line_num": 207, "target_line_code": "return value;"}, {"target_line_num": 208, "target_line_code": "} finally {"}, {"target_line_num": 209, "target_line_code": "lock.writeLock().unlock();"}, {"target_line_num": 213, "target_line_code": "private @Nonnull Validator find(@Nonnull Class<?> clazz) {"}, {"target_line_num": 214, "target_line_code": "return computeIfAbsent(clazz.getName(), name -> create(clazz));"}, {"target_line_num": 217, "target_line_code": "private @Nonnull Validator find(@Nonnull String className) {"}, {"target_line_num": 218, "target_line_code": "return computeIfAbsent(className, this::create);"}, {"target_line_num": 221, "target_line_code": "private @Nonnull Collection<Validator> findParents(@Nonnull Class<?> clazz) {"}, {"target_line_num": 222, "target_line_code": "List<Validator> parents = new ArrayList<>();"}, {"target_line_num": 223, "target_line_code": "Class<?> superclass = clazz.getSuperclass();"}, {"target_line_num": 224, "target_line_code": "if (superclass != null) {"}, {"target_line_num": 225, "target_line_code": "parents.add(find(superclass));"}, {"target_line_num": 227, "target_line_code": "for (Class<?> iface : clazz.getInterfaces()) {"}, {"target_line_num": 228, "target_line_code": "parents.add(find(iface));"}, {"target_line_num": 230, "target_line_code": "return parents;"}, {"target_line_num": 233, "target_line_code": "private @Nonnull Validator create(@Nonnull Class<?> clazz) {"}, {"target_line_num": 234, "target_line_code": "Set<String> allowed = new HashSet<>();"}, {"target_line_num": 235, "target_line_code": "StaplerViews views = clazz.getDeclaredAnnotation(StaplerViews.class);"}, {"target_line_num": 236, "target_line_code": "if (views != null) {"}, {"target_line_num": 237, "target_line_code": "allowed.addAll(Arrays.asList(views.value()));"}, {"target_line_num": 239, "target_line_code": "Set<String> denied = new HashSet<>();"}, 
		{"target_line_num": 240, "target_line_code": "StaplerFragments fragments = clazz.getDeclaredAnnotation(StaplerFragments.class);"}, {"target_line_num": 241, "target_line_code": "if (fragments != null) {"}, {"target_line_num": 242, "target_line_code": "denied.addAll(Arrays.asList(fragments.value()));"}, {"target_line_num": 244, "target_line_code": "return new Validator(() -> findParents(clazz), allowed, denied);"}, {"target_line_num": 247, "target_line_code": "private @Nonnull Validator create(@Nonnull String className) {"}, {"target_line_num": 248, "target_line_code": "ClassLoader loader = Jenkins.get().pluginManager.uberClassLoader;"}, {"target_line_num": 249, "target_line_code": "return new Validator(() -> {"}, {"target_line_num": 250, "target_line_code": "try {"}, {"target_line_num": 251, "target_line_code": "return findParents(loader.loadClass(className));"}, {"target_line_num": 252, "target_line_code": "} catch (ClassNotFoundException e) {"}, {"target_line_num": 253, "target_line_code": "LOGGER.log(Level.WARNING, e, () -> \"Could not load class \" + className + \" to validate views\");"}, {"target_line_num": 254, "target_line_code": "return Collections.emptySet();"}, {"target_line_num": 256, "target_line_code": "});"}, {"target_line_num": 259, "target_line_code": "private void load() {"}, {"target_line_num": 260, "target_line_code": "try {"}, {"target_line_num": 261, "target_line_code": "try (InputStream is = Validator.class.getResourceAsStream(\"default-views-whitelist.txt\")) {"}, {"target_line_num": 262, "target_line_code": "loadWhitelist(IOUtils.readLines(is, StandardCharsets.UTF_8));"}, {"target_line_num": 264, "target_line_code": "} catch (IOException e) {"}, {"target_line_num": 265, "target_line_code": "LOGGER.log(Level.WARNING, \"Could not load default views whitelist\", e);"}, {"target_line_num": 267, "target_line_code": "String whitelist = SystemProperties.getString(StaplerDispatchValidator.class.getName() + \".whitelist\");"}, {"target_line_num": 268, "target_line_code": "Path configFile = whitelist != null ? Paths.get(whitelist) : Jenkins.get().getRootDir().toPath().resolve(\"stapler-views-whitelist.txt\");"}, {"target_line_num": 269, "target_line_code": "if (Files.exists(configFile)) {"}, {"target_line_num": 270, "target_line_code": "try {"}, {"target_line_num": 271, "target_line_code": "loadWhitelist(Files.readAllLines(configFile));"}, {"target_line_num": 272, "target_line_code": "} catch (IOException e) {"}, {"target_line_num": 273, "target_line_code": "LOGGER.log(Level.WARNING, e, () -> \"Could not load user defined whitelist from \" + configFile);"}, {"target_line_num": 278, "target_line_code": "private void loadWhitelist(@Nonnull List<String> whitelistLines) {"}, {"target_line_num": 279, "target_line_code": "for (String line : whitelistLines) {"}, {"target_line_num": 280, "target_line_code": "if (line.matches(\"#.*|\\\\s*\")) {"}, {"target_line_num": 282, "target_line_code": "continue;"}, {"target_line_num": 284, "target_line_code": "String[] parts = line.split(\"\\\\s+\");"}, {"target_line_num": 285, "target_line_code": "if (parts.length < 2) {"}, {"target_line_num": 287, "target_line_code": "LOGGER.warning(() -> \"Cannot update validator with malformed line: \" + line);"}, {"target_line_num": 288, "target_line_code": "continue;"}, {"target_line_num": 290, "target_line_code": "Validator validator = find(parts[0]);"}, {"target_line_num": 291, "target_line_code": "for (int i = 1; i < parts.length; i++) {"}, {"target_line_num": 292, "target_line_code": "String view = parts[i];"}, {"target_line_num": 293, "target_line_code": "if (view.startsWith(\"!\")) {"}, {"target_line_num": 294, "target_line_code": "validator.denyView(view.substring(1));"}, {"target_line_num": 295, "target_line_code": "} else {"}, {"target_line_num": 296, "target_line_code": "validator.allowView(view);"}, {"target_line_num": 302, "target_line_code": "private class Validator {"}, {"target_line_num": 304, "target_line_code": "private final Supplier<Collection<Validator>> parentsSupplier;"}, {"target_line_num": 305, "target_line_code": "private volatile Collection<Validator> parents;"}, {"target_line_num": 306, "target_line_code": "private final Set<String> allowed = ConcurrentHashMap.newKeySet();"}, {"target_line_num": 307, "target_line_code": "private final Set<String> denied = ConcurrentHashMap.newKeySet();"}, {"target_line_num": 309, "target_line_code": "private Validator(@Nonnull Supplier<Collection<Validator>> parentsSupplier) {"}, {"target_line_num": 310, "target_line_code": "this.parentsSupplier = parentsSupplier;"}, {"target_line_num": 313, "target_line_code": "private Validator(@Nonnull Supplier<Collection<Validator>> parentsSupplier, @Nonnull Collection<String> allowed, @Nonnull Collection<String> denied) {"}, {"target_line_num": 314, "target_line_code": "this(parentsSupplier);"}, {"target_line_num": 315, "target_line_code": "this.allowed.addAll(allowed);"}, {"target_line_num": 316, "target_line_code": "this.denied.addAll(denied);"}, {"target_line_num": 319, "target_line_code": "private @Nonnull Collection<Validator> getParents() {"}, {"target_line_num": 320, "target_line_code": "if (parents == null) {"}, {"target_line_num": 321, "target_line_code": "synchronized (this) {"}, {"target_line_num": 322, "target_line_code": "if (parents == null) {"}, {"target_line_num": 323, "target_line_code": "parents = parentsSupplier.get();"}, {"target_line_num": 327, "target_line_code": "return parents;"}, {"target_line_num": 330, "target_line_code": "private @CheckForNull Boolean isViewValid(@Nonnull String viewName) {"}, {"target_line_num": 331, "target_line_code": "if (allowed.contains(viewName)) {"}, {"target_line_num": 332, "target_line_code": "return Boolean.TRUE;"}, {"target_line_num": 334, "target_line_code": "if (denied.contains(viewName)) {"}, {"target_line_num": 335, "target_line_code": "return Boolean.FALSE;"}, {"target_line_num": 337, "target_line_code": "for (Validator parent : getParents()) {"}, {"target_line_num": 338, "target_line_code": "Boolean result = parent.isViewValid(viewName);"}, {"target_line_num": 339, "target_line_code": "if (result != null) {"}, {"target_line_num": 340, "target_line_code": "return result;"}, {"target_line_num": 343, "target_line_code": "return null;"}, {"target_line_num": 346, "target_line_code": "private void allowView(@Nonnull String viewName) {"}, {"target_line_num": 347, "target_line_code": "allowed.add(viewName);"}, {"target_line_num": 350, "target_line_code": "private void denyView(@Nonnull String viewName) {"}, {"target_line_num": 351, "target_line_code": "denied.add(viewName);"}], "removed_line": [], "filename": "core/src/main/java/jenkins/security/stapler/StaplerDispatchValidator.java", "patch_func": "no", "diff_file": "jenkins_CVE-2019-10354_279d8109eddb7a494428baf25af9756c2e33576b.diff", 
"patch_tag": "jenkins-2.176.2", "source_tag": "jenkins-2.176.1"}]