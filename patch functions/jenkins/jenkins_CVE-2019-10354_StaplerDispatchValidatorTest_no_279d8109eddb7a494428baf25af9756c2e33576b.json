[{"cve_id": "jenkins", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "* The MIT License"}, {"target_line_num": 4, "target_line_code": "*"}, {"target_line_num": 5, "target_line_code": "* Copyright (c) 2019 CloudBees, Inc."}, {"target_line_num": 6, "target_line_code": "*"}, {"target_line_num": 7, "target_line_code": "* Permission is hereby granted, free of charge, to any person obtaining a copy"}, {"target_line_num": 8, "target_line_code": "* of this software and associated documentation files (the \"Software\"), to deal"}, {"target_line_num": 9, "target_line_code": "* in the Software without restriction, including without limitation the rights"}, {"target_line_num": 10, "target_line_code": "* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"}, {"target_line_num": 11, "target_line_code": "* copies of the Software, and to permit persons to whom the Software is"}, {"target_line_num": 12, "target_line_code": "* furnished to do so, subject to the following conditions:"}, {"target_line_num": 13, "target_line_code": "*"}, {"target_line_num": 14, "target_line_code": "* The above copyright notice and this permission notice shall be included in"}, {"target_line_num": 15, "target_line_code": "* all copies or substantial portions of the Software."}, {"target_line_num": 16, "target_line_code": "*"}, {"target_line_num": 17, "target_line_code": "* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"}, {"target_line_num": 18, "target_line_code": "* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"}, {"target_line_num": 19, "target_line_code": "* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"}, {"target_line_num": 20, "target_line_code": "* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"}, {"target_line_num": 21, "target_line_code": "* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"}, {"target_line_num": 22, "target_line_code": "* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN"}, {"target_line_num": 23, "target_line_code": "* THE SOFTWARE."}, {"target_line_num": 24, "target_line_code": "*/"}, {"target_line_num": 26, "target_line_code": "package jenkins.security.stapler;"}, {"target_line_num": 28, "target_line_code": "import com.gargoylesoftware.htmlunit.html.HtmlPage;"}, {"target_line_num": 29, "target_line_code": "import hudson.model.UnprotectedRootAction;"}, {"target_line_num": 30, "target_line_code": "import org.junit.Before;"}, {"target_line_num": 31, "target_line_code": "import org.junit.Rule;"}, {"target_line_num": 32, "target_line_code": "import org.junit.Test;"}, {"target_line_num": 33, "target_line_code": "import org.jvnet.hudson.test.For;"}, {"target_line_num": 34, "target_line_code": "import org.jvnet.hudson.test.Issue;"}, {"target_line_num": 35, "target_line_code": "import org.jvnet.hudson.test.JenkinsRule;"}, {"target_line_num": 36, "target_line_code": "import org.jvnet.hudson.test.TestExtension;"}, {"target_line_num": 38, "target_line_code": "import javax.annotation.CheckForNull;"}, {"target_line_num": 39, "target_line_code": "import java.io.InputStream;"}, {"target_line_num": 40, "target_line_code": "import java.net.HttpURLConnection;"}, {"target_line_num": 41, "target_line_code": "import java.util.Locale;"}, {"target_line_num": 43, "target_line_code": "import static org.junit.Assert.assertEquals;"}, {"target_line_num": 45, "target_line_code": "@Issue(\"SECURITY-534\")"}, {"target_line_num": 46, "target_line_code": "public class StaplerDispatchValidatorTest {"}, {"target_line_num": 48, "target_line_code": "@Rule public JenkinsRule j = new JenkinsRule();"}, {"target_line_num": 50, "target_line_code": "@Before"}, {"target_line_num": 51, "target_line_code": "public void setUp() throws Exception {"}, {"target_line_num": 52, "target_line_code": "StaplerDispatchValidator validator = StaplerDispatchValidator.getInstance(j.jenkins.servletContext);"}, {"target_line_num": 53, "target_line_code": "try (InputStream whitelist = getClass().getResourceAsStream(\"StaplerDispatchValidatorTest/whitelist.txt\")) {"}, {"target_line_num": 54, "target_line_code": "validator.loadWhitelist(whitelist);"}, {"target_line_num": 58, "target_line_code": "@Test"}, {"target_line_num": 59, "target_line_code": "@For(StaplerViews.class)"}, {"target_line_num": 60, "target_line_code": "public void canViewStaplerViews() throws Exception {"}, {"target_line_num": 61, "target_line_code": "String[] urls = {\"annotated/explicitRoot\", \"extended/explicitRoot\", \"extended/whitelistedRoot\"};"}, {"target_line_num": 62, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 63, "target_line_code": "HtmlPage root = j.createWebClient().goTo(url);"}, {"target_line_num": 64, "target_line_code": "assertEquals(\"Fragment\", root.getElementById(\"frag\").asText());"}, {"target_line_num": 65, "target_line_code": "assertEquals(\"Explicit Fragment\", root.getElementById(\"explicit-frag\").asText());"}, {"target_line_num": 69, "target_line_code": "@Test"}, {"target_line_num": 70, "target_line_code": "@For(StaplerFragments.class)"}, {"target_line_num": 71, "target_line_code": "public void cannotViewStaplerFragments() throws Exception {"}, {"target_line_num": 72, "target_line_code": "String[] urls = {\"annotated/explicitFrag\", \"extended/explicitFrag\"};"}, {"target_line_num": 73, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 74, "target_line_code": "j.createWebClient().assertFails(url, HttpURLConnection.HTTP_NOT_FOUND);"}, {"target_line_num": 78, "target_line_code": "@Test"}, {"target_line_num": 79, "target_line_code": "public void canViewRoot() throws Exception {"}, {"target_line_num": 80, "target_line_code": "String[] urls = {\"annotated/root\", \"groovy/root\", \"jelly/root\", \"whitelist/root\"};"}, {"target_line_num": 81, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 82, "target_line_code": "HtmlPage root = j.createWebClient().goTo(url);"}, {"target_line_num": 83, "target_line_code": "assertEquals(\"Fragment\", root.getElementById(\"frag\").asText());"}, {"target_line_num": 87, "target_line_code": "@Test"}, {"target_line_num": 88, "target_line_code": "public void canViewIndex() throws Exception {"}, {"target_line_num": 89, "target_line_code": "String[] urls = {\"annotated\", \"groovy\", \"jelly\"};"}, {"target_line_num": 90, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 91, "target_line_code": "HtmlPage root = j.createWebClient().goTo(url);"}, {"target_line_num": 92, "target_line_code": "assertEquals(\"Fragment\", root.getElementById(\"frag\").asText());"}, {"target_line_num": 96, "target_line_code": "@Test"}, {"target_line_num": 97, "target_line_code": "public void canViewPagesThatIncludeViews() throws Exception {"}, {"target_line_num": 98, "target_line_code": "String[] urls = {\"groovy/include\", \"jelly/include\"};"}, {"target_line_num": 99, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 100, "target_line_code": "HtmlPage root = j.createWebClient().goTo(url);"}, {"target_line_num": 101, "target_line_code": "assertEquals(\"Fragment\", root.getElementById(\"frag\").asText());"}, {"target_line_num": 105, "target_line_code": "@Test"}, {"target_line_num": 106, "target_line_code": "public void canViewPagesThatRedirectToViews() throws Exception {"}, {"target_line_num": 107, "target_line_code": "String[] urls = {\"groovy/redirect\", \"jelly/redirect\"};"}, {"target_line_num": 108, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 109, "target_line_code": "HtmlPage root = j.createWebClient().goTo(url);"}, {"target_line_num": 110, "target_line_code": "assertEquals(\"Fragment\", root.getElementById(\"frag\").asText());"}, {"target_line_num": 114, "target_line_code": "@Test"}, {"target_line_num": 115, "target_line_code": "public void canViewCompressedViews() throws Exception {"}, {"target_line_num": 116, "target_line_code": "String[] urls = {\"groovy/compress\", \"jelly/compress\"};"}, {"target_line_num": 117, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 118, "target_line_code": "HtmlPage root = j.createWebClient().goTo(url);"}, {"target_line_num": 119, "target_line_code": "assertEquals(\"Fragment\", root.getElementById(\"frag\").asText());"}, {"target_line_num": 123, "target_line_code": "@Test"}, {"target_line_num": 124, "target_line_code": "public void cannotViewFragment() throws Exception {"}, {"target_line_num": 125, "target_line_code": "String[] urls = {\"annotated/frag\", \"groovy/frag\", \"jelly/frag\", \"whitelist/frag\"};"}, {"target_line_num": 126, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 127, "target_line_code": "j.createWebClient().assertFails(url, HttpURLConnection.HTTP_NOT_FOUND);"}, {"target_line_num": 131, "target_line_code": "@Test"}, {"target_line_num": 132, "target_line_code": "public void canSetStatusCodeBeforeValidation() throws Exception {"}, {"target_line_num": 133, "target_line_code": "String[] urls = {\"groovy/error\", \"jelly/error\"};"}, {"target_line_num": 134, "target_line_code": "for (String url : urls) {"}, {"target_line_num": 135, "target_line_code": "j.createWebClient().assertFails(url, 400);"}, {"target_line_num": 139, "target_line_code": "private static class Base implements UnprotectedRootAction {"}, {"target_line_num": 140, "target_line_code": "@CheckForNull"}, {"target_line_num": 141, "target_line_code": "@Override"}, {"target_line_num": 142, "target_line_code": "public String getIconFileName() {"}, {"target_line_num": 143, "target_line_code": "return null;"}, {"target_line_num": 146, "target_line_code": "@CheckForNull"}, {"target_line_num": 147, "target_line_code": "@Override"}, {"target_line_num": 148, "target_line_code": "public String getDisplayName() {"}, {"target_line_num": 149, "target_line_code": "return getClass().getSimpleName() + \" Test Data\";"}, {"target_line_num": 152, "target_line_code": "@CheckForNull"}, {"target_line_num": 153, "target_line_code": "@Override"}, {"target_line_num": 154, "target_line_code": "public String getUrlName() {"}, {"target_line_num": 155, "target_line_code": "return getClass().getSimpleName().toLowerCase(Locale.ENGLISH);"}, {"target_line_num": 159, "target_line_code": "@TestExtension"}, {"target_line_num": 160, "target_line_code": "public static class Jelly extends Base {"}, {"target_line_num": 163, "target_line_code": "@TestExtension"}, {"target_line_num": 164, "target_line_code": "public static class Groovy extends Base {"}, {"target_line_num": 167, "target_line_code": "@TestExtension"}, {"target_line_num": 168, "target_line_code": "@StaplerViews(\"explicitRoot\")"}, {"target_line_num": 169, "target_line_code": "@StaplerFragments(\"explicitFrag\")"}, {"target_line_num": 170, "target_line_code": "public static class Annotated extends Base {"}, {"target_line_num": 173, "target_line_code": "@TestExtension"}, {"target_line_num": 174, "target_line_code": "public static class Whitelist extends Base {"}, {"target_line_num": 177, "target_line_code": "@TestExtension"}, {"target_line_num": 178, "target_line_code": "public static class Extended extends Annotated {"}], "removed_line": [], "filename": "test/src/test/java/jenkins/security/stapler/StaplerDispatchValidatorTest.java", "patch_func": "no", "diff_file": "jenkins_CVE-2019-10354_279d8109eddb7a494428baf25af9756c2e33576b.diff", "patch_tag": "jenkins-2.176.2", "source_tag": "jenkins-2.176.1"}]