[{"cve_id": "jenkins", "added_line": [{"target_line_num": 1, "target_line_code": "/*"}, {"target_line_num": 2, "target_line_code": "* The MIT License"}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 4, "target_line_code": "* Copyright (c) 2018, CloudBees, Inc"}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 6, "target_line_code": "* Permission is hereby granted, free of charge, to any person obtaining a copy"}, {"target_line_num": 7, "target_line_code": "* of this software and associated documentation files (the \"Software\"), to deal"}, {"target_line_num": 8, "target_line_code": "* in the Software without restriction, including without limitation the rights"}, {"target_line_num": 9, "target_line_code": "* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"}, {"target_line_num": 10, "target_line_code": "* copies of the Software, and to permit persons to whom the Software is"}, {"target_line_num": 11, "target_line_code": "* furnished to do so, subject to the following conditions:"}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 13, "target_line_code": "* The above copyright notice and this permission notice shall be included in"}, {"target_line_num": 14, "target_line_code": "* all copies or substantial portions of the Software."}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 16, "target_line_code": "* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"}, {"target_line_num": 17, "target_line_code": "* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"}, {"target_line_num": 18, "target_line_code": "* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"}, {"target_line_num": 19, "target_line_code": "* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"}, {"target_line_num": 20, "target_line_code": "* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"}, {"target_line_num": 21, "target_line_code": "* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN"}, {"target_line_num": 22, "target_line_code": "* THE SOFTWARE."}, {"target_line_num": 23, "target_line_code": "*/"}, {"target_line_num": 24, "target_line_code": "package hudson.model;"}, {"target_line_num": 26, "target_line_code": "import com.gargoylesoftware.htmlunit.Page;"}, {"target_line_num": 27, "target_line_code": "import com.gargoylesoftware.htmlunit.html.HtmlPage;"}, {"target_line_num": 28, "target_line_code": "import hudson.FilePath;"}, {"target_line_num": 29, "target_line_code": "import hudson.Functions;"}, {"target_line_num": 30, "target_line_code": "import org.apache.commons.io.FileUtils;"}, {"target_line_num": 31, "target_line_code": "import org.junit.Assume;"}, {"target_line_num": 32, "target_line_code": "import org.junit.Rule;"}, {"target_line_num": 33, "target_line_code": "import org.junit.Test;"}, {"target_line_num": 34, "target_line_code": "import org.junit.rules.TemporaryFolder;"}, {"target_line_num": 35, "target_line_code": "import org.jvnet.hudson.test.Issue;"}, {"target_line_num": 36, "target_line_code": "import org.jvnet.hudson.test.JenkinsRule;"}, {"target_line_num": 37, "target_line_code": "import org.kohsuke.stapler.Function;"}, {"target_line_num": 39, "target_line_code": "import java.io.File;"}, {"target_line_num": 40, "target_line_code": "import java.nio.charset.StandardCharsets;"}, {"target_line_num": 41, "target_line_code": "import java.util.Arrays;"}, {"target_line_num": 42, "target_line_code": "import java.util.Collections;"}, {"target_line_num": 44, "target_line_code": "import static org.hamcrest.CoreMatchers.allOf;"}, {"target_line_num": 45, "target_line_code": "import static org.hamcrest.CoreMatchers.containsString;"}, {"target_line_num": 46, "target_line_code": "import static org.hamcrest.CoreMatchers.equalTo;"}, {"target_line_num": 47, "target_line_code": "import static org.hamcrest.CoreMatchers.not;"}, {"target_line_num": 48, "target_line_code": "import static org.junit.Assert.assertThat;"}, {"target_line_num": 49, "target_line_code": "import static org.junit.Assert.assertTrue;"}, {"target_line_num": 51, "target_line_code": "public class FileParameterValueTest {"}, {"target_line_num": 52, "target_line_code": "@Rule"}, {"target_line_num": 53, "target_line_code": "public JenkinsRule j = new JenkinsRule();"}, {"target_line_num": 52, "target_line_code": "@Rule"}, {"target_line_num": 56, "target_line_code": "public TemporaryFolder tmp = new TemporaryFolder();"}, {"target_line_num": 58, "target_line_code": "@Test"}, {"target_line_num": 59, "target_line_code": "@Issue(\"SECURITY-1074\")"}, {"target_line_num": 60, "target_line_code": "public void fileParameter_cannotCreateFile_outsideOfBuildFolder() throws Exception {"}, {"target_line_num": 63, "target_line_code": "FilePath root = j.jenkins.getRootPath();"}, {"target_line_num": 65, "target_line_code": "FreeStyleProject p = j.createFreeStyleProject();"}, {"target_line_num": 66, "target_line_code": "p.addProperty(new ParametersDefinitionProperty(Collections.singletonList("}, {"target_line_num": 67, "target_line_code": "new FileParameterDefinition(\"../../../../../root-level.txt\", null)"}, {"target_line_num": 68, "target_line_code": ")));"}, {"target_line_num": 70, "target_line_code": "assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));"}, {"target_line_num": 72, "target_line_code": "String uploadedContent = \"test-content\";"}, {"target_line_num": 73, "target_line_code": "File uploadedFile = tmp.newFile();"}, {"target_line_num": 74, "target_line_code": "FileUtils.write(uploadedFile, uploadedContent);"}, {"target_line_num": 76, "target_line_code": "FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction("}, {"target_line_num": 77, "target_line_code": "new FileParameterValue(\"../../../../../root-level.txt\", uploadedFile, \"uploaded-file.txt\")"}, {"target_line_num": 78, "target_line_code": ")).get();"}, {"target_line_num": 80, "target_line_code": "assertThat(build.getResult(), equalTo(Result.FAILURE));"}, {"target_line_num": 81, "target_line_code": "assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));"}, {"target_line_num": 84, "target_line_code": "JenkinsRule.WebClient wc = j.createWebClient();"}, {"target_line_num": 85, "target_line_code": "wc.getOptions().setThrowExceptionOnFailingStatusCode(false);"}, {"target_line_num": 87, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 89, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Froot-level.txt/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 91, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215root-level.txt/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 93, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252froot-level.txt/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 95, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%afroot-level.txt/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 98, "target_line_code": "private void checkUrlNot200AndNotContains(JenkinsRule.WebClient wc, String url, String contentNotPresent) throws Exception {"}, {"target_line_num": 99, "target_line_code": "Page pageForEncoded = wc.goTo(url, null);"}, {"target_line_num": 100, "target_line_code": "assertThat(pageForEncoded.getWebResponse().getStatusCode(), not(equalTo(200)));"}, {"target_line_num": 101, "target_line_code": "assertThat(pageForEncoded.getWebResponse().getContentAsString(), not(containsString(contentNotPresent)));"}, {"target_line_num": 104, "target_line_code": "@Test"}, {"target_line_num": 105, "target_line_code": "@Issue(\"SECURITY-1074\")"}, {"target_line_num": 106, "target_line_code": "public void fileParameter_cannotCreateFile_outsideOfBuildFolder_backslashEdition() throws Exception {"}, {"target_line_num": 107, "target_line_code": "Assume.assumeTrue(\"Backslash are only dangerous on Windows\", Functions.isWindows());"}, {"target_line_num": 111, "target_line_code": "FilePath root = j.jenkins.getRootPath();"}, {"target_line_num": 113, "target_line_code": "FreeStyleProject p = j.createFreeStyleProject();"}, {"target_line_num": 114, "target_line_code": "p.addProperty(new ParametersDefinitionProperty(Collections.singletonList("}, {"target_line_num": 115, "target_line_code": "new FileParameterDefinition(\"..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt\", null)"}, {"target_line_num": 116, "target_line_code": ")));"}, {"target_line_num": 118, "target_line_code": "assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));"}, {"target_line_num": 120, "target_line_code": "String uploadedContent = \"test-content\";"}, {"target_line_num": 121, "target_line_code": "File uploadedFile = tmp.newFile();"}, {"target_line_num": 122, "target_line_code": "FileUtils.write(uploadedFile, uploadedContent);"}, {"target_line_num": 124, "target_line_code": "FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction("}, {"target_line_num": 125, "target_line_code": "new FileParameterValue(\"..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt\", uploadedFile, \"uploaded-file.txt\")"}, {"target_line_num": 126, "target_line_code": ")).get();"}, {"target_line_num": 128, "target_line_code": "assertThat(build.getResult(), equalTo(Result.FAILURE));"}, {"target_line_num": 129, "target_line_code": "assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));"}, {"target_line_num": 132, "target_line_code": "JenkinsRule.WebClient wc = j.createWebClient();"}, {"target_line_num": 133, "target_line_code": "wc.getOptions().setThrowExceptionOnFailingStatusCode(false);"}, {"target_line_num": 135, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 136, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 139, "target_line_code": "@Test"}, {"target_line_num": 140, "target_line_code": "@Issue(\"SECURITY-1074\")"}, {"target_line_num": 141, "target_line_code": "public void fileParameter_withSingleDot() throws Exception {"}, {"target_line_num": 144, "target_line_code": "FreeStyleProject p = j.createFreeStyleProject();"}, {"target_line_num": 145, "target_line_code": "p.addProperty(new ParametersDefinitionProperty(Collections.singletonList("}, {"target_line_num": 146, "target_line_code": "new FileParameterDefinition(\".\", null)"}, {"target_line_num": 147, "target_line_code": ")));"}, {"target_line_num": 149, "target_line_code": "String uploadedContent = \"test-content\";"}, {"target_line_num": 150, "target_line_code": "File uploadedFile = tmp.newFile();"}, {"target_line_num": 151, "target_line_code": "FileUtils.write(uploadedFile, uploadedContent);"}, {"target_line_num": 153, "target_line_code": "FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction("}, {"target_line_num": 154, "target_line_code": "new FileParameterValue(\".\", uploadedFile, \"uploaded-file.txt\")"}, {"target_line_num": 155, "target_line_code": ")).get();"}, {"target_line_num": 157, "target_line_code": "assertThat(build.getResult(), equalTo(Result.FAILURE));"}, {"target_line_num": 160, "target_line_code": "JenkinsRule.WebClient wc = j.createWebClient();"}, {"target_line_num": 161, "target_line_code": "wc.getOptions().setThrowExceptionOnFailingStatusCode(false);"}, {"target_line_num": 163, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 164, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/./uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 167, "target_line_code": "@Test"}, {"target_line_num": 168, "target_line_code": "@Issue(\"SECURITY-1074\")"}, {"target_line_num": 169, "target_line_code": "public void fileParameter_withDoubleDot() throws Exception {"}, {"target_line_num": 172, "target_line_code": "FreeStyleProject p = j.createFreeStyleProject();"}, {"target_line_num": 173, "target_line_code": "p.addProperty(new ParametersDefinitionProperty(Collections.singletonList("}, {"target_line_num": 174, "target_line_code": "new FileParameterDefinition(\"..\", null)"}, {"target_line_num": 175, "target_line_code": ")));"}, {"target_line_num": 177, "target_line_code": "String uploadedContent = \"test-content\";"}, {"target_line_num": 178, "target_line_code": "File uploadedFile = tmp.newFile();"}, {"target_line_num": 179, "target_line_code": "FileUtils.write(uploadedFile, uploadedContent);"}, {"target_line_num": 181, "target_line_code": "FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction("}, {"target_line_num": 182, "target_line_code": "new FileParameterValue(\"..\", uploadedFile, \"uploaded-file.txt\")"}, {"target_line_num": 183, "target_line_code": ")).get();"}, {"target_line_num": 185, "target_line_code": "assertThat(build.getResult(), equalTo(Result.FAILURE));"}, {"target_line_num": 188, "target_line_code": "JenkinsRule.WebClient wc = j.createWebClient();"}, {"target_line_num": 189, "target_line_code": "wc.getOptions().setThrowExceptionOnFailingStatusCode(false);"}, {"target_line_num": 191, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 192, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/../uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 195, "target_line_code": "@Test"}, {"target_line_num": 196, "target_line_code": "@Issue(\"SECURITY-1074\")"}, {"target_line_num": 197, "target_line_code": "public void fileParameter_cannotEraseFile_outsideOfBuildFolder() throws Exception {"}, {"target_line_num": 200, "target_line_code": "FilePath root = j.jenkins.getRootPath();"}, {"target_line_num": 202, "target_line_code": "FreeStyleProject p = j.createFreeStyleProject();"}, {"target_line_num": 203, "target_line_code": "p.addProperty(new ParametersDefinitionProperty(Collections.singletonList("}, {"target_line_num": 204, "target_line_code": "new FileParameterDefinition(\"../../../../../root-level.txt\", null)"}, {"target_line_num": 205, "target_line_code": ")));"}, {"target_line_num": 207, "target_line_code": "assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));"}, {"target_line_num": 208, "target_line_code": "String initialContent = \"do-not-erase-me\";"}, {"target_line_num": 209, "target_line_code": "root.child(\"root-level.txt\").write(initialContent, StandardCharsets.UTF_8.name());"}, {"target_line_num": 211, "target_line_code": "String uploadedContent = \"test-content\";"}, {"target_line_num": 212, "target_line_code": "File uploadedFile = tmp.newFile();"}, {"target_line_num": 213, "target_line_code": "FileUtils.write(uploadedFile, uploadedContent);"}, {"target_line_num": 215, "target_line_code": "FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction("}, {"target_line_num": 216, "target_line_code": "new FileParameterValue(\"../../../../../root-level.txt\", uploadedFile, \"uploaded-file.txt\")"}, {"target_line_num": 217, "target_line_code": ")).get();"}, {"target_line_num": 219, "target_line_code": "assertThat(build.getResult(), equalTo(Result.FAILURE));"}, {"target_line_num": 220, "target_line_code": "assertThat(root.child(\"root-level.txt\").readToString(), equalTo(initialContent));"}, {"target_line_num": 223, "target_line_code": "JenkinsRule.WebClient wc = j.createWebClient();"}, {"target_line_num": 224, "target_line_code": "wc.getOptions().setThrowExceptionOnFailingStatusCode(false);"}, {"target_line_num": 226, "target_line_code": "checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);"}, {"target_line_num": 229, "target_line_code": "@Test"}, {"target_line_num": 230, "target_line_code": "public void fileParameter_canStillUse_internalHierarchy() throws Exception {"}, {"target_line_num": 231, "target_line_code": "FreeStyleProject p = j.createFreeStyleProject();"}, {"target_line_num": 232, "target_line_code": "p.addProperty(new ParametersDefinitionProperty(Arrays.asList("}, {"target_line_num": 233, "target_line_code": "new FileParameterDefinition(\"direct-child1.txt\", null),"}, {"target_line_num": 234, "target_line_code": "new FileParameterDefinition(\"parent/child2.txt\", null)"}, {"target_line_num": 235, "target_line_code": ")));"}, {"target_line_num": 237, "target_line_code": "File uploadedFile1 = tmp.newFile();"}, {"target_line_num": 238, "target_line_code": "FileUtils.write(uploadedFile1, \"test1\");"}, {"target_line_num": 239, "target_line_code": "File uploadedFile2 = tmp.newFile();"}, {"target_line_num": 240, "target_line_code": "FileUtils.write(uploadedFile2, \"test2\");"}, {"target_line_num": 242, "target_line_code": "FreeStyleBuild build = j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction("}, {"target_line_num": 243, "target_line_code": "new FileParameterValue(\"direct-child1.txt\", uploadedFile1, \"uploaded-file-1.txt\"),"}, {"target_line_num": 244, "target_line_code": "new FileParameterValue(\"parent/child2.txt\", uploadedFile2, \"uploaded-file-2.txt\")"}, {"target_line_num": 245, "target_line_code": ")));"}, {"target_line_num": 248, "target_line_code": "File directChild = new File(build.getRootDir(), \"fileParameters/\" + \"direct-child1.txt\");"}, {"target_line_num": 249, "target_line_code": "assertTrue(directChild.exists());"}, {"target_line_num": 251, "target_line_code": "File parentChild = new File(build.getRootDir(), \"fileParameters/\" + \"parent/child2.txt\");"}, {"target_line_num": 252, "target_line_code": "assertTrue(parentChild.exists());"}, {"target_line_num": 255, "target_line_code": "assertTrue(build.getWorkspace().child(\"direct-child1.txt\").exists());"}, {"target_line_num": 256, "target_line_code": "assertTrue(build.getWorkspace().child(\"parent\").child(\"child2.txt\").exists());"}, {"target_line_num": 259, "target_line_code": "JenkinsRule.WebClient wc = j.createWebClient();"}, {"target_line_num": 260, "target_line_code": "HtmlPage workspacePage = wc.goTo(p.getUrl() + \"ws\");"}, {"target_line_num": 261, "target_line_code": "String workspaceContent = workspacePage.getWebResponse().getContentAsString();"}, {"target_line_num": 262, "target_line_code": "assertThat(workspaceContent, allOf("}, {"target_line_num": 263, "target_line_code": "containsString(\"direct-child1.txt\"),"}, {"target_line_num": 264, "target_line_code": "containsString(\"parent\")"}, {"target_line_num": 265, "target_line_code": "));"}, {"target_line_num": 266, "target_line_code": "HtmlPage workspaceParentPage = wc.goTo(p.getUrl() + \"ws\" + \"/parent\");"}, {"target_line_num": 267, "target_line_code": "String workspaceParentContent = workspaceParentPage.getWebResponse().getContentAsString();"}, {"target_line_num": 268, "target_line_code": "assertThat(workspaceParentContent, containsString(\"child2.txt\"));"}], "removed_line": [], "filename": "test/src/test/java/hudson/model/FileParameterValueTest.java", "patch_func": "no", "diff_file": "jenkins_CVE-2018-1000406_c3351d2e7c3edfee82b9470e9aa1168982296072.diff", "patch_tag": "jenkins-2.138.2", "source_tag": "jenkins-2.138.1"}]