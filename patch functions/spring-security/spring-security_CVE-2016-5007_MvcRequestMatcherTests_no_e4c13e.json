[{"cve_id": "spring-security", "added_line": [{"target_line_num": 1, "target_line_code": "/*"}, {"target_line_num": 2, "target_line_code": "* Copyright 2012-2016 the original author or authors."}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 4, "target_line_code": "* Licensed under the Apache License, Version 2.0 (the \"License\");"}, {"target_line_num": 5, "target_line_code": "* you may not use this file except in compliance with the License."}, {"target_line_num": 6, "target_line_code": "* You may obtain a copy of the License at"}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 3, "target_line_code": "*"}, {"target_line_num": 10, "target_line_code": "* Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 11, "target_line_code": "* distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 12, "target_line_code": "* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 13, "target_line_code": "* See the License for the specific language governing permissions and"}, {"target_line_num": 14, "target_line_code": "* limitations under the License."}, {"target_line_num": 15, "target_line_code": "*/"}, {"target_line_num": 17, "target_line_code": "package org.springframework.security.web.servlet.util.matcher;"}, {"target_line_num": 19, "target_line_code": "import java.util.Collections;"}, {"target_line_num": 21, "target_line_code": "import org.junit.Before;"}, {"target_line_num": 22, "target_line_code": "import org.junit.Test;"}, {"target_line_num": 23, "target_line_code": "import org.junit.runner.RunWith;"}, {"target_line_num": 24, "target_line_code": "import org.mockito.ArgumentCaptor;"}, {"target_line_num": 25, "target_line_code": "import org.mockito.Captor;"}, {"target_line_num": 26, "target_line_code": "import org.mockito.Mock;"}, {"target_line_num": 27, "target_line_code": "import org.mockito.runners.MockitoJUnitRunner;"}, {"target_line_num": 29, "target_line_code": "import org.springframework.http.HttpMethod;"}, {"target_line_num": 30, "target_line_code": "import org.springframework.mock.web.MockHttpServletRequest;"}, {"target_line_num": 31, "target_line_code": "import org.springframework.web.HttpRequestMethodNotSupportedException;"}, {"target_line_num": 32, "target_line_code": "import org.springframework.web.servlet.handler.HandlerMappingIntrospector;"}, {"target_line_num": 33, "target_line_code": "import org.springframework.web.servlet.handler.MatchableHandlerMapping;"}, {"target_line_num": 34, "target_line_code": "import org.springframework.web.servlet.handler.RequestMatchResult;"}, {"target_line_num": 36, "target_line_code": "import static org.assertj.core.api.Assertions.assertThat;"}, {"target_line_num": 37, "target_line_code": "import static org.mockito.Matchers.eq;"}, {"target_line_num": 38, "target_line_code": "import static org.mockito.Mockito.verifyZeroInteractions;"}, {"target_line_num": 39, "target_line_code": "import static org.mockito.Mockito.when;"}, {"target_line_num": 42, "target_line_code": "* @author Rob Winch"}, {"target_line_num": 43, "target_line_code": "*/"}, {"target_line_num": 44, "target_line_code": "@RunWith(MockitoJUnitRunner.class)"}, {"target_line_num": 45, "target_line_code": "public class MvcRequestMatcherTests {"}, {"target_line_num": 46, "target_line_code": "@Mock"}, {"target_line_num": 47, "target_line_code": "HandlerMappingIntrospector introspector;"}, {"target_line_num": 46, "target_line_code": "@Mock"}, {"target_line_num": 49, "target_line_code": "MatchableHandlerMapping mapping;"}, {"target_line_num": 46, "target_line_code": "@Mock"}, {"target_line_num": 51, "target_line_code": "RequestMatchResult result;"}, {"target_line_num": 52, "target_line_code": "@Captor"}, {"target_line_num": 53, "target_line_code": "ArgumentCaptor<String> pattern;"}, {"target_line_num": 54, "target_line_code": "MockHttpServletRequest request;"}, {"target_line_num": 56, "target_line_code": "MvcRequestMatcher matcher;"}, {"target_line_num": 58, "target_line_code": "@Before"}, {"target_line_num": 59, "target_line_code": "public void setup() throws Exception {"}, {"target_line_num": 60, "target_line_code": "this.request = new MockHttpServletRequest();"}, {"target_line_num": 61, "target_line_code": "this.request.setMethod(\"GET\");"}, {"target_line_num": 62, "target_line_code": "this.request.setServletPath(\"/path\");"}, {"target_line_num": 63, "target_line_code": "this.matcher = new MvcRequestMatcher(this.introspector, \"/path\");"}, {"target_line_num": 66, "target_line_code": "@Test"}, {"target_line_num": 67, "target_line_code": "public void extractUriTemplateVariablesSuccess() throws Exception {"}, {"target_line_num": 68, "target_line_code": "when(this.result.extractUriTemplateVariables())"}, {"target_line_num": 69, "target_line_code": ".thenReturn(Collections.singletonMap(\"p\", \"path\"));"}, {"target_line_num": 70, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 71, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 72, "target_line_code": "when(this.mapping.match(eq(this.request), this.pattern.capture()))"}, {"target_line_num": 73, "target_line_code": ".thenReturn(this.result);"}, {"target_line_num": 75, "target_line_code": "this.matcher = new MvcRequestMatcher(this.introspector, \"/{p}\");"}, {"target_line_num": 76, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 78, "target_line_code": "assertThat(this.matcher.extractUriTemplateVariables(this.request))"}, {"target_line_num": 79, "target_line_code": ".containsEntry(\"p\", \"path\");"}, {"target_line_num": 82, "target_line_code": "@Test"}, {"target_line_num": 83, "target_line_code": "public void extractUriTemplateVariablesFail() throws Exception {"}, {"target_line_num": 84, "target_line_code": "when(this.result.extractUriTemplateVariables())"}, {"target_line_num": 85, "target_line_code": ".thenReturn(Collections.<String, String>emptyMap());"}, {"target_line_num": 86, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 87, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 88, "target_line_code": "when(this.mapping.match(eq(this.request), this.pattern.capture()))"}, {"target_line_num": 89, "target_line_code": ".thenReturn(this.result);"}, {"target_line_num": 91, "target_line_code": "assertThat(this.matcher.extractUriTemplateVariables(this.request)).isEmpty();"}, {"target_line_num": 94, "target_line_code": "@Test"}, {"target_line_num": 95, "target_line_code": "public void extractUriTemplateVariablesDefaultSuccess() throws Exception {"}, {"target_line_num": 96, "target_line_code": "this.matcher = new MvcRequestMatcher(this.introspector, \"/{p}\");"}, {"target_line_num": 97, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 99, "target_line_code": "assertThat(this.matcher.extractUriTemplateVariables(this.request))"}, {"target_line_num": 100, "target_line_code": ".containsEntry(\"p\", \"path\");"}, {"target_line_num": 94, "target_line_code": "@Test"}, {"target_line_num": 104, "target_line_code": "public void extractUriTemplateVariablesDefaultFail() throws Exception {"}, {"target_line_num": 105, "target_line_code": "this.matcher = new MvcRequestMatcher(this.introspector, \"/nomatch/{p}\");"}, {"target_line_num": 97, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 108, "target_line_code": "assertThat(this.matcher.extractUriTemplateVariables(this.request)).isEmpty();"}, {"target_line_num": 94, "target_line_code": "@Test"}, {"target_line_num": 112, "target_line_code": "public void matchesPathOnlyTrue() throws Exception {"}, {"target_line_num": 113, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 114, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 115, "target_line_code": "when(this.mapping.match(eq(this.request), this.pattern.capture()))"}, {"target_line_num": 116, "target_line_code": ".thenReturn(this.result);"}, {"target_line_num": 118, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 119, "target_line_code": "assertThat(this.pattern.getValue()).isEqualTo(\"/path\");"}, {"target_line_num": 122, "target_line_code": "@Test"}, {"target_line_num": 123, "target_line_code": "public void matchesDefaultMatches() throws Exception {"}, {"target_line_num": 124, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 118, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 122, "target_line_code": "@Test"}, {"target_line_num": 130, "target_line_code": "public void matchesDefaultDoesNotMatch() throws Exception {"}, {"target_line_num": 131, "target_line_code": "this.request.setServletPath(\"/other\");"}, {"target_line_num": 124, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 134, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 122, "target_line_code": "@Test"}, {"target_line_num": 138, "target_line_code": "public void matchesPathOnlyFalse() throws Exception {"}, {"target_line_num": 139, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 140, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 134, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 122, "target_line_code": "@Test"}, {"target_line_num": 146, "target_line_code": "public void matchesMethodAndPathTrue() throws Exception {"}, {"target_line_num": 147, "target_line_code": "this.matcher.setMethod(HttpMethod.GET);"}, {"target_line_num": 139, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 140, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 150, "target_line_code": "when(this.mapping.match(eq(this.request), this.pattern.capture()))"}, {"target_line_num": 151, "target_line_code": ".thenReturn(this.result);"}, {"target_line_num": 153, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 154, "target_line_code": "assertThat(this.pattern.getValue()).isEqualTo(\"/path\");"}, {"target_line_num": 157, "target_line_code": "@Test"}, {"target_line_num": 158, "target_line_code": "public void matchesMethodAndPathFalseMethod() throws Exception {"}, {"target_line_num": 159, "target_line_code": "this.matcher.setMethod(HttpMethod.POST);"}, {"target_line_num": 161, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 163, "target_line_code": "verifyZeroInteractions(this.introspector);"}, {"target_line_num": 167, "target_line_code": "* Malicious users can specify any HTTP Method to create a stacktrace and try to"}, {"target_line_num": 168, "target_line_code": "* expose useful information about the system. We should ensure we ignore invalid HTTP"}, {"target_line_num": 169, "target_line_code": "* methods."}, {"target_line_num": 170, "target_line_code": "* @throws Exception if an error occurs"}, {"target_line_num": 171, "target_line_code": "*/"}, {"target_line_num": 172, "target_line_code": "@Test"}, {"target_line_num": 173, "target_line_code": "public void matchesInvalidMethodOnRequest() throws Exception {"}, {"target_line_num": 174, "target_line_code": "this.matcher.setMethod(HttpMethod.GET);"}, {"target_line_num": 175, "target_line_code": "this.request.setMethod(\"invalid\");"}, {"target_line_num": 177, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 179, "target_line_code": "verifyZeroInteractions(this.introspector);"}, {"target_line_num": 182, "target_line_code": "@Test"}, {"target_line_num": 183, "target_line_code": "public void matchesMethodAndPathFalsePath() throws Exception {"}, {"target_line_num": 184, "target_line_code": "this.matcher.setMethod(HttpMethod.GET);"}, {"target_line_num": 185, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 186, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 188, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 182, "target_line_code": "@Test"}, {"target_line_num": 192, "target_line_code": "public void matchesGetMatchableHandlerMappingNull() throws Exception {"}, {"target_line_num": 193, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 182, "target_line_code": "@Test"}, {"target_line_num": 197, "target_line_code": "public void matchesGetMatchableHandlerMappingThrows() throws Exception {"}, {"target_line_num": 198, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenThrow("}, {"target_line_num": 199, "target_line_code": "new HttpRequestMethodNotSupportedException(this.request.getMethod()));"}, {"target_line_num": 193, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "* Copyright 2012-2016 the original author or authors."}, {"target_line_num": 4, "target_line_code": "*"}, {"target_line_num": 5, "target_line_code": "* Licensed under the Apache License, Version 2.0 (the \"License\");"}, {"target_line_num": 6, "target_line_code": "* you may not use this file except in compliance with the License."}, {"target_line_num": 7, "target_line_code": "* You may obtain a copy of the License at"}, {"target_line_num": 8, "target_line_code": "*"}, {"target_line_num": 10, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "* Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 12, "target_line_code": "* distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 13, "target_line_code": "* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 14, "target_line_code": "* See the License for the specific language governing permissions and"}, {"target_line_num": 15, "target_line_code": "* limitations under the License."}, {"target_line_num": 16, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "package org.springframework.security.web.servlet.util.matcher;"}, {"target_line_num": 20, "target_line_code": "import java.util.Collections;"}, {"target_line_num": 22, "target_line_code": "import org.junit.Before;"}, {"target_line_num": 23, "target_line_code": "import org.junit.Test;"}, {"target_line_num": 24, "target_line_code": "import org.junit.runner.RunWith;"}, {"target_line_num": 25, "target_line_code": "import org.mockito.ArgumentCaptor;"}, {"target_line_num": 26, "target_line_code": "import org.mockito.Captor;"}, {"target_line_num": 27, "target_line_code": "import org.mockito.Mock;"}, {"target_line_num": 28, "target_line_code": "import org.mockito.runners.MockitoJUnitRunner;"}, {"target_line_num": 30, "target_line_code": "import org.springframework.http.HttpMethod;"}, {"target_line_num": 31, "target_line_code": "import org.springframework.mock.web.MockHttpServletRequest;"}, {"target_line_num": 32, "target_line_code": "import org.springframework.web.HttpRequestMethodNotSupportedException;"}, {"target_line_num": 33, "target_line_code": "import org.springframework.web.servlet.handler.HandlerMappingIntrospector;"}, {"target_line_num": 34, "target_line_code": "import org.springframework.web.servlet.handler.MatchableHandlerMapping;"}, {"target_line_num": 35, "target_line_code": "import org.springframework.web.servlet.handler.RequestMatchResult;"}, {"target_line_num": 37, "target_line_code": "import static org.assertj.core.api.Assertions.assertThat;"}, {"target_line_num": 38, "target_line_code": "import static org.mockito.Matchers.eq;"}, {"target_line_num": 39, "target_line_code": "import static org.mockito.Mockito.verifyZeroInteractions;"}, {"target_line_num": 40, "target_line_code": "import static org.mockito.Mockito.when;"}, {"target_line_num": 42, "target_line_code": "/**"}, {"target_line_num": 43, "target_line_code": "* @author Rob Winch"}, {"target_line_num": 44, "target_line_code": "*/"}, {"target_line_num": 45, "target_line_code": "@RunWith(MockitoJUnitRunner.class)"}, {"target_line_num": 46, "target_line_code": "public class MvcRequestMatcherTests {"}, {"target_line_num": 47, "target_line_code": "@Mock"}, {"target_line_num": 48, "target_line_code": "HandlerMappingIntrospector introspector;"}, {"target_line_num": 49, "target_line_code": "@Mock"}, {"target_line_num": 50, "target_line_code": "MatchableHandlerMapping mapping;"}, {"target_line_num": 51, "target_line_code": "@Mock"}, {"target_line_num": 52, "target_line_code": "RequestMatchResult result;"}, {"target_line_num": 53, "target_line_code": "@Captor"}, {"target_line_num": 54, "target_line_code": "ArgumentCaptor<String> pattern;"}, {"target_line_num": 55, "target_line_code": "MockHttpServletRequest request;"}, {"target_line_num": 57, "target_line_code": "MvcRequestMatcher matcher;"}, {"target_line_num": 59, "target_line_code": "@Before"}, {"target_line_num": 60, "target_line_code": "public void setup() throws Exception {"}, {"target_line_num": 61, "target_line_code": "this.request = new MockHttpServletRequest();"}, {"target_line_num": 62, "target_line_code": "this.request.setMethod(\"GET\");"}, {"target_line_num": 63, "target_line_code": "this.request.setServletPath(\"/path\");"}, {"target_line_num": 64, "target_line_code": "this.matcher = new MvcRequestMatcher(this.introspector, \"/path\");"}, {"target_line_num": 67, "target_line_code": "@Test"}, {"target_line_num": 68, "target_line_code": "public void extractUriTemplateVariablesSuccess() throws Exception {"}, {"target_line_num": 69, "target_line_code": "when(this.result.extractUriTemplateVariables())"}, {"target_line_num": 70, "target_line_code": ".thenReturn(Collections.singletonMap(\"p\", \"path\"));"}, {"target_line_num": 71, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 72, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 73, "target_line_code": "when(this.mapping.match(eq(this.request), this.pattern.capture()))"}, {"target_line_num": 74, "target_line_code": ".thenReturn(this.result);"}, {"target_line_num": 76, "target_line_code": "this.matcher = new MvcRequestMatcher(this.introspector, \"/{p}\");"}, {"target_line_num": 77, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 79, "target_line_code": "assertThat(this.matcher.extractUriTemplateVariables(this.request))"}, {"target_line_num": 80, "target_line_code": ".containsEntry(\"p\", \"path\");"}, {"target_line_num": 83, "target_line_code": "@Test"}, {"target_line_num": 84, "target_line_code": "public void extractUriTemplateVariablesFail() throws Exception {"}, {"target_line_num": 85, "target_line_code": "when(this.result.extractUriTemplateVariables())"}, {"target_line_num": 86, "target_line_code": ".thenReturn(Collections.<String, String>emptyMap());"}, {"target_line_num": 87, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 88, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 89, "target_line_code": "when(this.mapping.match(eq(this.request), this.pattern.capture()))"}, {"target_line_num": 90, "target_line_code": ".thenReturn(this.result);"}, {"target_line_num": 92, "target_line_code": "assertThat(this.matcher.extractUriTemplateVariables(this.request)).isEmpty();"}, {"target_line_num": 95, "target_line_code": "@Test"}, {"target_line_num": 96, "target_line_code": "public void extractUriTemplateVariablesDefaultSuccess() throws Exception {"}, {"target_line_num": 97, "target_line_code": "this.matcher = new MvcRequestMatcher(this.introspector, \"/{p}\");"}, {"target_line_num": 98, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 100, "target_line_code": "assertThat(this.matcher.extractUriTemplateVariables(this.request))"}, {"target_line_num": 101, "target_line_code": ".containsEntry(\"p\", \"path\");"}, {"target_line_num": 104, "target_line_code": "@Test"}, {"target_line_num": 105, "target_line_code": "public void extractUriTemplateVariablesDefaultFail() throws Exception {"}, {"target_line_num": 106, "target_line_code": "this.matcher = new MvcRequestMatcher(this.introspector, \"/nomatch/{p}\");"}, {"target_line_num": 107, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 109, "target_line_code": "assertThat(this.matcher.extractUriTemplateVariables(this.request)).isEmpty();"}, {"target_line_num": 112, "target_line_code": "@Test"}, {"target_line_num": 113, "target_line_code": "public void matchesPathOnlyTrue() throws Exception {"}, {"target_line_num": 114, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 115, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 116, "target_line_code": "when(this.mapping.match(eq(this.request), this.pattern.capture()))"}, {"target_line_num": 117, "target_line_code": ".thenReturn(this.result);"}, {"target_line_num": 119, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 120, "target_line_code": "assertThat(this.pattern.getValue()).isEqualTo(\"/path\");"}, {"target_line_num": 123, "target_line_code": "@Test"}, {"target_line_num": 124, "target_line_code": "public void matchesDefaultMatches() throws Exception {"}, {"target_line_num": 125, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 127, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 130, "target_line_code": "@Test"}, {"target_line_num": 131, "target_line_code": "public void matchesDefaultDoesNotMatch() throws Exception {"}, {"target_line_num": 132, "target_line_code": "this.request.setServletPath(\"/other\");"}, {"target_line_num": 133, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenReturn(null);"}, {"target_line_num": 135, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 138, "target_line_code": "@Test"}, {"target_line_num": 139, "target_line_code": "public void matchesPathOnlyFalse() throws Exception {"}, {"target_line_num": 140, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 141, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 143, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 146, "target_line_code": "@Test"}, {"target_line_num": 147, "target_line_code": "public void matchesMethodAndPathTrue() throws Exception {"}, {"target_line_num": 148, "target_line_code": "this.matcher.setMethod(HttpMethod.GET);"}, {"target_line_num": 149, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 150, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 151, "target_line_code": "when(this.mapping.match(eq(this.request), this.pattern.capture()))"}, {"target_line_num": 152, "target_line_code": ".thenReturn(this.result);"}, {"target_line_num": 154, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 155, "target_line_code": "assertThat(this.pattern.getValue()).isEqualTo(\"/path\");"}, {"target_line_num": 158, "target_line_code": "@Test"}, {"target_line_num": 159, "target_line_code": "public void matchesMethodAndPathFalseMethod() throws Exception {"}, {"target_line_num": 160, "target_line_code": "this.matcher.setMethod(HttpMethod.POST);"}, {"target_line_num": 162, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 164, "target_line_code": "verifyZeroInteractions(this.introspector);"}, {"target_line_num": 167, "target_line_code": "/**"}, {"target_line_num": 168, "target_line_code": "* Malicious users can specify any HTTP Method to create a stacktrace and try to"}, {"target_line_num": 169, "target_line_code": "* expose useful information about the system. We should ensure we ignore invalid HTTP"}, {"target_line_num": 170, "target_line_code": "* methods."}, {"target_line_num": 171, "target_line_code": "* @throws Exception if an error occurs"}, {"target_line_num": 172, "target_line_code": "*/"}, {"target_line_num": 173, "target_line_code": "@Test"}, {"target_line_num": 174, "target_line_code": "public void matchesInvalidMethodOnRequest() throws Exception {"}, {"target_line_num": 175, "target_line_code": "this.matcher.setMethod(HttpMethod.GET);"}, {"target_line_num": 176, "target_line_code": "this.request.setMethod(\"invalid\");"}, {"target_line_num": 178, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 180, "target_line_code": "verifyZeroInteractions(this.introspector);"}, {"target_line_num": 183, "target_line_code": "@Test"}, {"target_line_num": 184, "target_line_code": "public void matchesMethodAndPathFalsePath() throws Exception {"}, {"target_line_num": 185, "target_line_code": "this.matcher.setMethod(HttpMethod.GET);"}, {"target_line_num": 186, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request))"}, {"target_line_num": 187, "target_line_code": ".thenReturn(this.mapping);"}, {"target_line_num": 189, "target_line_code": "assertThat(this.matcher.matches(this.request)).isFalse();"}, {"target_line_num": 192, "target_line_code": "@Test"}, {"target_line_num": 193, "target_line_code": "public void matchesGetMatchableHandlerMappingNull() throws Exception {"}, {"target_line_num": 194, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}, {"target_line_num": 197, "target_line_code": "@Test"}, {"target_line_num": 198, "target_line_code": "public void matchesGetMatchableHandlerMappingThrows() throws Exception {"}, {"target_line_num": 199, "target_line_code": "when(this.introspector.getMatchableHandlerMapping(this.request)).thenThrow("}, {"target_line_num": 200, "target_line_code": "new HttpRequestMethodNotSupportedException(this.request.getMethod()));"}, {"target_line_num": 201, "target_line_code": "assertThat(this.matcher.matches(this.request)).isTrue();"}], "removed_line": [], "filename": "web/src/test/java/org/springframework/security/web/servlet/util/matcher/MvcRequestMatcherTests.java", "patch_func": "no", "diff_file": "spring-security_CVE-2016-5007_e4c13e.diff", "patch_tag": "4.1.1.RELEASE", "source_tag": "4.1.0.RELEASE"}]