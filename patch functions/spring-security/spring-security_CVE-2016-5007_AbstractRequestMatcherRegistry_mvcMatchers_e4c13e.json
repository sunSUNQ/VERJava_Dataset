[{"cve_id": "spring-security", "added_line": [{"target_line_num": 105, "target_line_code": "* <p>"}, {"target_line_num": 106, "target_line_code": "* Maps an {@link MvcRequestMatcher} that does not care which {@link HttpMethod} is"}, {"target_line_num": 107, "target_line_code": "* used. This matcher will use the same rules that Spring MVC uses for matching. For"}, {"target_line_num": 108, "target_line_code": "* example, often times a mapping of the path \"/path\" will match on \"/path\", \"/path/\","}, {"target_line_num": 109, "target_line_code": "* \"/path.html\", etc."}, {"target_line_num": 110, "target_line_code": "* </p>"}, {"target_line_num": 105, "target_line_code": "* <p>"}, {"target_line_num": 112, "target_line_code": "* If the current request will not be processed by Spring MVC, a reasonable default"}, {"target_line_num": 113, "target_line_code": "* using the pattern as a ant pattern will be used."}, {"target_line_num": 110, "target_line_code": "* </p>"}, {"target_line_num": 115, "target_line_code": "*"}, {"target_line_num": 116, "target_line_code": "* @param mvcPatterns the patterns to match on. The rules for matching are defined by"}, {"target_line_num": 117, "target_line_code": "* Spring MVC"}, {"target_line_num": 118, "target_line_code": "* @return the object that is chained after creating the {@link RequestMatcher}."}, {"target_line_num": 119, "target_line_code": "*/"}, {"target_line_num": 120, "target_line_code": "public C mvcMatchers(String... mvcPatterns) {"}, {"target_line_num": 121, "target_line_code": "return mvcMatchers(null, mvcPatterns);"}, {"target_line_num": 125, "target_line_code": "* <p>"}, {"target_line_num": 126, "target_line_code": "* Maps an {@link MvcRequestMatcher} that also specifies a specific {@link HttpMethod}"}, {"target_line_num": 127, "target_line_code": "* to match on. This matcher will use the same rules that Spring MVC uses for"}, {"target_line_num": 128, "target_line_code": "* matching. For example, often times a mapping of the path \"/path\" will match on"}, {"target_line_num": 129, "target_line_code": "* \"/path\", \"/path/\", \"/path.html\", etc."}, {"target_line_num": 130, "target_line_code": "* </p>"}, {"target_line_num": 125, "target_line_code": "* <p>"}, {"target_line_num": 132, "target_line_code": "* If the current request will not be processed by Spring MVC, a reasonable default"}, {"target_line_num": 133, "target_line_code": "* using the pattern as a ant pattern will be used."}, {"target_line_num": 130, "target_line_code": "* </p>"}, {"target_line_num": 135, "target_line_code": "*"}, {"target_line_num": 136, "target_line_code": "* @param method the HTTP method to match on"}, {"target_line_num": 137, "target_line_code": "* @param mvcPatterns the patterns to match on. The rules for matching are defined by"}, {"target_line_num": 138, "target_line_code": "* Spring MVC"}, {"target_line_num": 139, "target_line_code": "* @return the object that is chained after creating the {@link RequestMatcher}."}, {"target_line_num": 140, "target_line_code": "*/"}, {"target_line_num": 141, "target_line_code": "public C mvcMatchers(HttpMethod method, String... mvcPatterns) {"}, {"target_line_num": 142, "target_line_code": "HandlerMappingIntrospector introspector = new HandlerMappingIntrospector("}, {"target_line_num": 143, "target_line_code": "this.context);"}, {"target_line_num": 144, "target_line_code": "List<RequestMatcher> matchers = new ArrayList<RequestMatcher>(mvcPatterns.length);"}, {"target_line_num": 145, "target_line_code": "for (String mvcPattern : mvcPatterns) {"}, {"target_line_num": 146, "target_line_code": "MvcRequestMatcher matcher = new MvcRequestMatcher(introspector, mvcPattern);"}, {"target_line_num": 147, "target_line_code": "if (method != null) {"}, {"target_line_num": 148, "target_line_code": "matcher.setMethod(method);"}, {"target_line_num": 150, "target_line_code": "matchers.add(matcher);"}, {"target_line_num": 152, "target_line_code": "return chainRequestMatchers(matchers);"}, {"target_line_num": 105, "target_line_code": "/**"}, {"target_line_num": 106, "target_line_code": "* <p>"}, {"target_line_num": 107, "target_line_code": "* Maps an {@link MvcRequestMatcher} that does not care which {@link HttpMethod} is"}, {"target_line_num": 108, "target_line_code": "* used. This matcher will use the same rules that Spring MVC uses for matching. For"}, {"target_line_num": 109, "target_line_code": "* example, often times a mapping of the path \"/path\" will match on \"/path\", \"/path/\","}, {"target_line_num": 110, "target_line_code": "* \"/path.html\", etc."}, {"target_line_num": 111, "target_line_code": "* </p>"}, {"target_line_num": 112, "target_line_code": "* <p>"}, {"target_line_num": 113, "target_line_code": "* If the current request will not be processed by Spring MVC, a reasonable default"}, {"target_line_num": 114, "target_line_code": "* using the pattern as a ant pattern will be used."}, {"target_line_num": 115, "target_line_code": "* </p>"}, {"target_line_num": 116, "target_line_code": "*"}, {"target_line_num": 117, "target_line_code": "* @param mvcPatterns the patterns to match on. The rules for matching are defined by"}, {"target_line_num": 118, "target_line_code": "* Spring MVC"}, {"target_line_num": 119, "target_line_code": "* @return the object that is chained after creating the {@link RequestMatcher}."}, {"target_line_num": 120, "target_line_code": "*/"}, {"target_line_num": 121, "target_line_code": "public C mvcMatchers(String... mvcPatterns) {"}, {"target_line_num": 122, "target_line_code": "return mvcMatchers(null, mvcPatterns);"}, {"target_line_num": 125, "target_line_code": "/**"}, {"target_line_num": 126, "target_line_code": "* <p>"}, {"target_line_num": 127, "target_line_code": "* Maps an {@link MvcRequestMatcher} that also specifies a specific {@link HttpMethod}"}, {"target_line_num": 128, "target_line_code": "* to match on. This matcher will use the same rules that Spring MVC uses for"}, {"target_line_num": 129, "target_line_code": "* matching. For example, often times a mapping of the path \"/path\" will match on"}, {"target_line_num": 130, "target_line_code": "* \"/path\", \"/path/\", \"/path.html\", etc."}, {"target_line_num": 131, "target_line_code": "* </p>"}, {"target_line_num": 132, "target_line_code": "* <p>"}, {"target_line_num": 133, "target_line_code": "* If the current request will not be processed by Spring MVC, a reasonable default"}, {"target_line_num": 134, "target_line_code": "* using the pattern as a ant pattern will be used."}, {"target_line_num": 135, "target_line_code": "* </p>"}, {"target_line_num": 136, "target_line_code": "*"}, {"target_line_num": 137, "target_line_code": "* @param method the HTTP method to match on"}, {"target_line_num": 138, "target_line_code": "* @param mvcPatterns the patterns to match on. The rules for matching are defined by"}, {"target_line_num": 139, "target_line_code": "* Spring MVC"}, {"target_line_num": 140, "target_line_code": "* @return the object that is chained after creating the {@link RequestMatcher}."}, {"target_line_num": 141, "target_line_code": "*/"}, {"target_line_num": 142, "target_line_code": "public C mvcMatchers(HttpMethod method, String... mvcPatterns) {"}, {"target_line_num": 143, "target_line_code": "HandlerMappingIntrospector introspector = new HandlerMappingIntrospector("}, {"target_line_num": 144, "target_line_code": "this.context);"}, {"target_line_num": 145, "target_line_code": "List<RequestMatcher> matchers = new ArrayList<RequestMatcher>(mvcPatterns.length);"}, {"target_line_num": 146, "target_line_code": "for (String mvcPattern : mvcPatterns) {"}, {"target_line_num": 147, "target_line_code": "MvcRequestMatcher matcher = new MvcRequestMatcher(introspector, mvcPattern);"}, {"target_line_num": 148, "target_line_code": "if (method != null) {"}, {"target_line_num": 149, "target_line_code": "matcher.setMethod(method);"}, {"target_line_num": 151, "target_line_code": "matchers.add(matcher);"}, {"target_line_num": 153, "target_line_code": "return chainRequestMatchers(matchers);"}], "removed_line": [], "filename": "config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java", "patch_func": "mvcMatchers", "diff_file": "spring-security_CVE-2016-5007_e4c13e.diff", "patch_tag": "4.1.1.RELEASE", "source_tag": "4.1.0.RELEASE"}]