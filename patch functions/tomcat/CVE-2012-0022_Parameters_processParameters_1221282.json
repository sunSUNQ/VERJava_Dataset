[{"cve_id": "CVE-2012-0022", "added_line": [{"target_line_num": 214, "target_line_code": "private ByteChunk origName=new ByteChunk();"}, {"target_line_num": 215, "target_line_code": "private ByteChunk origValue=new ByteChunk();"}, {"target_line_num": 216, "target_line_code": "private static final String DEFAULT_ENCODING = \"ISO-8859-1\";"}, {"target_line_num": 217, "target_line_code": "private static final Charset DEFAULT_CHARSET ="}, {"target_line_num": 218, "target_line_code": "Charset.forName(DEFAULT_ENCODING);"}, {"target_line_num": 222, "target_line_code": "processParameters(bytes, start, len, getCharset(encoding));"}, {"target_line_num": 225, "target_line_code": "private void processParameters(byte bytes[], int start, int len,"}, {"target_line_num": 226, "target_line_code": "Charset charset) {"}, {"target_line_num": 228, "target_line_code": "if(log.isDebugEnabled()) {"}, {"target_line_num": 229, "target_line_code": "try {"}, {"target_line_num": 230, "target_line_code": "log.debug(sm.getString(\"parameters.bytes\","}, {"target_line_num": 231, "target_line_code": "new String(bytes, start, len, DEFAULT_CHARSET.name())));"}, {"target_line_num": 232, "target_line_code": "} catch (UnsupportedEncodingException uee) {"}, {"target_line_num": 237, "target_line_code": "int decodeFailCount = 0;"}, {"target_line_num": 239, "target_line_code": "int pos = start;"}, {"target_line_num": 240, "target_line_code": "int end = start + len;"}, {"target_line_num": 242, "target_line_code": "while(pos < end) {"}, {"target_line_num": 243, "target_line_code": "parameterCount ++;"}, {"target_line_num": 245, "target_line_code": "if (limit > -1 && parameterCount >= limit) {"}, {"target_line_num": 246, "target_line_code": "parseFailed = true;"}, {"target_line_num": 247, "target_line_code": "log.warn(sm.getString(\"parameters.maxCountFail\","}, {"target_line_num": 248, "target_line_code": "Integer.toString(limit)));"}, {"target_line_num": 249, "target_line_code": "break;"}, {"target_line_num": 251, "target_line_code": "int nameStart = pos;"}, {"target_line_num": 252, "target_line_code": "int nameEnd = -1;"}, {"target_line_num": 253, "target_line_code": "int valueStart = -1;"}, {"target_line_num": 254, "target_line_code": "int valueEnd = -1;"}, {"target_line_num": 256, "target_line_code": "boolean parsingName = true;"}, {"target_line_num": 257, "target_line_code": "boolean decodeName = false;"}, {"target_line_num": 258, "target_line_code": "boolean decodeValue = false;"}, {"target_line_num": 259, "target_line_code": "boolean parameterComplete = false;"}, {"target_line_num": 261, "target_line_code": "do {"}, {"target_line_num": 262, "target_line_code": "switch(bytes[pos]) {"}, {"target_line_num": 263, "target_line_code": "case '=':"}, {"target_line_num": 264, "target_line_code": "if (parsingName) {"}, {"target_line_num": 266, "target_line_code": "nameEnd = pos;"}, {"target_line_num": 267, "target_line_code": "parsingName = false;"}, {"target_line_num": 268, "target_line_code": "valueStart = ++pos;"}, {"target_line_num": 269, "target_line_code": "} else {"}, {"target_line_num": 271, "target_line_code": "pos++;"}, {"target_line_num": 273, "target_line_code": "break;"}, {"target_line_num": 274, "target_line_code": "case '&':"}, {"target_line_num": 275, "target_line_code": "if (parsingName) {"}, {"target_line_num": 277, "target_line_code": "nameEnd = pos;"}, {"target_line_num": 278, "target_line_code": "} else {"}, {"target_line_num": 280, "target_line_code": "valueEnd  = pos;"}, {"target_line_num": 282, "target_line_code": "parameterComplete = true;"}, {"target_line_num": 283, "target_line_code": "pos++;"}, {"target_line_num": 284, "target_line_code": "break;"}, {"target_line_num": 285, "target_line_code": "case '%':"}, {"target_line_num": 286, "target_line_code": "case '+':"}, {"target_line_num": 288, "target_line_code": "if (parsingName) {"}, {"target_line_num": 289, "target_line_code": "decodeName = true;"}, {"target_line_num": 290, "target_line_code": "} else {"}, {"target_line_num": 291, "target_line_code": "decodeValue = true;"}, {"target_line_num": 293, "target_line_code": "pos ++;"}, {"target_line_num": 294, "target_line_code": "break;"}, {"target_line_num": 295, "target_line_code": "default:"}, {"target_line_num": 296, "target_line_code": "pos ++;"}, {"target_line_num": 297, "target_line_code": "break;"}, {"target_line_num": 299, "target_line_code": "} while (!parameterComplete && pos < end);"}, {"target_line_num": 301, "target_line_code": "if (pos == end) {"}, {"target_line_num": 302, "target_line_code": "if (nameEnd == -1) {"}, {"target_line_num": 303, "target_line_code": "nameEnd = pos;"}, {"target_line_num": 304, "target_line_code": "} else if (valueStart > -1 && valueEnd == -1){"}, {"target_line_num": 305, "target_line_code": "valueEnd = pos;"}, {"target_line_num": 309, "target_line_code": "if (log.isDebugEnabled() && valueStart == -1) {"}, {"target_line_num": 310, "target_line_code": "try {"}, {"target_line_num": 311, "target_line_code": "log.debug(sm.getString(\"parameters.noequal\","}, {"target_line_num": 312, "target_line_code": "Integer.toString(nameStart),"}, {"target_line_num": 313, "target_line_code": "Integer.toString(nameEnd),"}, {"target_line_num": 314, "target_line_code": "new String(bytes, nameStart, nameEnd-nameStart,"}, {"target_line_num": 315, "target_line_code": "DEFAULT_CHARSET.name())));"}, {"target_line_num": 316, "target_line_code": "} catch (UnsupportedEncodingException uee) {"}, {"target_line_num": 321, "target_line_code": "if (nameEnd <= nameStart ) {"}, {"target_line_num": 322, "target_line_code": "if (log.isInfoEnabled()) {"}, {"target_line_num": 323, "target_line_code": "if (valueEnd >= nameStart && log.isDebugEnabled()) {"}, {"target_line_num": 324, "target_line_code": "String extract = null;"}, {"target_line_num": 325, "target_line_code": "try {"}, {"target_line_num": 326, "target_line_code": "extract = new String(bytes, nameStart,"}, {"target_line_num": 327, "target_line_code": "valueEnd - nameStart,"}, {"target_line_num": 328, "target_line_code": "DEFAULT_CHARSET.name());"}, {"target_line_num": 329, "target_line_code": "} catch (UnsupportedEncodingException uee) {"}, {"target_line_num": 332, "target_line_code": "log.info(sm.getString(\"parameters.invalidChunk\","}, {"target_line_num": 333, "target_line_code": "Integer.toString(nameStart),"}, {"target_line_num": 334, "target_line_code": "Integer.toString(valueEnd),"}, {"target_line_num": 335, "target_line_code": "extract));"}, {"target_line_num": 336, "target_line_code": "} else {"}, {"target_line_num": 337, "target_line_code": "log.info(sm.getString(\"parameters.invalidChunk\","}, {"target_line_num": 338, "target_line_code": "Integer.toString(nameStart),"}, {"target_line_num": 339, "target_line_code": "Integer.toString(nameEnd),"}, {"target_line_num": 340, "target_line_code": "null));"}, {"target_line_num": 343, "target_line_code": "parseFailed = true;"}, {"target_line_num": 348, "target_line_code": "tmpName.setBytes(bytes, nameStart, nameEnd - nameStart);"}, {"target_line_num": 349, "target_line_code": "tmpValue.setBytes(bytes, valueStart, valueEnd - valueStart);"}, {"target_line_num": 354, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 355, "target_line_code": "try {"}, {"target_line_num": 356, "target_line_code": "origName.append(bytes, nameStart, nameEnd - nameStart);"}, {"target_line_num": 357, "target_line_code": "origValue.append(bytes, valueStart, valueEnd - valueStart);"}, {"target_line_num": 358, "target_line_code": "} catch (IOException ioe) {"}, {"target_line_num": 360, "target_line_code": "log.error(sm.getString(\"paramerers.copyFail\"), ioe);"}, {"target_line_num": 365, "target_line_code": "String name;"}, {"target_line_num": 366, "target_line_code": "String value;"}, {"target_line_num": 368, "target_line_code": "if (decodeName) {"}, {"target_line_num": 369, "target_line_code": "urlDecode(tmpName);"}, {"target_line_num": 371, "target_line_code": "tmpName.setCharset(charset);"}, {"target_line_num": 372, "target_line_code": "name = tmpName.toString();"}, {"target_line_num": 374, "target_line_code": "if (decodeValue) {"}, {"target_line_num": 375, "target_line_code": "urlDecode(tmpValue);"}, {"target_line_num": 377, "target_line_code": "tmpValue.setCharset(charset);"}, {"target_line_num": 378, "target_line_code": "value = tmpValue.toString();"}, {"target_line_num": 380, "target_line_code": "addParam(name, value);"}, {"target_line_num": 382, "target_line_code": "parseFailed = true;"}, {"target_line_num": 383, "target_line_code": "decodeFailCount++;"}, {"target_line_num": 384, "target_line_code": "if (decodeFailCount == 1 || log.isDebugEnabled()) {"}, {"target_line_num": 385, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 386, "target_line_code": "log.debug(sm.getString(\"parameters.decodeFail.debug\","}, {"target_line_num": 387, "target_line_code": "origName.toString(), origValue.toString()), e);"}, {"target_line_num": 388, "target_line_code": "} else if (log.isInfoEnabled()) {"}, {"target_line_num": 389, "target_line_code": "log.info(sm.getString(\"parameters.decodeFail.info\","}, {"target_line_num": 390, "target_line_code": "tmpName.toString(), tmpValue.toString()), e);"}, {"target_line_num": 398, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 399, "target_line_code": "origName.recycle();"}, {"target_line_num": 400, "target_line_code": "origValue.recycle();"}, {"target_line_num": 404, "target_line_code": "if (decodeFailCount > 1 && !log.isDebugEnabled()) {"}, {"target_line_num": 405, "target_line_code": "log.info(sm.getString(\"parameters.multipleDecodingFail\","}, {"target_line_num": 406, "target_line_code": "Integer.toString(decodeFailCount)));"}, {"target_line_num": 410, "target_line_code": "private void urlDecode(ByteChunk bc)"}, {"target_line_num": 428, "target_line_code": "if( data.getType() != MessageBytes.T_BYTES ) {"}, {"target_line_num": 429, "target_line_code": "data.toBytes();"}, {"target_line_num": 431, "target_line_code": "ByteChunk bc=data.getByteChunk();"}, {"target_line_num": 432, "target_line_code": "processParameters( bc.getBytes(), bc.getOffset(),"}, {"target_line_num": 433, "target_line_code": "bc.getLength(), getCharset(encoding));"}, {"target_line_num": 436, "target_line_code": "private Charset getCharset(String encoding) {"}, {"target_line_num": 437, "target_line_code": "if (encoding == null) {"}, {"target_line_num": 438, "target_line_code": "return DEFAULT_CHARSET;"}, {"target_line_num": 440, "target_line_code": "try {"}, {"target_line_num": 441, "target_line_code": "return B2CConverter.getCharset(encoding);"}, {"target_line_num": 442, "target_line_code": "} catch (UnsupportedEncodingException e) {"}, {"target_line_num": 443, "target_line_code": "return DEFAULT_CHARSET;"}, {"target_line_num": 447, "target_line_code": "/**"}, {"target_line_num": 450, "target_line_code": "public String paramsAsString() {"}, {"target_line_num": 451, "target_line_code": "StringBuffer sb = new StringBuffer();"}, {"target_line_num": 452, "target_line_code": "Iterator it = paramHashValues.entrySet().iterator();"}, {"target_line_num": 453, "target_line_code": "while (it.hasNext()) {"}, {"target_line_num": 454, "target_line_code": "Map.Entry e = (Map.Entry) it.next();"}, {"target_line_num": 455, "target_line_code": "sb.append(e.getKey()).append('=');"}, {"target_line_num": 456, "target_line_code": "ArrayList values = (ArrayList) e.getValue();"}, {"target_line_num": 457, "target_line_code": "for(int i = 0; i < values.size(); i++) {"}, {"target_line_num": 458, "target_line_code": "sb.append(values.get(i)).append(',');"}, {"target_line_num": 467, "target_line_code": "sb.append('\\n');"}, {"target_line_num": 469, "target_line_code": "return sb.toString();"}], "removed_line": [{"source_line_num": 342, "source_line_code": "CharChunk tmpNameC=new CharChunk(1024);"}, {"source_line_num": 343, "source_line_code": "CharChunk tmpValueC=new CharChunk(1024);"}, {"source_line_num": 346, "source_line_code": "processParameters(bytes, start, len, encoding);"}, {"source_line_num": 349, "source_line_code": "public void processParameters( byte bytes[], int start, int len,"}, {"source_line_num": 350, "source_line_code": "String enc ) {"}, {"source_line_num": 351, "source_line_code": "int end=start+len;"}, {"source_line_num": 352, "source_line_code": "int pos=start;"}, {"source_line_num": 354, "source_line_code": "if( debug>0 )"}, {"source_line_num": 355, "source_line_code": "log( \"Bytes: \" + new String( bytes, start, len ));"}, {"source_line_num": 357, "source_line_code": "do {"}, {"source_line_num": 358, "source_line_code": "boolean noEq=false;"}, {"source_line_num": 359, "source_line_code": "int valStart=-1;"}, {"source_line_num": 360, "source_line_code": "int valEnd=-1;"}, {"source_line_num": 362, "source_line_code": "int nameStart=pos;"}, {"source_line_num": 363, "source_line_code": "int nameEnd=ByteChunk.indexOf(bytes, nameStart, end, '=' );"}, {"source_line_num": 365, "source_line_code": "int nameEnd2=ByteChunk.indexOf(bytes, nameStart, end, '&' );"}, {"source_line_num": 366, "source_line_code": "if( (nameEnd2!=-1 ) &&"}, {"source_line_num": 367, "source_line_code": "( nameEnd==-1 || nameEnd > nameEnd2) ) {"}, {"source_line_num": 368, "source_line_code": "nameEnd=nameEnd2;"}, {"source_line_num": 369, "source_line_code": "noEq=true;"}, {"source_line_num": 370, "source_line_code": "valStart=nameEnd;"}, {"source_line_num": 371, "source_line_code": "valEnd=nameEnd;"}, {"source_line_num": 372, "source_line_code": "if(debug>0) log(\"no equal \" + nameStart + \" \" + nameEnd + \" \" +"}, {"source_line_num": 373, "source_line_code": "new String(bytes, nameStart, nameEnd-nameStart) );"}, {"source_line_num": 377, "source_line_code": "if( nameEnd== -1 )"}, {"source_line_num": 378, "source_line_code": "nameEnd=end;"}, {"source_line_num": 380, "source_line_code": "if( ! noEq ) {"}, {"source_line_num": 381, "source_line_code": "valStart= (nameEnd < end) ? nameEnd+1 : end;"}, {"source_line_num": 382, "source_line_code": "valEnd=ByteChunk.indexOf(bytes, valStart, end, '&');"}, {"source_line_num": 383, "source_line_code": "if( valEnd== -1 ) valEnd = (valStart < end) ? end : valStart;"}, {"source_line_num": 388, "source_line_code": "pos=valEnd+1;"}, {"source_line_num": 390, "source_line_code": "if( nameEnd<=nameStart ) {"}, {"source_line_num": 391, "source_line_code": "log.warn(\"Parameters: Invalid chunk ignored.\");"}, {"source_line_num": 395, "source_line_code": "tmpName.setBytes( bytes, nameStart, nameEnd-nameStart );"}, {"source_line_num": 396, "source_line_code": "tmpValue.setBytes( bytes, valStart, valEnd-valStart );"}, {"source_line_num": 399, "source_line_code": "addParam( urlDecode(tmpName, enc), urlDecode(tmpValue, enc) );"}, {"source_line_num": 405, "source_line_code": "log.warn(\"Parameters: Character decoding failed. \" +"}, {"source_line_num": 406, "source_line_code": "\"Parameter skipped.\", e);"}, {"source_line_num": 412, "source_line_code": "} while( pos<end );"}, {"source_line_num": 415, "source_line_code": "private String urlDecode(ByteChunk bc, String enc)"}, {"source_line_num": 421, "source_line_code": "String result = null;"}, {"source_line_num": 422, "source_line_code": "if (enc != null) {"}, {"source_line_num": 423, "source_line_code": "bc.setEncoding(enc);"}, {"source_line_num": 424, "source_line_code": "result = bc.toString();"}, {"source_line_num": 425, "source_line_code": "} else {"}, {"source_line_num": 426, "source_line_code": "CharChunk cc = tmpNameC;"}, {"source_line_num": 427, "source_line_code": "cc.allocate(bc.getLength(), -1);"}, {"source_line_num": 429, "source_line_code": "byte[] bbuf = bc.getBuffer();"}, {"source_line_num": 430, "source_line_code": "char[] cbuf = cc.getBuffer();"}, {"source_line_num": 431, "source_line_code": "int start = bc.getStart();"}, {"source_line_num": 432, "source_line_code": "for (int i = 0; i < bc.getLength(); i++) {"}, {"source_line_num": 433, "source_line_code": "cbuf[i] = (char) (bbuf[i + start] & 0xff);"}, {"source_line_num": 435, "source_line_code": "cc.setChars(cbuf, 0, bc.getLength());"}, {"source_line_num": 436, "source_line_code": "result = cc.toString();"}, {"source_line_num": 437, "source_line_code": "cc.recycle();"}, {"source_line_num": 439, "source_line_code": "return result;"}, {"source_line_num": 442, "source_line_code": "public void processParameters( char chars[], int start, int len ) {"}, {"source_line_num": 443, "source_line_code": "int end=start+len;"}, {"source_line_num": 444, "source_line_code": "int pos=start;"}, {"source_line_num": 446, "source_line_code": "if( debug>0 )"}, {"source_line_num": 447, "source_line_code": "log( \"Chars: \" + new String( chars, start, len ));"}, {"source_line_num": 448, "source_line_code": "do {"}, {"source_line_num": 449, "source_line_code": "boolean noEq=false;"}, {"source_line_num": 450, "source_line_code": "int nameStart=pos;"}, {"source_line_num": 451, "source_line_code": "int valStart=-1;"}, {"source_line_num": 452, "source_line_code": "int valEnd=-1;"}, {"source_line_num": 454, "source_line_code": "int nameEnd=CharChunk.indexOf(chars, nameStart, end, '=' );"}, {"source_line_num": 455, "source_line_code": "int nameEnd2=CharChunk.indexOf(chars, nameStart, end, '&' );"}, {"source_line_num": 456, "source_line_code": "if( (nameEnd2!=-1 ) &&"}, {"source_line_num": 457, "source_line_code": "( nameEnd==-1 || nameEnd > nameEnd2) ) {"}, {"source_line_num": 458, "source_line_code": "nameEnd=nameEnd2;"}, {"source_line_num": 459, "source_line_code": "noEq=true;"}, {"source_line_num": 460, "source_line_code": "valStart=nameEnd;"}, {"source_line_num": 461, "source_line_code": "valEnd=nameEnd;"}, {"source_line_num": 462, "source_line_code": "if(debug>0) log(\"no equal \" + nameStart + \" \" + nameEnd + \" \" +"}, {"source_line_num": 463, "source_line_code": "new String(chars, nameStart, nameEnd-nameStart) );"}, {"source_line_num": 465, "source_line_code": "if( nameEnd== -1 ) nameEnd=end;"}, {"source_line_num": 467, "source_line_code": "if( ! noEq ) {"}, {"source_line_num": 468, "source_line_code": "valStart= (nameEnd < end) ? nameEnd+1 : end;"}, {"source_line_num": 469, "source_line_code": "valEnd=CharChunk.indexOf(chars, valStart, end, '&');"}, {"source_line_num": 470, "source_line_code": "if( valEnd== -1 ) valEnd = (valStart < end) ? end : valStart;"}, {"source_line_num": 473, "source_line_code": "pos=valEnd+1;"}, {"source_line_num": 475, "source_line_code": "if( nameEnd<=nameStart ) {"}, {"source_line_num": 476, "source_line_code": "continue;"}, {"source_line_num": 481, "source_line_code": "try {"}, {"source_line_num": 482, "source_line_code": "tmpNameC.append( chars, nameStart, nameEnd-nameStart );"}, {"source_line_num": 483, "source_line_code": "tmpValueC.append( chars, valStart, valEnd-valStart );"}, {"source_line_num": 485, "source_line_code": "if( debug > 0 )"}, {"source_line_num": 486, "source_line_code": "log( tmpNameC + \"= \" + tmpValueC);"}, {"source_line_num": 488, "source_line_code": "if( urlDec==null ) {"}, {"source_line_num": 489, "source_line_code": "urlDec=new UDecoder();"}, {"source_line_num": 492, "source_line_code": "urlDec.convert( tmpNameC );"}, {"source_line_num": 493, "source_line_code": "urlDec.convert( tmpValueC );"}, {"source_line_num": 495, "source_line_code": "if( debug > 0 )"}, {"source_line_num": 496, "source_line_code": "log( tmpNameC + \"= \" + tmpValueC);"}, {"source_line_num": 498, "source_line_code": "addParam( tmpNameC.toString(), tmpValueC.toString() );"}, {"source_line_num": 499, "source_line_code": "} catch( IOException ex ) {"}, {"source_line_num": 500, "source_line_code": "ex.printStackTrace();"}, {"source_line_num": 503, "source_line_code": "tmpNameC.recycle();"}, {"source_line_num": 504, "source_line_code": "tmpValueC.recycle();"}, {"source_line_num": 506, "source_line_code": "} while( pos<end );"}, {"source_line_num": 509, "source_line_code": "public void processParameters( MessageBytes data ) {"}, {"source_line_num": 510, "source_line_code": "processParameters(data, encoding);"}, {"source_line_num": 516, "source_line_code": "if( data.getType() == MessageBytes.T_BYTES ) {"}, {"source_line_num": 517, "source_line_code": "ByteChunk bc=data.getByteChunk();"}, {"source_line_num": 518, "source_line_code": "processParameters( bc.getBytes(), bc.getOffset(),"}, {"source_line_num": 519, "source_line_code": "bc.getLength(), encoding);"}, {"source_line_num": 520, "source_line_code": "} else {"}, {"source_line_num": 521, "source_line_code": "if (data.getType()!= MessageBytes.T_CHARS )"}, {"source_line_num": 522, "source_line_code": "data.toChars();"}, {"source_line_num": 523, "source_line_code": "CharChunk cc=data.getCharChunk();"}, {"source_line_num": 524, "source_line_code": "processParameters( cc.getChars(), cc.getOffset(),"}, {"source_line_num": 525, "source_line_code": "cc.getLength());"}, {"source_line_num": 529, "source_line_code": "/** Debug purpose"}, {"source_line_num": 531, "source_line_code": "public String paramsAsString() {"}, {"source_line_num": 532, "source_line_code": "StringBuffer sb=new StringBuffer();"}, {"source_line_num": 533, "source_line_code": "Enumeration en= paramHashStringArray.keys();"}, {"source_line_num": 534, "source_line_code": "while( en.hasMoreElements() ) {"}, {"source_line_num": 535, "source_line_code": "String k=(String)en.nextElement();"}, {"source_line_num": 536, "source_line_code": "sb.append( k ).append(\"=\");"}, {"source_line_num": 537, "source_line_code": "String v[]=(String[])paramHashStringArray.get( k );"}, {"source_line_num": 538, "source_line_code": "for( int i=0; i<v.length; i++ )"}, {"source_line_num": 539, "source_line_code": "sb.append( v[i] ).append(\",\");"}, {"source_line_num": 540, "source_line_code": "sb.append(\"\\n\");"}, {"source_line_num": 542, "source_line_code": "return sb.toString();"}, {"source_line_num": 545, "source_line_code": "private static int debug=0;"}, {"source_line_num": 546, "source_line_code": "private void log(String s ) {"}, {"source_line_num": 547, "source_line_code": "if (log.isDebugEnabled())"}, {"source_line_num": 548, "source_line_code": "log.debug(\"Parameters: \" + s );"}, {"source_line_num": 553, "source_line_code": "/** Used by RequestDispatcher"}, {"source_line_num": 555, "source_line_code": "public void processParameters( String str ) {"}, {"source_line_num": 556, "source_line_code": "int end=str.length();"}, {"source_line_num": 557, "source_line_code": "int pos=0;"}, {"source_line_num": 558, "source_line_code": "if( debug > 0)"}, {"source_line_num": 559, "source_line_code": "log(\"String: \" + str );"}, {"source_line_num": 561, "source_line_code": "do {"}, {"source_line_num": 562, "source_line_code": "boolean noEq=false;"}, {"source_line_num": 563, "source_line_code": "int valStart=-1;"}, {"source_line_num": 564, "source_line_code": "int valEnd=-1;"}, {"source_line_num": 566, "source_line_code": "int nameStart=pos;"}, {"source_line_num": 567, "source_line_code": "int nameEnd=str.indexOf('=', nameStart );"}, {"source_line_num": 568, "source_line_code": "int nameEnd2=str.indexOf('&', nameStart );"}, {"source_line_num": 569, "source_line_code": "if( nameEnd2== -1 ) nameEnd2=end;"}, {"source_line_num": 570, "source_line_code": "if( (nameEnd2!=-1 ) &&"}, {"source_line_num": 571, "source_line_code": "( nameEnd==-1 || nameEnd > nameEnd2) ) {"}, {"source_line_num": 572, "source_line_code": "nameEnd=nameEnd2;"}, {"source_line_num": 573, "source_line_code": "noEq=true;"}, {"source_line_num": 574, "source_line_code": "valStart=nameEnd;"}, {"source_line_num": 575, "source_line_code": "valEnd=nameEnd;"}, {"source_line_num": 576, "source_line_code": "if(debug>0) log(\"no equal \" + nameStart + \" \" + nameEnd + \" \" +"}, {"source_line_num": 577, "source_line_code": "str.substring(nameStart, nameEnd));"}, {"source_line_num": 580, "source_line_code": "if( nameEnd== -1 ) nameEnd=end;"}, {"source_line_num": 582, "source_line_code": "if( ! noEq ) {"}, {"source_line_num": 583, "source_line_code": "valStart=nameEnd+1;"}, {"source_line_num": 584, "source_line_code": "valEnd=str.indexOf('&', valStart);"}, {"source_line_num": 585, "source_line_code": "if( valEnd== -1 ) valEnd = (valStart < end) ? end : valStart;"}, {"source_line_num": 588, "source_line_code": "pos=valEnd+1;"}, {"source_line_num": 590, "source_line_code": "if( nameEnd<=nameStart ) {"}, {"source_line_num": 591, "source_line_code": "continue;"}, {"source_line_num": 593, "source_line_code": "if( debug>0)"}, {"source_line_num": 594, "source_line_code": "log( \"XXX \" + nameStart + \" \" + nameEnd + \" \""}, {"source_line_num": 595, "source_line_code": "+ valStart + \" \" + valEnd );"}, {"source_line_num": 597, "source_line_code": "try {"}, {"source_line_num": 598, "source_line_code": "tmpNameC.append(str, nameStart, nameEnd-nameStart );"}, {"source_line_num": 599, "source_line_code": "tmpValueC.append(str, valStart, valEnd-valStart );"}, {"source_line_num": 601, "source_line_code": "if( debug > 0 )"}, {"source_line_num": 602, "source_line_code": "log( tmpNameC + \"= \" + tmpValueC);"}, {"source_line_num": 604, "source_line_code": "if( urlDec==null ) {"}, {"source_line_num": 605, "source_line_code": "urlDec=new UDecoder();"}, {"source_line_num": 608, "source_line_code": "urlDec.convert( tmpNameC );"}, {"source_line_num": 609, "source_line_code": "urlDec.convert( tmpValueC );"}, {"source_line_num": 611, "source_line_code": "if( debug > 0 )"}, {"source_line_num": 612, "source_line_code": "log( tmpNameC + \"= \" + tmpValueC);"}, {"source_line_num": 614, "source_line_code": "addParam( tmpNameC.toString(), tmpValueC.toString() );"}, {"source_line_num": 615, "source_line_code": "} catch( IOException ex ) {"}, {"source_line_num": 616, "source_line_code": "ex.printStackTrace();"}, {"source_line_num": 619, "source_line_code": "tmpNameC.recycle();"}, {"source_line_num": 620, "source_line_code": "tmpValueC.recycle();"}, {"source_line_num": 622, "source_line_code": "} while( pos<end );"}], "filename": "archive/tc5.5.x/trunk/connectors/util/java/org/apache/tomcat/util/http/Parameters.java", "patch_func": "no", "diff_file": "CVE-2012-0022_1221282.diff", "patch_tag": "5.5.35", "source_tag": "5.5.34"}]