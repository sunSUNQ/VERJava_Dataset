[{"cve_id": "CVE-2012-0022", "added_line": [{"target_line_num": 80, "target_line_code": "public void setLimit(int limit) {"}, {"target_line_num": 81, "target_line_code": "this.limit = limit;"}, {"target_line_num": 84, "target_line_code": "public String getEncoding() {"}, {"target_line_num": 85, "target_line_code": "return encoding;"}, {"target_line_num": 90, "target_line_code": "if(log.isDebugEnabled()) {"}, {"target_line_num": 91, "target_line_code": "log.debug( \"Set encoding to \" + s );"}, {"target_line_num": 97, "target_line_code": "if(log.isDebugEnabled()) {"}, {"target_line_num": 98, "target_line_code": "log.debug( \"Set query string encoding to \" + s );"}, {"target_line_num": 102, "target_line_code": "public boolean isParseFailed() {"}, {"target_line_num": 103, "target_line_code": "return parseFailed;"}, {"target_line_num": 106, "target_line_code": "public void setParseFailed(boolean parseFailed) {"}, {"target_line_num": 107, "target_line_code": "this.parseFailed = parseFailed;"}, {"target_line_num": 111, "target_line_code": "parameterCount = 0;"}, {"target_line_num": 112, "target_line_code": "paramHashValues.clear();"}, {"target_line_num": 116, "target_line_code": "parseFailed = false;"}, {"target_line_num": 123, "target_line_code": "public void addParameterValues(String key, String[] newValues) {"}, {"target_line_num": 124, "target_line_code": "if (key == null) {"}, {"target_line_num": 130, "target_line_code": "ArrayList values = (ArrayList) paramHashValues.get(key);"}, {"target_line_num": 131, "target_line_code": "if (values == null) {"}, {"target_line_num": 132, "target_line_code": "values = new ArrayList(newValues.length);"}, {"target_line_num": 133, "target_line_code": "paramHashValues.put(key, values);"}, {"target_line_num": 135, "target_line_code": "values.ensureCapacity(values.size() + newValues.length);"}, {"target_line_num": 138, "target_line_code": "for (int i = 0; i < newValues.length; i++) {"}, {"target_line_num": 139, "target_line_code": "values.add(newValues[i]);"}, {"target_line_num": 146, "target_line_code": "ArrayList values = (ArrayList) paramHashValues.get(name);"}, {"target_line_num": 147, "target_line_code": "if (values == null) {"}, {"target_line_num": 148, "target_line_code": "return null;"}, {"target_line_num": 151, "target_line_code": "return (String[]) values.toArray(new String[values.size()]);"}, {"target_line_num": 157, "target_line_code": "return Collections.enumeration(paramHashValues.keySet());"}, {"target_line_num": 167, "target_line_code": "handleQueryParameters();"}, {"target_line_num": 168, "target_line_code": "ArrayList values = (ArrayList) paramHashValues.get(name);"}, {"target_line_num": 170, "target_line_code": "if(values.size() == 0) {"}, {"target_line_num": 171, "target_line_code": "return \"\";"}, {"target_line_num": 173, "target_line_code": "return (String) values.get(0);"}], "removed_line": [{"source_line_num": 81, "source_line_code": "public void setHeaders( MimeHeaders headers ) {"}, {"source_line_num": 82, "source_line_code": "this.headers=headers;"}, {"source_line_num": 88, "source_line_code": "if(debug>0) log( \"Set encoding to \" + s );"}, {"source_line_num": 93, "source_line_code": "if(debug>0) log( \"Set query string encoding to \" + s );"}, {"source_line_num": 99, "source_line_code": "super.recycle();"}, {"source_line_num": 100, "source_line_code": "paramHashStringArray.clear();"}, {"source_line_num": 102, "source_line_code": "currentChild=null;"}, {"source_line_num": 103, "source_line_code": "didMerge=false;"}, {"source_line_num": 110, "source_line_code": "public Parameters getCurrentSet() {"}, {"source_line_num": 111, "source_line_code": "if( currentChild==null )"}, {"source_line_num": 112, "source_line_code": "return this;"}, {"source_line_num": 113, "source_line_code": "return currentChild;"}, {"source_line_num": 116, "source_line_code": "/** Create ( or reuse ) a child that will be used during a sub-request."}, {"source_line_num": 117, "source_line_code": "All future changes ( setting query string, adding parameters )"}, {"source_line_num": 118, "source_line_code": "will affect the child ( the parent request is never changed )."}, {"source_line_num": 119, "source_line_code": "Both setters and getters will return the data from the deepest"}, {"source_line_num": 120, "source_line_code": "child, merged with data from parents."}, {"source_line_num": 122, "source_line_code": "public void push() {"}, {"source_line_num": 134, "source_line_code": "if( currentChild==null ) {"}, {"source_line_num": 135, "source_line_code": "currentChild=new Parameters();"}, {"source_line_num": 136, "source_line_code": "currentChild.setURLDecoder( urlDec );"}, {"source_line_num": 137, "source_line_code": "currentChild.parent=this;"}, {"source_line_num": 140, "source_line_code": "if( currentChild.child==null ) {"}, {"source_line_num": 141, "source_line_code": "currentChild.child=new Parameters();"}, {"source_line_num": 142, "source_line_code": "currentChild.setURLDecoder( urlDec );"}, {"source_line_num": 143, "source_line_code": "currentChild.child.parent=currentChild;"}, {"source_line_num": 148, "source_line_code": "currentChild=currentChild.child;"}, {"source_line_num": 149, "source_line_code": "currentChild.setEncoding( encoding );"}, {"source_line_num": 152, "source_line_code": "/** Discard the last child. This happens when we return from a"}, {"source_line_num": 153, "source_line_code": "sub-request and the parameters are locally modified."}, {"source_line_num": 155, "source_line_code": "public void pop() {"}, {"source_line_num": 156, "source_line_code": "if( currentChild==null ) {"}, {"source_line_num": 157, "source_line_code": "throw new RuntimeException( \"Attempt to pop without a push\" );"}, {"source_line_num": 159, "source_line_code": "currentChild.recycle();"}, {"source_line_num": 160, "source_line_code": "currentChild=currentChild.parent;"}, {"source_line_num": 170, "source_line_code": "public void addParameterValues( String key, String[] newValues) {"}, {"source_line_num": 171, "source_line_code": "if ( key==null ) return;"}, {"source_line_num": 172, "source_line_code": "String values[];"}, {"source_line_num": 173, "source_line_code": "if (paramHashStringArray.containsKey(key)) {"}, {"source_line_num": 174, "source_line_code": "String oldValues[] = (String[])paramHashStringArray.get(key);"}, {"source_line_num": 175, "source_line_code": "values = new String[oldValues.length + newValues.length];"}, {"source_line_num": 176, "source_line_code": "for (int i = 0; i < oldValues.length; i++) {"}, {"source_line_num": 177, "source_line_code": "values[i] = oldValues[i];"}, {"source_line_num": 179, "source_line_code": "for (int i = 0; i < newValues.length; i++) {"}, {"source_line_num": 180, "source_line_code": "values[i+ oldValues.length] = newValues[i];"}, {"source_line_num": 183, "source_line_code": "values = newValues;"}, {"source_line_num": 186, "source_line_code": "paramHashStringArray.put(key, values);"}, {"source_line_num": 192, "source_line_code": "if( currentChild!=null ) {"}, {"source_line_num": 193, "source_line_code": "currentChild.merge();"}, {"source_line_num": 194, "source_line_code": "return (String[])currentChild.paramHashStringArray.get(name);"}, {"source_line_num": 198, "source_line_code": "String values[]=(String[])paramHashStringArray.get(name);"}, {"source_line_num": 199, "source_line_code": "return values;"}, {"source_line_num": 205, "source_line_code": "if( currentChild!=null ) {"}, {"source_line_num": 206, "source_line_code": "currentChild.merge();"}, {"source_line_num": 207, "source_line_code": "return currentChild.paramHashStringArray.keys();"}, {"source_line_num": 211, "source_line_code": "return paramHashStringArray.keys();"}, {"source_line_num": 214, "source_line_code": "/** Combine the parameters from parent with our local ones"}, {"source_line_num": 216, "source_line_code": "private void merge() {"}, {"source_line_num": 218, "source_line_code": "if( debug > 0 ) {"}, {"source_line_num": 219, "source_line_code": "log(\"Before merging \" + this + \" \" + parent + \" \" + didMerge );"}, {"source_line_num": 220, "source_line_code": "log(  paramsAsString());"}, {"source_line_num": 223, "source_line_code": "handleQueryParameters();"}, {"source_line_num": 226, "source_line_code": "if( didMerge ) return;"}, {"source_line_num": 229, "source_line_code": "if( parent==null ) return;"}, {"source_line_num": 232, "source_line_code": "parent.merge();"}, {"source_line_num": 233, "source_line_code": "Hashtable parentProps=parent.paramHashStringArray;"}, {"source_line_num": 234, "source_line_code": "merge2( paramHashStringArray , parentProps);"}, {"source_line_num": 235, "source_line_code": "didMerge=true;"}, {"source_line_num": 236, "source_line_code": "if(debug > 0 )"}, {"source_line_num": 237, "source_line_code": "log(\"After \" + paramsAsString());"}, {"source_line_num": 243, "source_line_code": "String[] values = getParameterValues(name);"}, {"source_line_num": 245, "source_line_code": "if( values.length==0 ) return \"\";"}, {"source_line_num": 246, "source_line_code": "return values[0];"}], "filename": "archive/tc5.5.x/trunk/connectors/util/java/org/apache/tomcat/util/http/Parameters.java", "patch_func": "no", "diff_file": "CVE-2012-0022_1221282.diff", "patch_tag": "5.5.35", "source_tag": "5.5.34"}]