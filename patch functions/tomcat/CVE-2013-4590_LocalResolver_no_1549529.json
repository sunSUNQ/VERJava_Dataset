[{"cve_id": "CVE-2013-4590", "added_line": [{"target_line_num": 39, "target_line_code": "private static final StringManager sm ="}, {"target_line_num": 40, "target_line_code": "StringManager.getManager(Constants.PACKAGE_NAME);"}, {"target_line_num": 44, "target_line_code": "private final boolean blockExternal;"}, {"target_line_num": 60, "target_line_code": "Map<String,String> systemIds, boolean blockExternal) {"}, {"target_line_num": 63, "target_line_code": "this.blockExternal = blockExternal;"}, {"target_line_num": 75, "target_line_code": "String base, String systemId) throws SAXException, IOException {"}, {"target_line_num": 85, "target_line_code": "InputSource is = new InputSource(resolved);"}, {"target_line_num": 86, "target_line_code": "is.setPublicId(publicId);"}, {"target_line_num": 87, "target_line_code": "return is;"}, {"target_line_num": 92, "target_line_code": "throw new FileNotFoundException(sm.getString(\"localResolver.unresolvedEntity\","}, {"target_line_num": 93, "target_line_code": "name, publicId, systemId, base));"}, {"target_line_num": 99, "target_line_code": "InputSource is = new InputSource(resolved);"}, {"target_line_num": 100, "target_line_code": "is.setPublicId(publicId);"}, {"target_line_num": 101, "target_line_code": "return is;"}, {"target_line_num": 107, "target_line_code": "URI systemUri;"}, {"target_line_num": 109, "target_line_code": "if (base == null) {"}, {"target_line_num": 110, "target_line_code": "systemUri = new URI(systemId);"}, {"target_line_num": 111, "target_line_code": "} else {"}, {"target_line_num": 116, "target_line_code": "URI baseUri = new URI(base);"}, {"target_line_num": 117, "target_line_code": "systemUri = new URL(baseUri.toURL(), systemId).toURI();"}, {"target_line_num": 119, "target_line_code": "systemUri = systemUri.normalize();"}, {"target_line_num": 120, "target_line_code": "} catch (URISyntaxException e) {"}, {"target_line_num": 123, "target_line_code": "if (blockExternal) {"}, {"target_line_num": 125, "target_line_code": "throw new MalformedURLException(e.getMessage());"}, {"target_line_num": 126, "target_line_code": "} else {"}, {"target_line_num": 128, "target_line_code": "return new InputSource(systemId);"}, {"target_line_num": 131, "target_line_code": "if (systemUri.isAbsolute()) {"}, {"target_line_num": 133, "target_line_code": "resolved = systemIds.get(systemUri.toString());"}, {"target_line_num": 134, "target_line_code": "if (resolved != null) {"}, {"target_line_num": 135, "target_line_code": "InputSource is = new InputSource(resolved);"}, {"target_line_num": 136, "target_line_code": "is.setPublicId(publicId);"}, {"target_line_num": 137, "target_line_code": "return is;"}, {"target_line_num": 139, "target_line_code": "if (!blockExternal) {"}, {"target_line_num": 140, "target_line_code": "InputSource is = new InputSource(systemUri.toString());"}, {"target_line_num": 141, "target_line_code": "is.setPublicId(publicId);"}, {"target_line_num": 142, "target_line_code": "return is;"}, {"target_line_num": 145, "target_line_code": "throw new FileNotFoundException(sm.getString(\"localResolver.unresolvedEntity\","}, {"target_line_num": 146, "target_line_code": "name, publicId, systemId, base));"}, {"target_line_num": 152, "target_line_code": "@Override"}, {"target_line_num": 153, "target_line_code": "public InputSource getExternalSubset(String name, String baseURI)"}, {"target_line_num": 154, "target_line_code": "throws SAXException, IOException {"}, {"target_line_num": 155, "target_line_code": "return null;"}], "removed_line": [{"source_line_num": 51, "source_line_code": "Map<String,String> systemIds) {"}, {"source_line_num": 65, "source_line_code": "String baseURI, String systemId) throws SAXException, IOException {"}, {"source_line_num": 67, "source_line_code": "String resolved = resolve(publicId, systemId, baseURI);"}, {"source_line_num": 68, "source_line_code": "if (resolved == null) {"}, {"source_line_num": 69, "source_line_code": "return null;"}, {"source_line_num": 72, "source_line_code": "InputSource is = new InputSource(resolved);"}, {"source_line_num": 73, "source_line_code": "is.setPublicId(publicId);"}, {"source_line_num": 74, "source_line_code": "return is;"}, {"source_line_num": 78, "source_line_code": "@Override"}, {"source_line_num": 79, "source_line_code": "public InputSource getExternalSubset(String name, String baseURI)"}, {"source_line_num": 80, "source_line_code": "throws SAXException, IOException {"}, {"source_line_num": 81, "source_line_code": "return null;"}, {"source_line_num": 85, "source_line_code": "private String resolve(String publicId, String systemId, String baseURI) {"}, {"source_line_num": 89, "source_line_code": "return resolved;"}, {"source_line_num": 94, "source_line_code": "return null;"}, {"source_line_num": 97, "source_line_code": "systemId = resolve(baseURI, systemId);"}, {"source_line_num": 100, "source_line_code": "return resolved;"}, {"source_line_num": 104, "source_line_code": "return systemId;"}, {"source_line_num": 108, "source_line_code": "private static String resolve(String baseURI, String systemId) {"}, {"source_line_num": 110, "source_line_code": "if (baseURI == null) {"}, {"source_line_num": 111, "source_line_code": "return systemId;"}, {"source_line_num": 113, "source_line_code": "URI systemUri = new URI(systemId);"}, {"source_line_num": 114, "source_line_code": "if (systemUri.isAbsolute()) {"}, {"source_line_num": 115, "source_line_code": "return systemId;"}, {"source_line_num": 117, "source_line_code": "return new URL(new URL(baseURI), systemId).toString();"}, {"source_line_num": 118, "source_line_code": "} catch (URISyntaxException e) {"}, {"source_line_num": 119, "source_line_code": "return systemId;"}, {"source_line_num": 120, "source_line_code": "} catch (MalformedURLException e) {"}, {"source_line_num": 121, "source_line_code": "return systemId;"}], "filename": "archive/tc7.0.x/trunk/java/org/apache/tomcat/util/descriptor/LocalResolver.java", "patch_func": "no", "diff_file": "CVE-2013-4590_1549529.diff", "patch_tag": "7.0.48", "source_tag": "7.0.47"}]