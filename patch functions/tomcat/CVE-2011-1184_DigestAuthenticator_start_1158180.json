[{"cve_id": "CVE-2011-1184", "added_line": [{"target_line_num": 421, "target_line_code": "String authenticateHeader;"}, {"target_line_num": 422, "target_line_code": "if (isNonceStale) {"}, {"target_line_num": 423, "target_line_code": "authenticateHeader = \"Digest realm=\\\"\" + realmName + \"\\\", \" +"}, {"target_line_num": 424, "target_line_code": "\"qop=\\\"\" + QOP + \"\\\", nonce=\\\"\" + nonce + \"\\\", \" + \"opaque=\\\"\" +"}, {"target_line_num": 425, "target_line_code": "getOpaque() + \"\\\", stale=true\";"}, {"target_line_num": 426, "target_line_code": "} else {"}, {"target_line_num": 423, "target_line_code": "authenticateHeader = \"Digest realm=\\\"\" + realmName + \"\\\", \" +"}, {"target_line_num": 424, "target_line_code": "\"qop=\\\"\" + QOP + \"\\\", nonce=\\\"\" + nonce + \"\\\", \" + \"opaque=\\\"\" +"}, {"target_line_num": 429, "target_line_code": "getOpaque() + \"\\\"\";"}, {"target_line_num": 440, "target_line_code": "public void start() throws LifecycleException {"}, {"target_line_num": 441, "target_line_code": "super.start();"}, {"target_line_num": 444, "target_line_code": "if (getKey() == null) {"}, {"target_line_num": 445, "target_line_code": "setKey(generateSessionId());"}, {"target_line_num": 449, "target_line_code": "if (getOpaque() == null) {"}, {"target_line_num": 450, "target_line_code": "setOpaque(generateSessionId());"}, {"target_line_num": 453, "target_line_code": "cnonces = new LinkedHashMap<String, DigestAuthenticator.NonceInfo>() {"}, {"target_line_num": 455, "target_line_code": "private static final long serialVersionUID = 1L;"}, {"target_line_num": 456, "target_line_code": "private static final long LOG_SUPPRESS_TIME = 5 * 60 * 1000;"}, {"target_line_num": 458, "target_line_code": "private long lastLog = 0;"}, {"target_line_num": 461, "target_line_code": "protected boolean removeEldestEntry("}, {"target_line_num": 462, "target_line_code": "Map.Entry<String,NonceInfo> eldest) {"}, {"target_line_num": 464, "target_line_code": "long currentTime = System.currentTimeMillis();"}, {"target_line_num": 465, "target_line_code": "if (size() > getCnonceCacheSize()) {"}, {"target_line_num": 466, "target_line_code": "if (lastLog < currentTime &&"}, {"target_line_num": 467, "target_line_code": "currentTime - eldest.getValue().getTimestamp() <"}, {"target_line_num": 468, "target_line_code": "getNonceValidity()) {"}, {"target_line_num": 470, "target_line_code": "log.warn(sm.getString("}, {"target_line_num": 471, "target_line_code": "\"digestAuthenticator.cacheRemove\"));"}, {"target_line_num": 472, "target_line_code": "lastLog = currentTime + LOG_SUPPRESS_TIME;"}, {"target_line_num": 474, "target_line_code": "return true;"}, {"target_line_num": 476, "target_line_code": "return false;"}, {"target_line_num": 478, "target_line_code": "};"}, {"target_line_num": 481, "target_line_code": "private static class DigestInfo {"}, {"target_line_num": 483, "target_line_code": "private String opaque;"}, {"target_line_num": 484, "target_line_code": "private long nonceValidity;"}, {"target_line_num": 485, "target_line_code": "private String key;"}, {"target_line_num": 486, "target_line_code": "private Map<String,NonceInfo> cnonces;"}, {"target_line_num": 487, "target_line_code": "private boolean validateUri = true;"}, {"target_line_num": 489, "target_line_code": "private String userName = null;"}, {"target_line_num": 490, "target_line_code": "private String method = null;"}, {"target_line_num": 491, "target_line_code": "private String uri = null;"}, {"target_line_num": 492, "target_line_code": "private String response = null;"}, {"target_line_num": 493, "target_line_code": "private String nonce = null;"}, {"target_line_num": 494, "target_line_code": "private String nc = null;"}, {"target_line_num": 495, "target_line_code": "private String cnonce = null;"}, {"target_line_num": 496, "target_line_code": "private String realmName = null;"}, {"target_line_num": 497, "target_line_code": "private String qop = null;"}, {"target_line_num": 499, "target_line_code": "private boolean nonceStale = false;"}, {"target_line_num": 502, "target_line_code": "public DigestInfo(String opaque, long nonceValidity, String key,"}, {"target_line_num": 503, "target_line_code": "Map<String,NonceInfo> cnonces, boolean validateUri) {"}, {"target_line_num": 504, "target_line_code": "this.opaque = opaque;"}, {"target_line_num": 505, "target_line_code": "this.nonceValidity = nonceValidity;"}, {"target_line_num": 506, "target_line_code": "this.key = key;"}, {"target_line_num": 507, "target_line_code": "this.cnonces = cnonces;"}, {"target_line_num": 508, "target_line_code": "this.validateUri = validateUri;"}, {"target_line_num": 511, "target_line_code": "public boolean validate(Request request, String authorization,"}, {"target_line_num": 512, "target_line_code": "LoginConfig config) {"}, {"target_line_num": 514, "target_line_code": "if (authorization == null) {"}, {"target_line_num": 515, "target_line_code": "return false;"}, {"target_line_num": 517, "target_line_code": "if (!authorization.startsWith(\"Digest \")) {"}, {"target_line_num": 515, "target_line_code": "return false;"}, {"target_line_num": 520, "target_line_code": "authorization = authorization.substring(7).trim();"}, {"target_line_num": 523, "target_line_code": "String[] tokens = authorization.split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")+$)\");"}, {"target_line_num": 525, "target_line_code": "method = request.getMethod();"}, {"target_line_num": 526, "target_line_code": "String opaque = null;"}, {"target_line_num": 528, "target_line_code": "for (int i = 0; i < tokens.length; i++) {"}, {"target_line_num": 529, "target_line_code": "String currentToken = tokens[i];"}, {"target_line_num": 530, "target_line_code": "if (currentToken.length() == 0)"}, {"target_line_num": 531, "target_line_code": "continue;"}, {"target_line_num": 533, "target_line_code": "int equalSign = currentToken.indexOf('=');"}, {"target_line_num": 534, "target_line_code": "if (equalSign < 0) {"}, {"target_line_num": 535, "target_line_code": "return false;"}, {"target_line_num": 537, "target_line_code": "String currentTokenName ="}, {"target_line_num": 538, "target_line_code": "currentToken.substring(0, equalSign).trim();"}, {"target_line_num": 539, "target_line_code": "String currentTokenValue ="}, {"target_line_num": 540, "target_line_code": "currentToken.substring(equalSign + 1).trim();"}, {"target_line_num": 541, "target_line_code": "if (\"username\".equals(currentTokenName))"}, {"target_line_num": 542, "target_line_code": "userName = removeQuotes(currentTokenValue);"}, {"target_line_num": 543, "target_line_code": "if (\"realm\".equals(currentTokenName))"}, {"target_line_num": 544, "target_line_code": "realmName = removeQuotes(currentTokenValue, true);"}, {"target_line_num": 545, "target_line_code": "if (\"nonce\".equals(currentTokenName))"}, {"target_line_num": 546, "target_line_code": "nonce = removeQuotes(currentTokenValue);"}, {"target_line_num": 547, "target_line_code": "if (\"nc\".equals(currentTokenName))"}, {"target_line_num": 548, "target_line_code": "nc = removeQuotes(currentTokenValue);"}, {"target_line_num": 549, "target_line_code": "if (\"cnonce\".equals(currentTokenName))"}, {"target_line_num": 550, "target_line_code": "cnonce = removeQuotes(currentTokenValue);"}, {"target_line_num": 551, "target_line_code": "if (\"qop\".equals(currentTokenName))"}, {"target_line_num": 552, "target_line_code": "qop = removeQuotes(currentTokenValue);"}, {"target_line_num": 553, "target_line_code": "if (\"uri\".equals(currentTokenName))"}, {"target_line_num": 554, "target_line_code": "uri = removeQuotes(currentTokenValue);"}, {"target_line_num": 555, "target_line_code": "if (\"response\".equals(currentTokenName))"}, {"target_line_num": 556, "target_line_code": "response = removeQuotes(currentTokenValue);"}, {"target_line_num": 557, "target_line_code": "if (\"opaque\".equals(currentTokenName))"}, {"target_line_num": 558, "target_line_code": "opaque = removeQuotes(currentTokenValue);"}, {"target_line_num": 561, "target_line_code": "if ( (userName == null) || (realmName == null) || (nonce == null)"}, {"target_line_num": 562, "target_line_code": "|| (uri == null) || (response == null) ) {"}, {"target_line_num": 563, "target_line_code": "return false;"}, {"target_line_num": 567, "target_line_code": "if (validateUri) {"}, {"target_line_num": 568, "target_line_code": "String uriQuery;"}, {"target_line_num": 569, "target_line_code": "String query = request.getQueryString();"}, {"target_line_num": 570, "target_line_code": "if (query == null) {"}, {"target_line_num": 571, "target_line_code": "uriQuery = request.getRequestURI();"}, {"target_line_num": 572, "target_line_code": "} else {"}, {"target_line_num": 573, "target_line_code": "uriQuery = request.getRequestURI() + \"?\" + query;"}, {"target_line_num": 575, "target_line_code": "if (!uri.equals(uriQuery)) {"}, {"target_line_num": 576, "target_line_code": "return false;"}, {"target_line_num": 581, "target_line_code": "String lcRealm = config.getRealmName();"}, {"target_line_num": 582, "target_line_code": "if (lcRealm == null) {"}, {"target_line_num": 583, "target_line_code": "lcRealm = REALM_NAME;"}, {"target_line_num": 585, "target_line_code": "if (!lcRealm.equals(realmName)) {"}, {"target_line_num": 586, "target_line_code": "return false;"}, {"target_line_num": 590, "target_line_code": "if (!this.opaque.equals(opaque)) {"}, {"target_line_num": 586, "target_line_code": "return false;"}, {"target_line_num": 595, "target_line_code": "int i = nonce.indexOf(\":\");"}, {"target_line_num": 596, "target_line_code": "if (i < 0 || (i + 1) == nonce.length()) {"}, {"target_line_num": 586, "target_line_code": "return false;"}, {"target_line_num": 599, "target_line_code": "long nonceTime;"}, {"target_line_num": 600, "target_line_code": "try {"}, {"target_line_num": 601, "target_line_code": "nonceTime = Long.parseLong(nonce.substring(0, i));"}, {"target_line_num": 602, "target_line_code": "} catch (NumberFormatException nfe) {"}, {"target_line_num": 586, "target_line_code": "return false;"}, {"target_line_num": 605, "target_line_code": "String md5clientIpTimeKey = nonce.substring(i + 1);"}, {"target_line_num": 606, "target_line_code": "long currentTime = System.currentTimeMillis();"}, {"target_line_num": 607, "target_line_code": "if ((currentTime - nonceTime) > nonceValidity) {"}, {"target_line_num": 608, "target_line_code": "nonceStale = true;"}, {"target_line_num": 586, "target_line_code": "return false;"}, {"target_line_num": 611, "target_line_code": "String serverIpTimeKey ="}, {"target_line_num": 612, "target_line_code": "request.getRemoteAddr() + \":\" + nonceTime + \":\" + key;"}, {"target_line_num": 613, "target_line_code": "byte[] buffer = null;"}, {"target_line_num": 614, "target_line_code": "synchronized (md5Helper) {"}, {"target_line_num": 615, "target_line_code": "buffer = md5Helper.digest(serverIpTimeKey.getBytes());"}, {"target_line_num": 617, "target_line_code": "String md5ServerIpTimeKey = md5Encoder.encode(buffer);"}, {"target_line_num": 618, "target_line_code": "if (!md5ServerIpTimeKey.equals(md5clientIpTimeKey)) {"}, {"target_line_num": 619, "target_line_code": "return false;"}, {"target_line_num": 623, "target_line_code": "if (qop != null && !QOP.equals(qop)) {"}, {"target_line_num": 619, "target_line_code": "return false;"}, {"target_line_num": 629, "target_line_code": "if (qop == null) {"}, {"target_line_num": 630, "target_line_code": "if (cnonce != null || nc != null) {"}, {"target_line_num": 619, "target_line_code": "return false;"}, {"target_line_num": 633, "target_line_code": "} else {"}, {"target_line_num": 634, "target_line_code": "if (cnonce == null || nc == null) {"}, {"target_line_num": 619, "target_line_code": "return false;"}, {"target_line_num": 637, "target_line_code": "if (nc.length() != 8) {"}, {"target_line_num": 619, "target_line_code": "return false;"}, {"target_line_num": 640, "target_line_code": "long count;"}, {"target_line_num": 641, "target_line_code": "try {"}, {"target_line_num": 642, "target_line_code": "count = Long.parseLong(nc, 16);"}, {"target_line_num": 643, "target_line_code": "} catch (NumberFormatException nfe) {"}, {"target_line_num": 619, "target_line_code": "return false;"}, {"target_line_num": 646, "target_line_code": "NonceInfo info;"}, {"target_line_num": 647, "target_line_code": "synchronized (cnonces) {"}, {"target_line_num": 648, "target_line_code": "info = cnonces.get(cnonce);"}, {"target_line_num": 650, "target_line_code": "if (info == null) {"}, {"target_line_num": 651, "target_line_code": "info = new NonceInfo();"}, {"target_line_num": 652, "target_line_code": "} else {"}, {"target_line_num": 653, "target_line_code": "if (count <= info.getCount()) {"}, {"target_line_num": 654, "target_line_code": "return false;"}, {"target_line_num": 657, "target_line_code": "info.setCount(count);"}, {"target_line_num": 658, "target_line_code": "info.setTimestamp(currentTime);"}, {"target_line_num": 659, "target_line_code": "synchronized (cnonces) {"}, {"target_line_num": 660, "target_line_code": "cnonces.put(cnonce, info);"}, {"target_line_num": 663, "target_line_code": "return true;"}, {"target_line_num": 666, "target_line_code": "public boolean isNonceStale() {"}, {"target_line_num": 667, "target_line_code": "return nonceStale;"}, {"target_line_num": 670, "target_line_code": "public Principal authenticate(Realm realm) {"}, {"target_line_num": 673, "target_line_code": "String a2 = method + \":\" + uri;"}, {"target_line_num": 675, "target_line_code": "byte[] buffer;"}, {"target_line_num": 676, "target_line_code": "synchronized (md5Helper) {"}, {"target_line_num": 677, "target_line_code": "buffer = md5Helper.digest(a2.getBytes());"}, {"target_line_num": 679, "target_line_code": "String md5a2 = md5Encoder.encode(buffer);"}, {"target_line_num": 681, "target_line_code": "return realm.authenticate(userName, response, nonce, nc, cnonce,"}, {"target_line_num": 682, "target_line_code": "qop, realmName, md5a2);"}, {"target_line_num": 687, "target_line_code": "private static class NonceInfo {"}, {"target_line_num": 688, "target_line_code": "private volatile long count;"}, {"target_line_num": 689, "target_line_code": "private volatile long timestamp;"}, {"target_line_num": 691, "target_line_code": "public void setCount(long l) {"}, {"target_line_num": 692, "target_line_code": "count = l;"}, {"target_line_num": 695, "target_line_code": "public long getCount() {"}, {"target_line_num": 696, "target_line_code": "return count;"}, {"target_line_num": 699, "target_line_code": "public void setTimestamp(long l) {"}, {"target_line_num": 700, "target_line_code": "timestamp = l;"}, {"target_line_num": 703, "target_line_code": "public long getTimestamp() {"}, {"target_line_num": 704, "target_line_code": "return timestamp;"}, {"target_line_num": 421, "target_line_code": "String authenticateHeader;"}, {"target_line_num": 422, "target_line_code": "if (isNonceStale) {"}, {"target_line_num": 423, "target_line_code": "authenticateHeader = \"Digest realm=\\\"\" + realmName + \"\\\", \" +"}, {"target_line_num": 424, "target_line_code": "\"qop=\\\"\" + QOP + \"\\\", nonce=\\\"\" + nonce + \"\\\", \" + \"opaque=\\\"\" +"}, {"target_line_num": 425, "target_line_code": "getOpaque() + \"\\\", stale=true\";"}, {"target_line_num": 428, "target_line_code": "} else {"}, {"target_line_num": 423, "target_line_code": "authenticateHeader = \"Digest realm=\\\"\" + realmName + \"\\\", \" +"}, {"target_line_num": 424, "target_line_code": "\"qop=\\\"\" + QOP + \"\\\", nonce=\\\"\" + nonce + \"\\\", \" + \"opaque=\\\"\" +"}, {"target_line_num": 429, "target_line_code": "getOpaque() + \"\\\"\";"}, {"target_line_num": 440, "target_line_code": "public void start() throws LifecycleException {"}, {"target_line_num": 441, "target_line_code": "super.start();"}, {"target_line_num": 444, "target_line_code": "if (getKey() == null) {"}, {"target_line_num": 445, "target_line_code": "setKey(generateSessionId());"}, {"target_line_num": 449, "target_line_code": "if (getOpaque() == null) {"}, {"target_line_num": 450, "target_line_code": "setOpaque(generateSessionId());"}, {"target_line_num": 453, "target_line_code": "cnonces = new LinkedHashMap<String, DigestAuthenticator.NonceInfo>() {"}, {"target_line_num": 455, "target_line_code": "private static final long serialVersionUID = 1L;"}, {"target_line_num": 456, "target_line_code": "private static final long LOG_SUPPRESS_TIME = 5 * 60 * 1000;"}, {"target_line_num": 458, "target_line_code": "private long lastLog = 0;"}, {"target_line_num": 461, "target_line_code": "protected boolean removeEldestEntry("}, {"target_line_num": 462, "target_line_code": "Map.Entry<String,NonceInfo> eldest) {"}, {"target_line_num": 466, "target_line_code": "long currentTime = System.currentTimeMillis();"}, {"target_line_num": 465, "target_line_code": "if (size() > getCnonceCacheSize()) {"}, {"target_line_num": 466, "target_line_code": "if (lastLog < currentTime &&"}, {"target_line_num": 467, "target_line_code": "currentTime - eldest.getValue().getTimestamp() <"}, {"target_line_num": 468, "target_line_code": "getNonceValidity()) {"}, {"target_line_num": 470, "target_line_code": "log.warn(sm.getString("}, {"target_line_num": 471, "target_line_code": "\"digestAuthenticator.cacheRemove\"));"}, {"target_line_num": 472, "target_line_code": "lastLog = currentTime + LOG_SUPPRESS_TIME;"}, {"target_line_num": 476, "target_line_code": "return true;"}, {"target_line_num": 478, "target_line_code": "return false;"}, {"target_line_num": 478, "target_line_code": "};"}, {"target_line_num": 481, "target_line_code": "private static class DigestInfo {"}, {"target_line_num": 483, "target_line_code": "private String opaque;"}, {"target_line_num": 484, "target_line_code": "private long nonceValidity;"}, {"target_line_num": 485, "target_line_code": "private String key;"}, {"target_line_num": 486, "target_line_code": "private Map<String,NonceInfo> cnonces;"}, {"target_line_num": 487, "target_line_code": "private boolean validateUri = true;"}, {"target_line_num": 489, "target_line_code": "private String userName = null;"}, {"target_line_num": 490, "target_line_code": "private String method = null;"}, {"target_line_num": 491, "target_line_code": "private String uri = null;"}, {"target_line_num": 492, "target_line_code": "private String response = null;"}, {"target_line_num": 493, "target_line_code": "private String nonce = null;"}, {"target_line_num": 494, "target_line_code": "private String nc = null;"}, {"target_line_num": 495, "target_line_code": "private String cnonce = null;"}, {"target_line_num": 496, "target_line_code": "private String realmName = null;"}, {"target_line_num": 497, "target_line_code": "private String qop = null;"}, {"target_line_num": 499, "target_line_code": "private boolean nonceStale = false;"}, {"target_line_num": 502, "target_line_code": "public DigestInfo(String opaque, long nonceValidity, String key,"}, {"target_line_num": 503, "target_line_code": "Map<String,NonceInfo> cnonces, boolean validateUri) {"}, {"target_line_num": 504, "target_line_code": "this.opaque = opaque;"}, {"target_line_num": 505, "target_line_code": "this.nonceValidity = nonceValidity;"}, {"target_line_num": 506, "target_line_code": "this.key = key;"}, {"target_line_num": 507, "target_line_code": "this.cnonces = cnonces;"}, {"target_line_num": 508, "target_line_code": "this.validateUri = validateUri;"}, {"target_line_num": 511, "target_line_code": "public boolean validate(Request request, String authorization,"}, {"target_line_num": 512, "target_line_code": "LoginConfig config) {"}, {"target_line_num": 514, "target_line_code": "if (authorization == null) {"}, {"target_line_num": 517, "target_line_code": "return false;"}, {"target_line_num": 517, "target_line_code": "if (!authorization.startsWith(\"Digest \")) {"}, {"target_line_num": 520, "target_line_code": "return false;"}, {"target_line_num": 520, "target_line_code": "authorization = authorization.substring(7).trim();"}, {"target_line_num": 523, "target_line_code": "String[] tokens = authorization.split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")+$)\");"}, {"target_line_num": 525, "target_line_code": "method = request.getMethod();"}, {"target_line_num": 526, "target_line_code": "String opaque = null;"}, {"target_line_num": 528, "target_line_code": "for (int i = 0; i < tokens.length; i++) {"}, {"target_line_num": 529, "target_line_code": "String currentToken = tokens[i];"}, {"target_line_num": 530, "target_line_code": "if (currentToken.length() == 0)"}, {"target_line_num": 531, "target_line_code": "continue;"}, {"target_line_num": 533, "target_line_code": "int equalSign = currentToken.indexOf('=');"}, {"target_line_num": 534, "target_line_code": "if (equalSign < 0) {"}, {"target_line_num": 537, "target_line_code": "return false;"}, {"target_line_num": 537, "target_line_code": "String currentTokenName ="}, {"target_line_num": 538, "target_line_code": "currentToken.substring(0, equalSign).trim();"}, {"target_line_num": 539, "target_line_code": "String currentTokenValue ="}, {"target_line_num": 540, "target_line_code": "currentToken.substring(equalSign + 1).trim();"}, {"target_line_num": 541, "target_line_code": "if (\"username\".equals(currentTokenName))"}, {"target_line_num": 542, "target_line_code": "userName = removeQuotes(currentTokenValue);"}, {"target_line_num": 543, "target_line_code": "if (\"realm\".equals(currentTokenName))"}, {"target_line_num": 544, "target_line_code": "realmName = removeQuotes(currentTokenValue, true);"}, {"target_line_num": 545, "target_line_code": "if (\"nonce\".equals(currentTokenName))"}, {"target_line_num": 546, "target_line_code": "nonce = removeQuotes(currentTokenValue);"}, {"target_line_num": 547, "target_line_code": "if (\"nc\".equals(currentTokenName))"}, {"target_line_num": 548, "target_line_code": "nc = removeQuotes(currentTokenValue);"}, {"target_line_num": 549, "target_line_code": "if (\"cnonce\".equals(currentTokenName))"}, {"target_line_num": 550, "target_line_code": "cnonce = removeQuotes(currentTokenValue);"}, {"target_line_num": 551, "target_line_code": "if (\"qop\".equals(currentTokenName))"}, {"target_line_num": 552, "target_line_code": "qop = removeQuotes(currentTokenValue);"}, {"target_line_num": 553, "target_line_code": "if (\"uri\".equals(currentTokenName))"}, {"target_line_num": 554, "target_line_code": "uri = removeQuotes(currentTokenValue);"}, {"target_line_num": 555, "target_line_code": "if (\"response\".equals(currentTokenName))"}, {"target_line_num": 556, "target_line_code": "response = removeQuotes(currentTokenValue);"}, {"target_line_num": 557, "target_line_code": "if (\"opaque\".equals(currentTokenName))"}, {"target_line_num": 558, "target_line_code": "opaque = removeQuotes(currentTokenValue);"}, {"target_line_num": 561, "target_line_code": "if ( (userName == null) || (realmName == null) || (nonce == null)"}, {"target_line_num": 562, "target_line_code": "|| (uri == null) || (response == null) ) {"}, {"target_line_num": 565, "target_line_code": "return false;"}, {"target_line_num": 567, "target_line_code": "if (validateUri) {"}, {"target_line_num": 568, "target_line_code": "String uriQuery;"}, {"target_line_num": 569, "target_line_code": "String query = request.getQueryString();"}, {"target_line_num": 570, "target_line_code": "if (query == null) {"}, {"target_line_num": 571, "target_line_code": "uriQuery = request.getRequestURI();"}, {"target_line_num": 574, "target_line_code": "} else {"}, {"target_line_num": 573, "target_line_code": "uriQuery = request.getRequestURI() + \"?\" + query;"}, {"target_line_num": 575, "target_line_code": "if (!uri.equals(uriQuery)) {"}, {"target_line_num": 578, "target_line_code": "return false;"}, {"target_line_num": 581, "target_line_code": "String lcRealm = config.getRealmName();"}, {"target_line_num": 582, "target_line_code": "if (lcRealm == null) {"}, {"target_line_num": 583, "target_line_code": "lcRealm = REALM_NAME;"}, {"target_line_num": 585, "target_line_code": "if (!lcRealm.equals(realmName)) {"}, {"target_line_num": 588, "target_line_code": "return false;"}, {"target_line_num": 590, "target_line_code": "if (!this.opaque.equals(opaque)) {"}, {"target_line_num": 593, "target_line_code": "return false;"}, {"target_line_num": 595, "target_line_code": "int i = nonce.indexOf(\":\");"}, {"target_line_num": 596, "target_line_code": "if (i < 0 || (i + 1) == nonce.length()) {"}, {"target_line_num": 599, "target_line_code": "return false;"}, {"target_line_num": 599, "target_line_code": "long nonceTime;"}, {"target_line_num": 602, "target_line_code": "try {"}, {"target_line_num": 601, "target_line_code": "nonceTime = Long.parseLong(nonce.substring(0, i));"}, {"target_line_num": 604, "target_line_code": "} catch (NumberFormatException nfe) {"}, {"target_line_num": 605, "target_line_code": "return false;"}, {"target_line_num": 605, "target_line_code": "String md5clientIpTimeKey = nonce.substring(i + 1);"}, {"target_line_num": 608, "target_line_code": "long currentTime = System.currentTimeMillis();"}, {"target_line_num": 607, "target_line_code": "if ((currentTime - nonceTime) > nonceValidity) {"}, {"target_line_num": 608, "target_line_code": "nonceStale = true;"}, {"target_line_num": 611, "target_line_code": "return false;"}, {"target_line_num": 611, "target_line_code": "String serverIpTimeKey ="}, {"target_line_num": 612, "target_line_code": "request.getRemoteAddr() + \":\" + nonceTime + \":\" + key;"}, {"target_line_num": 613, "target_line_code": "byte[] buffer = null;"}, {"target_line_num": 616, "target_line_code": "synchronized (md5Helper) {"}, {"target_line_num": 615, "target_line_code": "buffer = md5Helper.digest(serverIpTimeKey.getBytes());"}, {"target_line_num": 617, "target_line_code": "String md5ServerIpTimeKey = md5Encoder.encode(buffer);"}, {"target_line_num": 618, "target_line_code": "if (!md5ServerIpTimeKey.equals(md5clientIpTimeKey)) {"}, {"target_line_num": 621, "target_line_code": "return false;"}, {"target_line_num": 623, "target_line_code": "if (qop != null && !QOP.equals(qop)) {"}, {"target_line_num": 626, "target_line_code": "return false;"}, {"target_line_num": 629, "target_line_code": "if (qop == null) {"}, {"target_line_num": 630, "target_line_code": "if (cnonce != null || nc != null) {"}, {"target_line_num": 633, "target_line_code": "return false;"}, {"target_line_num": 635, "target_line_code": "} else {"}, {"target_line_num": 634, "target_line_code": "if (cnonce == null || nc == null) {"}, {"target_line_num": 637, "target_line_code": "return false;"}, {"target_line_num": 637, "target_line_code": "if (nc.length() != 8) {"}, {"target_line_num": 640, "target_line_code": "return false;"}, {"target_line_num": 640, "target_line_code": "long count;"}, {"target_line_num": 643, "target_line_code": "try {"}, {"target_line_num": 642, "target_line_code": "count = Long.parseLong(nc, 16);"}, {"target_line_num": 645, "target_line_code": "} catch (NumberFormatException nfe) {"}, {"target_line_num": 646, "target_line_code": "return false;"}, {"target_line_num": 646, "target_line_code": "NonceInfo info;"}, {"target_line_num": 649, "target_line_code": "synchronized (cnonces) {"}, {"target_line_num": 648, "target_line_code": "info = cnonces.get(cnonce);"}, {"target_line_num": 650, "target_line_code": "if (info == null) {"}, {"target_line_num": 651, "target_line_code": "info = new NonceInfo();"}, {"target_line_num": 654, "target_line_code": "} else {"}, {"target_line_num": 653, "target_line_code": "if (count <= info.getCount()) {"}, {"target_line_num": 656, "target_line_code": "return false;"}, {"target_line_num": 657, "target_line_code": "info.setCount(count);"}, {"target_line_num": 658, "target_line_code": "info.setTimestamp(currentTime);"}, {"target_line_num": 661, "target_line_code": "synchronized (cnonces) {"}, {"target_line_num": 660, "target_line_code": "cnonces.put(cnonce, info);"}, {"target_line_num": 665, "target_line_code": "return true;"}, {"target_line_num": 666, "target_line_code": "public boolean isNonceStale() {"}, {"target_line_num": 667, "target_line_code": "return nonceStale;"}, {"target_line_num": 670, "target_line_code": "public Principal authenticate(Realm realm) {"}, {"target_line_num": 673, "target_line_code": "String a2 = method + \":\" + uri;"}, {"target_line_num": 675, "target_line_code": "byte[] buffer;"}, {"target_line_num": 678, "target_line_code": "synchronized (md5Helper) {"}, {"target_line_num": 677, "target_line_code": "buffer = md5Helper.digest(a2.getBytes());"}, {"target_line_num": 679, "target_line_code": "String md5a2 = md5Encoder.encode(buffer);"}, {"target_line_num": 681, "target_line_code": "return realm.authenticate(userName, response, nonce, nc, cnonce,"}, {"target_line_num": 682, "target_line_code": "qop, realmName, md5a2);"}, {"target_line_num": 687, "target_line_code": "private static class NonceInfo {"}, {"target_line_num": 688, "target_line_code": "private volatile long count;"}, {"target_line_num": 689, "target_line_code": "private volatile long timestamp;"}, {"target_line_num": 691, "target_line_code": "public void setCount(long l) {"}, {"target_line_num": 692, "target_line_code": "count = l;"}, {"target_line_num": 695, "target_line_code": "public long getCount() {"}, {"target_line_num": 696, "target_line_code": "return count;"}, {"target_line_num": 699, "target_line_code": "public void setTimestamp(long l) {"}, {"target_line_num": 700, "target_line_code": "timestamp = l;"}, {"target_line_num": 703, "target_line_code": "public long getTimestamp() {"}, {"target_line_num": 704, "target_line_code": "return timestamp;"}], "removed_line": [{"source_line_num": 411, "source_line_code": "byte[] buffer = null;"}, {"source_line_num": 412, "source_line_code": "synchronized (md5Helper) {"}, {"source_line_num": 413, "source_line_code": "buffer = md5Helper.digest(nOnce.getBytes());"}, {"source_line_num": 416, "source_line_code": "String authenticateHeader = \"Digest realm=\\\"\" + realmName + \"\\\", \""}, {"source_line_num": 417, "source_line_code": "+  \"qop=\\\"auth\\\", nonce=\\\"\" + nOnce + \"\\\", \" + \"opaque=\\\"\""}, {"source_line_num": 418, "source_line_code": "+ md5Encoder.encode(buffer) + \"\\\"\";"}, {"source_line_num": 411, "source_line_code": "byte[] buffer = null;"}, {"source_line_num": 412, "source_line_code": "synchronized (md5Helper) {"}, {"source_line_num": 413, "source_line_code": "buffer = md5Helper.digest(nOnce.getBytes());"}, {"source_line_num": 416, "source_line_code": "String authenticateHeader = \"Digest realm=\\\"\" + realmName + \"\\\", \""}, {"source_line_num": 417, "source_line_code": "+  \"qop=\\\"auth\\\", nonce=\\\"\" + nOnce + \"\\\", \" + \"opaque=\\\"\""}, {"source_line_num": 418, "source_line_code": "+ md5Encoder.encode(buffer) + \"\\\"\";"}], "filename": "archive/tc6.0.x/trunk/java/org/apache/catalina/authenticator/DigestAuthenticator.java", "patch_func": "start", "diff_file": "CVE-2011-1184_1158180.diff", "patch_tag": "6.0.33", "source_tag": "6.0.32"}]