[{"cve_id": "CVE-2012-0022", "added_line": [{"target_line_num": 204, "target_line_code": "processParameters(bytes, start, len, getCharset(encoding));"}, {"target_line_num": 207, "target_line_code": "public void processParameters(byte bytes[], int start, int len,"}, {"target_line_num": 208, "target_line_code": "Charset charset) {"}, {"target_line_num": 211, "target_line_code": "log.debug(sm.getString(\"parameters.bytes\","}, {"target_line_num": 212, "target_line_code": "new String(bytes, start, len, DEFAULT_CHARSET)));"}, {"target_line_num": 215, "target_line_code": "int decodeFailCount = 0;"}, {"target_line_num": 217, "target_line_code": "int pos = start;"}, {"target_line_num": 218, "target_line_code": "int end = start + len;"}, {"target_line_num": 220, "target_line_code": "while(pos < end) {"}, {"target_line_num": 221, "target_line_code": "parameterCount ++;"}, {"target_line_num": 223, "target_line_code": "if (limit > -1 && parameterCount >= limit) {"}, {"target_line_num": 224, "target_line_code": "log.warn(sm.getString(\"parameters.maxCountFail\","}, {"target_line_num": 225, "target_line_code": "Integer.valueOf(limit)));"}, {"target_line_num": 226, "target_line_code": "break;"}, {"target_line_num": 228, "target_line_code": "int nameStart = pos;"}, {"target_line_num": 229, "target_line_code": "int nameEnd = -1;"}, {"target_line_num": 230, "target_line_code": "int valueStart = -1;"}, {"target_line_num": 231, "target_line_code": "int valueEnd = -1;"}, {"target_line_num": 233, "target_line_code": "boolean parsingName = true;"}, {"target_line_num": 234, "target_line_code": "boolean decodeName = false;"}, {"target_line_num": 235, "target_line_code": "boolean decodeValue = false;"}, {"target_line_num": 236, "target_line_code": "boolean parameterComplete = false;"}, {"target_line_num": 238, "target_line_code": "do {"}, {"target_line_num": 239, "target_line_code": "switch(bytes[pos]) {"}, {"target_line_num": 240, "target_line_code": "case '=':"}, {"target_line_num": 241, "target_line_code": "if (parsingName) {"}, {"target_line_num": 243, "target_line_code": "nameEnd = pos;"}, {"target_line_num": 244, "target_line_code": "parsingName = false;"}, {"target_line_num": 245, "target_line_code": "valueStart = ++pos;"}, {"target_line_num": 246, "target_line_code": "} else {"}, {"target_line_num": 248, "target_line_code": "pos++;"}, {"target_line_num": 250, "target_line_code": "break;"}, {"target_line_num": 251, "target_line_code": "case '&':"}, {"target_line_num": 252, "target_line_code": "if (parsingName) {"}, {"target_line_num": 254, "target_line_code": "nameEnd = pos;"}, {"target_line_num": 255, "target_line_code": "} else {"}, {"target_line_num": 257, "target_line_code": "valueEnd  = pos;"}, {"target_line_num": 259, "target_line_code": "parameterComplete = true;"}, {"target_line_num": 260, "target_line_code": "pos++;"}, {"target_line_num": 261, "target_line_code": "break;"}, {"target_line_num": 262, "target_line_code": "case '%':"}, {"target_line_num": 264, "target_line_code": "if (parsingName) {"}, {"target_line_num": 265, "target_line_code": "decodeName = true;"}, {"target_line_num": 266, "target_line_code": "} else {"}, {"target_line_num": 267, "target_line_code": "decodeValue = true;"}, {"target_line_num": 269, "target_line_code": "pos ++;"}, {"target_line_num": 270, "target_line_code": "break;"}, {"target_line_num": 271, "target_line_code": "default:"}, {"target_line_num": 272, "target_line_code": "pos ++;"}, {"target_line_num": 273, "target_line_code": "break;"}, {"target_line_num": 275, "target_line_code": "} while (!parameterComplete && pos < end);"}, {"target_line_num": 277, "target_line_code": "if (pos == end) {"}, {"target_line_num": 278, "target_line_code": "if (nameEnd == -1) {"}, {"target_line_num": 279, "target_line_code": "nameEnd = pos;"}, {"target_line_num": 280, "target_line_code": "} else if (valueStart > -1 && valueEnd == -1){"}, {"target_line_num": 281, "target_line_code": "valueEnd = pos;"}, {"target_line_num": 285, "target_line_code": "if (log.isDebugEnabled() && valueStart == -1) {"}, {"target_line_num": 286, "target_line_code": "log.debug(sm.getString(\"parameters.noequal\","}, {"target_line_num": 287, "target_line_code": "Integer.valueOf(nameStart), Integer.valueOf(nameEnd),"}, {"target_line_num": 288, "target_line_code": "new String(bytes, nameStart, nameEnd-nameStart,"}, {"target_line_num": 289, "target_line_code": "DEFAULT_CHARSET)));"}, {"target_line_num": 292, "target_line_code": "if (nameEnd <= nameStart ) {"}, {"target_line_num": 294, "target_line_code": "String extract;"}, {"target_line_num": 295, "target_line_code": "if (valueEnd >= nameStart) {"}, {"target_line_num": 296, "target_line_code": "extract = new String(bytes, nameStart,"}, {"target_line_num": 297, "target_line_code": "valueEnd - nameStart, DEFAULT_CHARSET);"}, {"target_line_num": 298, "target_line_code": "log.info(sm.getString(\"parameters.invalidChunk\","}, {"target_line_num": 299, "target_line_code": "Integer.valueOf(nameStart),"}, {"target_line_num": 300, "target_line_code": "Integer.valueOf(valueEnd),"}, {"target_line_num": 301, "target_line_code": "extract));"}, {"target_line_num": 302, "target_line_code": "} else {"}, {"target_line_num": 303, "target_line_code": "log.info(sm.getString(\"parameters.invalidChunk\","}, {"target_line_num": 304, "target_line_code": "Integer.valueOf(nameStart),"}, {"target_line_num": 305, "target_line_code": "Integer.valueOf(nameEnd),"}, {"target_line_num": 306, "target_line_code": "null));"}, {"target_line_num": 313, "target_line_code": "tmpName.setBytes(bytes, nameStart, nameEnd - nameStart);"}, {"target_line_num": 314, "target_line_code": "tmpValue.setBytes(bytes, valueStart, valueEnd - valueStart);"}, {"target_line_num": 321, "target_line_code": "origName.append(bytes, nameStart, nameEnd - nameStart);"}, {"target_line_num": 322, "target_line_code": "origValue.append(bytes, valueStart, valueEnd - valueStart);"}, {"target_line_num": 325, "target_line_code": "log.error(sm.getString(\"paramerers.copyFail\"), ioe);"}, {"target_line_num": 330, "target_line_code": "String name;"}, {"target_line_num": 331, "target_line_code": "String value;"}, {"target_line_num": 333, "target_line_code": "if (decodeName) {"}, {"target_line_num": 334, "target_line_code": "name = urlDecode(tmpName, charset);"}, {"target_line_num": 335, "target_line_code": "} else {"}, {"target_line_num": 336, "target_line_code": "name = tmpName.toString();"}, {"target_line_num": 339, "target_line_code": "if (decodeValue) {"}, {"target_line_num": 340, "target_line_code": "value = urlDecode(tmpValue, charset);"}, {"target_line_num": 341, "target_line_code": "} else {"}, {"target_line_num": 342, "target_line_code": "value = tmpValue.toString();"}, {"target_line_num": 345, "target_line_code": "addParam(name, value);"}, {"target_line_num": 347, "target_line_code": "decodeFailCount++;"}, {"target_line_num": 348, "target_line_code": "if (decodeFailCount == 1 || log.isDebugEnabled()) {"}, {"target_line_num": 344, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 350, "target_line_code": "log.debug(sm.getString(\"parameters.decodeFail.debug\","}, {"target_line_num": 351, "target_line_code": "origName.toString(), origValue.toString()), e);"}, {"target_line_num": 352, "target_line_code": "} else if (log.isInfoEnabled()) {"}, {"target_line_num": 353, "target_line_code": "log.info(sm.getString(\"parameters.decodeFail.info\","}, {"target_line_num": 354, "target_line_code": "tmpName.toString(), tmpValue.toString()), e);"}, {"target_line_num": 368, "target_line_code": "if (decodeFailCount > 1 && !log.isDebugEnabled()) {"}, {"target_line_num": 369, "target_line_code": "log.info(sm.getString(\"parameters.multipleDecodingFail\","}, {"target_line_num": 370, "target_line_code": "Integer.valueOf(decodeFailCount)));"}, {"target_line_num": 374, "target_line_code": "private String urlDecode(ByteChunk bc, Charset charset)"}, {"target_line_num": 380, "target_line_code": "bc.setCharset(charset);"}, {"target_line_num": 381, "target_line_code": "return bc.toString();"}, {"target_line_num": 344, "target_line_code": "if (log.isDebugEnabled()) {"}], "removed_line": [{"source_line_num": 199, "source_line_code": "processParameters(bytes, start, len, encoding);"}, {"source_line_num": 202, "source_line_code": "public void processParameters( byte bytes[], int start, int len,"}, {"source_line_num": 203, "source_line_code": "String enc ) {"}, {"source_line_num": 204, "source_line_code": "int end=start+len;"}, {"source_line_num": 205, "source_line_code": "int pos=start;"}, {"source_line_num": 208, "source_line_code": "log.debug(\"Bytes: \" +"}, {"source_line_num": 209, "source_line_code": "new String(bytes, start, len, DEFAULT_CHARSET));"}, {"source_line_num": 212, "source_line_code": "do {"}, {"source_line_num": 213, "source_line_code": "boolean noEq=false;"}, {"source_line_num": 214, "source_line_code": "int valStart=-1;"}, {"source_line_num": 215, "source_line_code": "int valEnd=-1;"}, {"source_line_num": 217, "source_line_code": "int nameStart=pos;"}, {"source_line_num": 218, "source_line_code": "int nameEnd=ByteChunk.indexOf(bytes, nameStart, end, '=' );"}, {"source_line_num": 220, "source_line_code": "int nameEnd2=ByteChunk.indexOf(bytes, nameStart, end, '&' );"}, {"source_line_num": 221, "source_line_code": "if( (nameEnd2!=-1 ) &&"}, {"source_line_num": 222, "source_line_code": "( nameEnd==-1 || nameEnd > nameEnd2) ) {"}, {"source_line_num": 223, "source_line_code": "nameEnd=nameEnd2;"}, {"source_line_num": 224, "source_line_code": "noEq=true;"}, {"source_line_num": 225, "source_line_code": "valStart=nameEnd;"}, {"source_line_num": 226, "source_line_code": "valEnd=nameEnd;"}, {"source_line_num": 227, "source_line_code": "if(log.isDebugEnabled()) {"}, {"source_line_num": 228, "source_line_code": "log.debug(\"no equal \" + nameStart + \" \" + nameEnd + \" \" +"}, {"source_line_num": 229, "source_line_code": "new String(bytes, nameStart, nameEnd-nameStart,"}, {"source_line_num": 230, "source_line_code": "DEFAULT_CHARSET));"}, {"source_line_num": 233, "source_line_code": "if( nameEnd== -1 )"}, {"source_line_num": 234, "source_line_code": "nameEnd=end;"}, {"source_line_num": 236, "source_line_code": "if( ! noEq ) {"}, {"source_line_num": 237, "source_line_code": "valStart= (nameEnd < end) ? nameEnd+1 : end;"}, {"source_line_num": 238, "source_line_code": "valEnd=ByteChunk.indexOf(bytes, valStart, end, '&');"}, {"source_line_num": 239, "source_line_code": "if( valEnd== -1 ) valEnd = (valStart < end) ? end : valStart;"}, {"source_line_num": 242, "source_line_code": "pos=valEnd+1;"}, {"source_line_num": 244, "source_line_code": "if( nameEnd<=nameStart ) {"}, {"source_line_num": 246, "source_line_code": "StringBuilder msg = new StringBuilder(\"Parameters: Invalid chunk \");"}, {"source_line_num": 248, "source_line_code": "if (valEnd >= nameStart) {"}, {"source_line_num": 249, "source_line_code": "msg.append('\\'');"}, {"source_line_num": 250, "source_line_code": "msg.append(new String(bytes, nameStart,"}, {"source_line_num": 251, "source_line_code": "valEnd - nameStart, DEFAULT_CHARSET));"}, {"source_line_num": 252, "source_line_code": "msg.append(\"' \");"}, {"source_line_num": 254, "source_line_code": "msg.append(\"ignored.\");"}, {"source_line_num": 255, "source_line_code": "log.info(msg);"}, {"source_line_num": 260, "source_line_code": "tmpName.setBytes( bytes, nameStart, nameEnd-nameStart );"}, {"source_line_num": 261, "source_line_code": "tmpValue.setBytes( bytes, valStart, valEnd-valStart );"}, {"source_line_num": 268, "source_line_code": "origName.append(bytes, nameStart, nameEnd-nameStart);"}, {"source_line_num": 269, "source_line_code": "origValue.append(bytes, valStart, valEnd-valStart);"}, {"source_line_num": 272, "source_line_code": "log.error(\"Error copying parameters\", ioe);"}, {"source_line_num": 277, "source_line_code": "addParam( urlDecode(tmpName, enc), urlDecode(tmpValue, enc) );"}, {"source_line_num": 289, "source_line_code": "StringBuilder msg ="}, {"source_line_num": 290, "source_line_code": "new StringBuilder(\"Parameters: Character decoding failed.\");"}, {"source_line_num": 291, "source_line_code": "msg.append(\" Parameter '\");"}, {"source_line_num": 292, "source_line_code": "if (log.isDebugEnabled()) {"}, {"source_line_num": 293, "source_line_code": "msg.append(origName.toString());"}, {"source_line_num": 284, "source_line_code": "msg.append(\"' with value '\");"}, {"source_line_num": 295, "source_line_code": "msg.append(origValue.toString());"}, {"source_line_num": 296, "source_line_code": "msg.append(\"' has been ignored.\");"}, {"source_line_num": 297, "source_line_code": "log.debug(msg, e);"}, {"source_line_num": 298, "source_line_code": "} else if (log.isInfoEnabled()) {"}, {"source_line_num": 299, "source_line_code": "msg.append(tmpName.toString());"}, {"source_line_num": 300, "source_line_code": "msg.append(\"' with value '\");"}, {"source_line_num": 301, "source_line_code": "msg.append(tmpValue.toString());"}, {"source_line_num": 302, "source_line_code": "msg.append(\"' has been ignored. Note that the name and \");"}, {"source_line_num": 303, "source_line_code": "msg.append(\"value quoted here may be corrupted due to \");"}, {"source_line_num": 304, "source_line_code": "msg.append(\"the failed decoding. Use debug level logging \");"}, {"source_line_num": 305, "source_line_code": "msg.append(\"to see the original, non-corrupted values.\");"}, {"source_line_num": 306, "source_line_code": "log.info(msg);"}, {"source_line_num": 307, "source_line_code": "} while( pos<end );"}, {"source_line_num": 310, "source_line_code": "private String urlDecode(ByteChunk bc, String enc)"}, {"source_line_num": 316, "source_line_code": "String result = null;"}, {"source_line_num": 317, "source_line_code": "if (enc != null) {"}, {"source_line_num": 318, "source_line_code": "bc.setEncoding(enc);"}, {"source_line_num": 319, "source_line_code": "result = bc.toString();"}, {"source_line_num": 320, "source_line_code": "} else {"}, {"source_line_num": 321, "source_line_code": "CharChunk cc = tmpNameC;"}, {"source_line_num": 322, "source_line_code": "int length = bc.getLength();"}, {"source_line_num": 323, "source_line_code": "cc.allocate(length, -1);"}, {"source_line_num": 325, "source_line_code": "byte[] bbuf = bc.getBuffer();"}, {"source_line_num": 326, "source_line_code": "char[] cbuf = cc.getBuffer();"}, {"source_line_num": 327, "source_line_code": "int start = bc.getStart();"}, {"source_line_num": 328, "source_line_code": "for (int i = 0; i < length; i++) {"}, {"source_line_num": 329, "source_line_code": "cbuf[i] = (char) (bbuf[i + start] & 0xff);"}, {"source_line_num": 331, "source_line_code": "cc.setChars(cbuf, 0, length);"}, {"source_line_num": 332, "source_line_code": "result = cc.toString();"}, {"source_line_num": 333, "source_line_code": "cc.recycle();"}, {"source_line_num": 335, "source_line_code": "return result;"}, {"source_line_num": 199, "source_line_code": "processParameters(bytes, start, len, encoding);"}, {"source_line_num": 202, "source_line_code": "public void processParameters( byte bytes[], int start, int len,"}, {"source_line_num": 203, "source_line_code": "String enc ) {"}, {"source_line_num": 204, "source_line_code": "int end=start+len;"}, {"source_line_num": 205, "source_line_code": "int pos=start;"}, {"source_line_num": 208, "source_line_code": "log.debug(\"Bytes: \" +"}, {"source_line_num": 209, "source_line_code": "new String(bytes, start, len, DEFAULT_CHARSET));"}, {"source_line_num": 212, "source_line_code": "do {"}, {"source_line_num": 213, "source_line_code": "boolean noEq=false;"}, {"source_line_num": 214, "source_line_code": "int valStart=-1;"}, {"source_line_num": 215, "source_line_code": "int valEnd=-1;"}, {"source_line_num": 217, "source_line_code": "int nameStart=pos;"}, {"source_line_num": 218, "source_line_code": "int nameEnd=ByteChunk.indexOf(bytes, nameStart, end, '=' );"}, {"source_line_num": 220, "source_line_code": "int nameEnd2=ByteChunk.indexOf(bytes, nameStart, end, '&' );"}, {"source_line_num": 221, "source_line_code": "if( (nameEnd2!=-1 ) &&"}, {"source_line_num": 222, "source_line_code": "( nameEnd==-1 || nameEnd > nameEnd2) ) {"}, {"source_line_num": 223, "source_line_code": "nameEnd=nameEnd2;"}, {"source_line_num": 224, "source_line_code": "noEq=true;"}, {"source_line_num": 225, "source_line_code": "valStart=nameEnd;"}, {"source_line_num": 226, "source_line_code": "valEnd=nameEnd;"}, {"source_line_num": 227, "source_line_code": "if(log.isDebugEnabled()) {"}, {"source_line_num": 228, "source_line_code": "log.debug(\"no equal \" + nameStart + \" \" + nameEnd + \" \" +"}, {"source_line_num": 229, "source_line_code": "new String(bytes, nameStart, nameEnd-nameStart,"}, {"source_line_num": 230, "source_line_code": "DEFAULT_CHARSET));"}, {"source_line_num": 233, "source_line_code": "if( nameEnd== -1 )"}, {"source_line_num": 234, "source_line_code": "nameEnd=end;"}, {"source_line_num": 236, "source_line_code": "if( ! noEq ) {"}, {"source_line_num": 237, "source_line_code": "valStart= (nameEnd < end) ? nameEnd+1 : end;"}, {"source_line_num": 238, "source_line_code": "valEnd=ByteChunk.indexOf(bytes, valStart, end, '&');"}, {"source_line_num": 239, "source_line_code": "if( valEnd== -1 ) valEnd = (valStart < end) ? end : valStart;"}, {"source_line_num": 242, "source_line_code": "pos=valEnd+1;"}, {"source_line_num": 244, "source_line_code": "if( nameEnd<=nameStart ) {"}, {"source_line_num": 246, "source_line_code": "StringBuilder msg = new StringBuilder(\"Parameters: Invalid chunk \");"}, {"source_line_num": 248, "source_line_code": "if (valEnd >= nameStart) {"}, {"source_line_num": 249, "source_line_code": "msg.append('\\'');"}, {"source_line_num": 250, "source_line_code": "msg.append(new String(bytes, nameStart,"}, {"source_line_num": 251, "source_line_code": "valEnd - nameStart, DEFAULT_CHARSET));"}, {"source_line_num": 252, "source_line_code": "msg.append(\"' \");"}, {"source_line_num": 254, "source_line_code": "msg.append(\"ignored.\");"}, {"source_line_num": 261, "source_line_code": "log.info(msg);"}, {"source_line_num": 260, "source_line_code": "tmpName.setBytes( bytes, nameStart, nameEnd-nameStart );"}, {"source_line_num": 261, "source_line_code": "tmpValue.setBytes( bytes, valStart, valEnd-valStart );"}, {"source_line_num": 268, "source_line_code": "origName.append(bytes, nameStart, nameEnd-nameStart);"}, {"source_line_num": 269, "source_line_code": "origValue.append(bytes, valStart, valEnd-valStart);"}, {"source_line_num": 272, "source_line_code": "log.error(\"Error copying parameters\", ioe);"}, {"source_line_num": 277, "source_line_code": "addParam( urlDecode(tmpName, enc), urlDecode(tmpValue, enc) );"}, {"source_line_num": 294, "source_line_code": "msg.append(\"' with value '\");"}, {"source_line_num": 307, "source_line_code": "} while( pos<end );"}, {"source_line_num": 310, "source_line_code": "private String urlDecode(ByteChunk bc, String enc)"}, {"source_line_num": 316, "source_line_code": "String result = null;"}, {"source_line_num": 317, "source_line_code": "if (enc != null) {"}, {"source_line_num": 318, "source_line_code": "bc.setEncoding(enc);"}, {"source_line_num": 319, "source_line_code": "result = bc.toString();"}, {"source_line_num": 320, "source_line_code": "} else {"}, {"source_line_num": 321, "source_line_code": "CharChunk cc = tmpNameC;"}, {"source_line_num": 322, "source_line_code": "int length = bc.getLength();"}, {"source_line_num": 323, "source_line_code": "cc.allocate(length, -1);"}, {"source_line_num": 325, "source_line_code": "byte[] bbuf = bc.getBuffer();"}, {"source_line_num": 326, "source_line_code": "char[] cbuf = cc.getBuffer();"}, {"source_line_num": 327, "source_line_code": "int start = bc.getStart();"}, {"source_line_num": 328, "source_line_code": "for (int i = 0; i < length; i++) {"}, {"source_line_num": 329, "source_line_code": "cbuf[i] = (char) (bbuf[i + start] & 0xff);"}, {"source_line_num": 331, "source_line_code": "cc.setChars(cbuf, 0, length);"}, {"source_line_num": 332, "source_line_code": "result = cc.toString();"}, {"source_line_num": 333, "source_line_code": "cc.recycle();"}, {"source_line_num": 335, "source_line_code": "return result;"}], "filename": "archive/tc7.0.x/trunk/java/org/apache/tomcat/util/http/Parameters.java", "patch_func": "no", "diff_file": "CVE-2012-0022_1189899.diff", "patch_tag": "7.0.23", "source_tag": "7.0.22"}]