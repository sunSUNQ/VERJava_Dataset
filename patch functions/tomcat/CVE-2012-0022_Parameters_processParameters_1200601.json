[{"cve_id":"CVE-2012-0022", 
	"added_line": [
		{"target_line_num": 221, "target_line_code": "Charset charset) {"}, 
		{"target_line_num": 225, "target_line_code": "log.debug(sm.getString(\"parameters.bytes\","}, 
		{"target_line_num": 226, "target_line_code": "new String(bytes, start, len, DEFAULT_CHARSET.name())));"}, 
		{"target_line_num": 227, "target_line_code": "} catch (UnsupportedEncodingException uee) {"}, 
		{"target_line_num": 232, "target_line_code": "int decodeFailCount = 0;"}, 
		{"target_line_num": 234, "target_line_code": "int pos = start;"}, 
		{"target_line_num": 235, "target_line_code": "int end = start + len;"}, 
		{"target_line_num": 237, "target_line_code": "while(pos < end) {"}, 
		{"target_line_num": 238, "target_line_code": "parameterCount ++;"}, 
		{"target_line_num": 240, "target_line_code": "if (limit > -1 && parameterCount >= limit) {"}, 
		{"target_line_num": 241, "target_line_code": "parseFailed = true;"}, 
		{"target_line_num": 242, "target_line_code": "log.warn(sm.getString(\"parameters.maxCountFail\","}, 
		{"target_line_num": 243, "target_line_code": "Integer.valueOf(limit)));"}, 
		{"target_line_num": 244, "target_line_code": "break;"}, 
		{"target_line_num": 246, "target_line_code": "int nameStart = pos;"}, 
		{"target_line_num": 247, "target_line_code": "int nameEnd = -1;"}, 
		{"target_line_num": 248, "target_line_code": "int valueStart = -1;"}, 
		{"target_line_num": 249, "target_line_code": "int valueEnd = -1;"}, 
		{"target_line_num": 251, "target_line_code": "boolean parsingName = true;"}, 
		{"target_line_num": 252, "target_line_code": "boolean decodeName = false;"}, 
		{"target_line_num": 253, "target_line_code": "boolean decodeValue = false;"}, 
		{"target_line_num": 254, "target_line_code": "boolean parameterComplete = false;"}, 
		{"target_line_num": 256, "target_line_code": "do {"}, 
		{"target_line_num": 257, "target_line_code": "switch(bytes[pos]) {"}, 
		{"target_line_num": 258, "target_line_code": "case '=':"}, 
		{"target_line_num": 259, "target_line_code": "if (parsingName) {"}, 
		{"target_line_num": 261, "target_line_code": "nameEnd = pos;"}, 
		{"target_line_num": 262, "target_line_code": "parsingName = false;"}, 
		{"target_line_num": 263, "target_line_code": "valueStart = ++pos;"}, 
		{"target_line_num": 264, "target_line_code": "} else {"}, 
		{"target_line_num": 266, "target_line_code": "pos++;"}, 
		{"target_line_num": 268, "target_line_code": "break;"}, 
		{"target_line_num": 269, "target_line_code": "case '&':"}, 
		{"target_line_num": 270, "target_line_code": "if (parsingName) {"}, 
		{"target_line_num": 272, "target_line_code": "nameEnd = pos;"}, 
		{"target_line_num": 264, "target_line_code": "} else {"}, 
		{"target_line_num": 275, "target_line_code": "valueEnd  = pos;"}, 
		{"target_line_num": 277, "target_line_code": "parameterComplete = true;"}, 
		{"target_line_num": 278, "target_line_code": "pos++;"}, 
		{"target_line_num": 279, "target_line_code": "break;"}, 
		{"target_line_num": 280, "target_line_code": "case '%':"}, 
		{"target_line_num": 283, "target_line_code": "if (parsingName) {"}, 
		{"target_line_num": 284, "target_line_code": "decodeName = true;"}, 
		{"target_line_num": 285, "target_line_code": "} else {"}, 
		{"target_line_num": 286, "target_line_code": "decodeValue = true;"}, 
		{"target_line_num": 288, "target_line_code": "pos ++;"}, 
		{"target_line_num": 289, "target_line_code": "break;"}, {"target_line_num": 290, "target_line_code": "default:"}, {"target_line_num": 288, "target_line_code": "pos ++;"}, {"target_line_num": 289, "target_line_code": "break;"}, {"target_line_num": 294, "target_line_code": "} while (!parameterComplete && pos < end);"}, {"target_line_num": 296, "target_line_code": "if (pos == end) {"}, {"target_line_num": 297, "target_line_code": "if (nameEnd == -1) {"}, {"target_line_num": 298, "target_line_code": "nameEnd = pos;"}, {"target_line_num": 299, "target_line_code": "} else if (valueStart > -1 && valueEnd == -1){"}, {"target_line_num": 300, "target_line_code": "valueEnd = pos;"}, {"target_line_num": 304, "target_line_code": "if (log.isDebugEnabled() && valueStart == -1) {"}, {"target_line_num": 305, "target_line_code": "try {"}, {"target_line_num": 306, "target_line_code": "log.debug(sm.getString(\"parameters.noequal\","}, {"target_line_num": 307, "target_line_code": "Integer.valueOf(nameStart),"}, {"target_line_num": 308, "target_line_code": "Integer.valueOf(nameEnd),"}, {"target_line_num": 309, "target_line_code": "new String(bytes, nameStart, nameEnd-nameStart,"}, {"target_line_num": 310, "target_line_code": "DEFAULT_CHARSET.name())));"}, {"target_line_num": 311, "target_line_code": "} catch (UnsupportedEncodingException uee) {"}, {"target_line_num": 316, "target_line_code": "if (nameEnd <= nameStart ) {"}, {"target_line_num": 318, "target_line_code": "if (valueEnd >= nameStart && log.isDebugEnabled()) {"}, {"target_line_num": 319, "target_line_code": "String extract = null;"}, {"target_line_num": 321, "target_line_code": "extract = new String(bytes, nameStart,"}, {"target_line_num": 322, "target_line_code": "valueEnd - nameStart,"}, {"target_line_num": 323, "target_line_code": "DEFAULT_CHARSET.name());"}, {"target_line_num": 324, "target_line_code": "} catch (UnsupportedEncodingException uee) {"}, {"target_line_num": 327, "target_line_code": "log.info(sm.getString(\"parameters.invalidChunk\","}, {"target_line_num": 328, "target_line_code": "Integer.valueOf(nameStart),"}, {"target_line_num": 329, "target_line_code": "Integer.valueOf(valueEnd),"}, {"target_line_num": 330, "target_line_code": "extract));"}, {"target_line_num": 331, "target_line_code": "} else {"}, {"target_line_num": 327, "target_line_code": "log.info(sm.getString(\"parameters.invalidChunk\","}, {"target_line_num": 328, "target_line_code": "Integer.valueOf(nameStart),"}, {"target_line_num": 334, "target_line_code": "Integer.valueOf(nameEnd),"}, {"target_line_num": 335, "target_line_code": "null));"}, {"target_line_num": 338, "target_line_code": "parseFailed = true;"}, {"target_line_num": 343, "target_line_code": "tmpName.setBytes(bytes, nameStart, nameEnd - nameStart);"}, {"target_line_num": 344, "target_line_code": "tmpValue.setBytes(bytes, valueStart, valueEnd - valueStart);"}, {"target_line_num": 351, "target_line_code": "origName.append(bytes, nameStart, nameEnd - nameStart);"}, {"target_line_num": 352, "target_line_code": "origValue.append(bytes, valueStart, valueEnd - valueStart);"}, {"target_line_num": 355, "target_line_code": "log.error(sm.getString(\"parameters.copyFail\"), ioe);"}, {"target_line_num": 360, "target_line_code": "String name;"}, {"target_line_num": 361, "target_line_code": "String value;"}, {"target_line_num": 363, "target_line_code": "if (decodeName) {"}, {"target_line_num": 364, "target_line_code": "urlDecode(tmpName);"}, {"target_line_num": 366, "target_line_code": "tmpName.setCharset(charset);"}, {"target_line_num": 367, "target_line_code": "name = tmpName.toString();"}, {"target_line_num": 369, "target_line_code": "if (decodeValue) {"}, {"target_line_num": 370, "target_line_code": "urlDecode(tmpValue);"}, {"target_line_num": 372, "target_line_code": "tmpValue.setCharset(charset);"}, {"target_line_num": 373, "target_line_code": "value = tmpValue.toString();"}, {"target_line_num": 375, "target_line_code": "addParam(name, value);"}, {"target_line_num": 377, "target_line_code": "parseFailed = true;"}, {"target_line_num": 378, "target_line_code": "decodeFailCount++;"}, {"target_line_num": 379, "target_line_code": "if (decodeFailCount == 1 || log.isDebugEnabled()) {"}, {"target_line_num": 380, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 381, "target_line_code": "log.debug(sm.getString(\"parameters.decodeFail.debug\","}, {"target_line_num": 382, "target_line_code": "origName.toString(), origValue.toString()), e);"}, {"target_line_num": 383, "target_line_code": "} else if (log.isInfoEnabled()) {"}, {"target_line_num": 384, "target_line_code": "log.info(sm.getString(\"parameters.decodeFail.info\","}, {"target_line_num": 385, "target_line_code": "tmpName.toString(), tmpValue.toString()), e);"}, {"target_line_num": 399, "target_line_code": "if (decodeFailCount > 1 && !log.isDebugEnabled()) {"}, {"target_line_num": 400, "target_line_code": "log.info(sm.getString(\"parameters.multipleDecodingFail\","}, 
		{"target_line_num": 401, "target_line_code": "Integer.valueOf(decodeFailCount)));"}], 
"removed_line": [
	{"source_line_num": 354, "source_line_code": "String enc ) {"}, 
	{"source_line_num": 355, "source_line_code": "int end=start+len;"}, 
	{"source_line_num": 356, "source_line_code": "int pos=start;"}, 
	{"source_line_num": 360, "source_line_code": "log.debug(\"Bytes: \" +"}, 
	{"source_line_num": 361, "source_line_code": "new String(bytes, start, len, DEFAULT_ENCODING));"}, 
	{"source_line_num": 362, "source_line_code": "} catch (UnsupportedEncodingException e) {"}, 
	{"source_line_num": 364, "source_line_code": "log.error(\"Unable to convert bytes\", e);"}, 
	{"source_line_num": 368, "source_line_code": "do {"}, 
	{"source_line_num": 369, "source_line_code": "boolean noEq=false;"}, 
	{"source_line_num": 370, "source_line_code": "int valStart=-1;"}, 
	{"source_line_num": 371, "source_line_code": "int valEnd=-1;"}, 
	{"source_line_num": 373, "source_line_code": "int nameStart=pos;"}, 
	{"source_line_num": 374, "source_line_code": "int nameEnd=ByteChunk.indexOf(bytes, nameStart, end, '=' );"}, 
	{"source_line_num": 376, "source_line_code": "int nameEnd2=ByteChunk.indexOf(bytes, nameStart, end, '&' );"}, 
	{"source_line_num": 377, "source_line_code": "if( (nameEnd2!=-1 ) &&"}, 
	{"source_line_num": 378, "source_line_code": "( nameEnd==-1 || nameEnd > nameEnd2) ) {"}, 
	{"source_line_num": 379, "source_line_code": "nameEnd=nameEnd2;"}, 
	{"source_line_num": 380, "source_line_code": "noEq=true;"}, 
	{"source_line_num": 381, "source_line_code": "valStart=nameEnd;"}, 
	{"source_line_num": 382, "source_line_code": "valEnd=nameEnd;"}, 
	{"source_line_num": 383, "source_line_code": "if(log.isDebugEnabled()) {"}, 
	{"source_line_num": 384, "source_line_code": "try {"}, 
	{"source_line_num": 385, "source_line_code": "log.debug(\"no equal \" + nameStart + \" \" + nameEnd + \" \" +"}, 
	{"source_line_num": 386, "source_line_code": "new String(bytes, nameStart, nameEnd-nameStart,"}, 
	{"source_line_num": 387, "source_line_code": "DEFAULT_ENCODING) );"}, 
	{"source_line_num": 388, "source_line_code": "} catch (UnsupportedEncodingException e) {"}, 
	{"source_line_num": 390, "source_line_code": "log.error(\"Unable to convert bytes\", e);"}, 
	{"source_line_num": 394, "source_line_code": "if( nameEnd== -1 )"}, 
	{"source_line_num": 395, "source_line_code": "nameEnd=end;"}, 
	{"source_line_num": 397, "source_line_code": "if( ! noEq ) {"}, 
	{"source_line_num": 398, "source_line_code": "valStart= (nameEnd < end) ? nameEnd+1 : end;"}, 
	{"source_line_num": 399, "source_line_code": "valEnd=ByteChunk.indexOf(bytes, valStart, end, '&');"},
	{"source_line_num": 400, "source_line_code": "if( valEnd== -1 ) valEnd = (valStart < end) ? end : valStart;"}, 
	{"source_line_num": 403, "source_line_code": "pos=valEnd+1;"}, 
	{"source_line_num": 405, "source_line_code": "if( nameEnd<=nameStart ) {"}, 
	{"source_line_num": 407, "source_line_code": "StringBuilder msg = new StringBuilder(\"Parameters: Invalid chunk \");"}, 
	{"source_line_num": 409, "source_line_code": "if (valEnd >= nameStart) {"}, 
	{"source_line_num": 410, "source_line_code": "msg.append('\\'');"}, 
	{"source_line_num": 412, "source_line_code": "msg.append(new String(bytes, nameStart,"}, 
	{"source_line_num": 413, "source_line_code": "valEnd - nameStart, DEFAULT_ENCODING));"}, 
	{"source_line_num": 414, "source_line_code": "} catch (UnsupportedEncodingException e) {"}, 
	{"source_line_num": 416, "source_line_code": "log.error(\"Unable to convert bytes\", e);"}, 
	{"source_line_num": 418, "source_line_code": "msg.append(\"' \");"}, 
	{"source_line_num": 420, "source_line_code": "msg.append(\"ignored.\");"}, 
	{"source_line_num": 421, "source_line_code": "log.info(msg);"}, 
	{"source_line_num": 426, "source_line_code": "tmpName.setBytes( bytes, nameStart, nameEnd-nameStart );"}, 
	{"source_line_num": 427, "source_line_code": "tmpValue.setBytes( bytes, valStart, valEnd-valStart );"}, 
	{"source_line_num": 434, "source_line_code": "origName.append(bytes, nameStart, nameEnd-nameStart);"}, 
	{"source_line_num": 435, "source_line_code": "origValue.append(bytes, valStart, valEnd-valStart);"}, 
	{"source_line_num": 438, "source_line_code": "log.error(\"Error copying parameters\", ioe);"}, 
	{"source_line_num": 443, "source_line_code": "addParam( urlDecode(tmpName, enc), urlDecode(tmpValue, enc) );"}, 
	{"source_line_num": 455, "source_line_code": "StringBuilder msg ="}, 
	{"source_line_num": 456, "source_line_code": "new StringBuilder(\"Parameters: Character decoding failed.\");"}, 
	{"source_line_num": 457, "source_line_code": "msg.append(\" Parameter '\");"}, 
	{"source_line_num": 458, "source_line_code": "if (log.isDebugEnabled()) {"}, 
	{"source_line_num": 459, "source_line_code": "msg.append(origName.toString());"}, 
	{"source_line_num": 450, "source_line_code": "msg.append(\"' with value '\");"}, 
	{"source_line_num": 461, "source_line_code": "msg.append(origValue.toString());"}, 
	{"source_line_num": 462, "source_line_code": "msg.append(\"' has been ignored.\");"}, 
	{"source_line_num": 463, "source_line_code": "log.debug(msg, e);"}, 
	{"source_line_num": 464, "source_line_code": "} else if (log.isInfoEnabled()) {"}, 
	{"source_line_num": 465, "source_line_code": "msg.append(tmpName.toString());"}, 
	{"source_line_num": 466, "source_line_code": "msg.append(\"' with value '\");"}, 
	{"source_line_num": 467, "source_line_code": "msg.append(tmpValue.toString());"}, 
	{"source_line_num": 468, "source_line_code": "msg.append(\"' has been ignored. Note that the name and \");"}, 
	{"source_line_num": 469, "source_line_code": "msg.append(\"value quoted here may corrupted due to the \");"}, 
	{"source_line_num": 470, "source_line_code": "msg.append(\"failed decoding. Use debug level logging to \");"}, 
	{"source_line_num": 471, "source_line_code": "msg.append(\"see the original, non-corrupted values.\");"}, 
	{"source_line_num": 472, "source_line_code": "log.info(msg);"}, 
	{"source_line_num": 473, "source_line_code": "} while( pos<end );"}], 
	"filename": "archive/tc6.0.x/trunk/java/org/apache/tomcat/util/http/Parameters.java", 
"patch_func": "no", 
"diff_file": "CVE-2012-0022_1200601.diff", 
"patch_tag": "6.0.35", "source_tag": "6.0.33"}]