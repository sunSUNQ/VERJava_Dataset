[{"cve_id": "struts", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "*  Licensed to the Apache Software Foundation (ASF) under one or more"}, {"target_line_num": 4, "target_line_code": "*  contributor license agreements.  See the NOTICE file distributed with"}, {"target_line_num": 5, "target_line_code": "*  this work for additional information regarding copyright ownership."}, {"target_line_num": 6, "target_line_code": "*  The ASF licenses this file to You under the Apache License, Version 2.0"}, {"target_line_num": 7, "target_line_code": "*  (the \"License\"); you may not use this file except in compliance with"}, {"target_line_num": 8, "target_line_code": "*  the License.  You may obtain a copy of the License at"}, {"target_line_num": 9, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "*"}, {"target_line_num": 12, "target_line_code": "*  Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 13, "target_line_code": "*  distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 14, "target_line_code": "*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 15, "target_line_code": "*  See the License for the specific language governing permissions and"}, {"target_line_num": 16, "target_line_code": "*  limitations under the License."}, {"target_line_num": 17, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "package org.apache.struts2.util.tomcat.buf;"}, {"target_line_num": 20, "target_line_code": "/**"}, {"target_line_num": 21, "target_line_code": "* Tables useful when converting byte arrays to and from strings of hexadecimal"}, {"target_line_num": 22, "target_line_code": "* digits."}, {"target_line_num": 23, "target_line_code": "* Code from Ajp11, from Apache's JServ."}, {"target_line_num": 24, "target_line_code": "*"}, {"target_line_num": 25, "target_line_code": "* @author Craig R. McClanahan"}, {"target_line_num": 26, "target_line_code": "*/"}, {"target_line_num": 27, "target_line_code": "public final class HexUtils {"}, {"target_line_num": 31, "target_line_code": "/**"}, {"target_line_num": 32, "target_line_code": "*  Table for HEX to DEC byte translation."}, {"target_line_num": 33, "target_line_code": "*/"}, {"target_line_num": 34, "target_line_code": "private static final int[] DEC = {"}, {"target_line_num": 35, "target_line_code": "00, 01, 02, 03, 04, 05, 06, 07,  8,  9, -1, -1, -1, -1, -1, -1,"}, {"target_line_num": 36, "target_line_code": "-1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,"}, {"target_line_num": 37, "target_line_code": "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"}, {"target_line_num": 38, "target_line_code": "-1, 10, 11, 12, 13, 14, 15,"}, {"target_line_num": 39, "target_line_code": "};"}, {"target_line_num": 42, "target_line_code": "/**"}, {"target_line_num": 43, "target_line_code": "* Table for DEC to HEX byte translation."}, {"target_line_num": 44, "target_line_code": "*/"}, {"target_line_num": 45, "target_line_code": "private static final byte[] HEX ="}, {"target_line_num": 46, "target_line_code": "{ (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5',"}, {"target_line_num": 47, "target_line_code": "(byte) '6', (byte) '7', (byte) '8', (byte) '9', (byte) 'a', (byte) 'b',"}, {"target_line_num": 48, "target_line_code": "(byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f' };"}, {"target_line_num": 51, "target_line_code": "/**"}, {"target_line_num": 52, "target_line_code": "* Table for byte to hex string translation."}, {"target_line_num": 53, "target_line_code": "*/"}, {"target_line_num": 54, "target_line_code": "private static final char[] hex = \"0123456789abcdef\".toCharArray();"}, {"target_line_num": 59, "target_line_code": "public static int getDec(int index) {"}, {"target_line_num": 61, "target_line_code": "try {"}, {"target_line_num": 62, "target_line_code": "return DEC[index - '0'];"}, {"target_line_num": 63, "target_line_code": "} catch (ArrayIndexOutOfBoundsException ex) {"}, {"target_line_num": 64, "target_line_code": "return -1;"}, {"target_line_num": 69, "target_line_code": "public static byte getHex(int index) {"}, {"target_line_num": 70, "target_line_code": "return HEX[index];"}, {"target_line_num": 74, "target_line_code": "public static String toHexString(byte[] bytes) {"}, {"target_line_num": 75, "target_line_code": "if (null == bytes) {"}, {"target_line_num": 76, "target_line_code": "return null;"}, {"target_line_num": 79, "target_line_code": "StringBuilder sb = new StringBuilder(bytes.length << 1);"}, {"target_line_num": 81, "target_line_code": "for(int i = 0; i < bytes.length; ++i) {"}, {"target_line_num": 82, "target_line_code": "sb.append(hex[(bytes[i] & 0xf0) >> 4])"}, {"target_line_num": 83, "target_line_code": ".append(hex[(bytes[i] & 0x0f)])"}, {"target_line_num": 84, "target_line_code": ";"}, {"target_line_num": 87, "target_line_code": "return sb.toString();"}, {"target_line_num": 91, "target_line_code": "public static byte[] fromHexString(String input) {"}, {"target_line_num": 92, "target_line_code": "if (input == null) {"}, {"target_line_num": 93, "target_line_code": "return null;"}, {"target_line_num": 96, "target_line_code": "if ((input.length() & 1) == 1) {"}, {"target_line_num": 98, "target_line_code": "throw new IllegalArgumentException(\"The input must consist of an even number of hex digits\");"}, {"target_line_num": 101, "target_line_code": "char[] inputChars = input.toCharArray();"}, {"target_line_num": 102, "target_line_code": "byte[] result = new byte[input.length() >> 1];"}, {"target_line_num": 103, "target_line_code": "for (int i = 0; i < result.length; i++) {"}, {"target_line_num": 104, "target_line_code": "int upperNibble = getDec(inputChars[2*i]);"}, {"target_line_num": 105, "target_line_code": "int lowerNibble =  getDec(inputChars[2*i + 1]);"}, {"target_line_num": 106, "target_line_code": "if (upperNibble < 0 || lowerNibble < 0) {"}, {"target_line_num": 108, "target_line_code": "throw new IllegalArgumentException(\"The input must consist only of hex digits\");"}, {"target_line_num": 110, "target_line_code": "result[i] = (byte) ((upperNibble << 4) + lowerNibble);"}, {"target_line_num": 112, "target_line_code": "return result;"}], "removed_line": [], "filename": "core/src/main/java/org/apache/struts2/util/tomcat/buf/HexUtils.java", "patch_func": "no", "diff_file": "struts_CVE-2016-4003_76f188406eb9f17a06afcb5f49f0c44d749da0d2.diff", "patch_tag": "STRUTS_6_0_0_RC1", "source_tag": "STRUTS_2_5_BETA3"}]