[{"cve_id": "struts", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "*  Licensed to the Apache Software Foundation (ASF) under one or more"}, {"target_line_num": 4, "target_line_code": "*  contributor license agreements.  See the NOTICE file distributed with"}, {"target_line_num": 5, "target_line_code": "*  this work for additional information regarding copyright ownership."}, {"target_line_num": 6, "target_line_code": "*  The ASF licenses this file to You under the Apache License, Version 2.0"}, {"target_line_num": 7, "target_line_code": "*  (the \"License\"); you may not use this file except in compliance with"}, {"target_line_num": 8, "target_line_code": "*  the License.  You may obtain a copy of the License at"}, {"target_line_num": 9, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "*"}, {"target_line_num": 12, "target_line_code": "*  Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 13, "target_line_code": "*  distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 14, "target_line_code": "*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 15, "target_line_code": "*  See the License for the specific language governing permissions and"}, {"target_line_num": 16, "target_line_code": "*  limitations under the License."}, {"target_line_num": 17, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "package org.apache.struts2.util.tomcat.buf;"}, {"target_line_num": 20, "target_line_code": "import java.io.IOException;"}, {"target_line_num": 21, "target_line_code": "import java.io.UnsupportedEncodingException;"}, {"target_line_num": 22, "target_line_code": "import java.nio.ByteBuffer;"}, {"target_line_num": 23, "target_line_code": "import java.nio.CharBuffer;"}, {"target_line_num": 24, "target_line_code": "import java.nio.charset.Charset;"}, {"target_line_num": 25, "target_line_code": "import java.nio.charset.CharsetDecoder;"}, {"target_line_num": 26, "target_line_code": "import java.nio.charset.CoderResult;"}, {"target_line_num": 27, "target_line_code": "import java.nio.charset.CodingErrorAction;"}, {"target_line_num": 28, "target_line_code": "import java.util.HashMap;"}, {"target_line_num": 29, "target_line_code": "import java.util.Locale;"}, {"target_line_num": 30, "target_line_code": "import java.util.Map;"}, {"target_line_num": 32, "target_line_code": "/**"}, {"target_line_num": 33, "target_line_code": "* NIO based character decoder."}, {"target_line_num": 34, "target_line_code": "*/"}, {"target_line_num": 35, "target_line_code": "public class B2CConverter {"}, {"target_line_num": 37, "target_line_code": "private static final Map<String, Charset> encodingToCharsetCache ="}, {"target_line_num": 38, "target_line_code": "new HashMap<String, Charset>();"}, {"target_line_num": 40, "target_line_code": "public static final Charset ISO_8859_1;"}, {"target_line_num": 41, "target_line_code": "public static final Charset UTF_8;"}, {"target_line_num": 44, "target_line_code": "protected static final int LEFTOVER_SIZE = 9;"}, {"target_line_num": 46, "target_line_code": "static {"}, {"target_line_num": 47, "target_line_code": "for (Charset charset: Charset.availableCharsets().values()) {"}, {"target_line_num": 48, "target_line_code": "encodingToCharsetCache.put("}, {"target_line_num": 49, "target_line_code": "charset.name().toLowerCase(Locale.ENGLISH), charset);"}, {"target_line_num": 50, "target_line_code": "for (String alias : charset.aliases()) {"}, {"target_line_num": 51, "target_line_code": "encodingToCharsetCache.put("}, {"target_line_num": 52, "target_line_code": "alias.toLowerCase(Locale.ENGLISH), charset);"}, {"target_line_num": 55, "target_line_code": "Charset iso88591 = null;"}, {"target_line_num": 56, "target_line_code": "Charset utf8 = null;"}, {"target_line_num": 57, "target_line_code": "try {"}, {"target_line_num": 58, "target_line_code": "iso88591 = getCharset(\"ISO-8859-1\");"}, {"target_line_num": 59, "target_line_code": "utf8 = getCharset(\"UTF-8\");"}, {"target_line_num": 60, "target_line_code": "} catch (UnsupportedEncodingException e) {"}, {"target_line_num": 62, "target_line_code": "e.printStackTrace();"}, {"target_line_num": 64, "target_line_code": "ISO_8859_1 = iso88591;"}, {"target_line_num": 65, "target_line_code": "UTF_8 = utf8;"}, {"target_line_num": 68, "target_line_code": "public static Charset getCharset(String enc)"}, {"target_line_num": 69, "target_line_code": "throws UnsupportedEncodingException {"}, {"target_line_num": 72, "target_line_code": "String lowerCaseEnc = enc.toLowerCase(Locale.ENGLISH);"}, {"target_line_num": 74, "target_line_code": "return getCharsetLower(lowerCaseEnc);"}, {"target_line_num": 77, "target_line_code": "/**"}, {"target_line_num": 78, "target_line_code": "* Only to be used when it is known that the encoding name is in lower case."}, {"target_line_num": 79, "target_line_code": "*/"}, {"target_line_num": 80, "target_line_code": "public static Charset getCharsetLower(String lowerCaseEnc)"}, {"target_line_num": 81, "target_line_code": "throws UnsupportedEncodingException {"}, {"target_line_num": 83, "target_line_code": "Charset charset = encodingToCharsetCache.get(lowerCaseEnc);"}, {"target_line_num": 85, "target_line_code": "if (charset == null) {"}, {"target_line_num": 87, "target_line_code": "throw new UnsupportedEncodingException(\"The character encoding \" + lowerCaseEnc + \" is not supported\");"}, {"target_line_num": 89, "target_line_code": "return charset;"}, {"target_line_num": 92, "target_line_code": "private final CharsetDecoder decoder;"}, {"target_line_num": 93, "target_line_code": "private ByteBuffer bb = null;"}, {"target_line_num": 94, "target_line_code": "private CharBuffer cb = null;"}, {"target_line_num": 96, "target_line_code": "/**"}, {"target_line_num": 97, "target_line_code": "* Leftover buffer used for incomplete characters."}, {"target_line_num": 98, "target_line_code": "*/"}, {"target_line_num": 99, "target_line_code": "private final ByteBuffer leftovers;"}, {"target_line_num": 101, "target_line_code": "public B2CConverter(String encoding) throws IOException {"}, {"target_line_num": 102, "target_line_code": "this(encoding, false);"}, {"target_line_num": 105, "target_line_code": "public B2CConverter(String encoding, boolean replaceOnError)"}, {"target_line_num": 106, "target_line_code": "throws IOException {"}, {"target_line_num": 107, "target_line_code": "byte[] left = new byte[LEFTOVER_SIZE];"}, {"target_line_num": 108, "target_line_code": "leftovers = ByteBuffer.wrap(left);"}, {"target_line_num": 109, "target_line_code": "CodingErrorAction action;"}, {"target_line_num": 110, "target_line_code": "if (replaceOnError) {"}, {"target_line_num": 111, "target_line_code": "action = CodingErrorAction.REPLACE;"}, {"target_line_num": 112, "target_line_code": "} else {"}, {"target_line_num": 113, "target_line_code": "action = CodingErrorAction.REPORT;"}, {"target_line_num": 115, "target_line_code": "Charset charset = getCharset(encoding);"}, {"target_line_num": 119, "target_line_code": "if (charset.equals(UTF_8)) {"}, {"target_line_num": 120, "target_line_code": "decoder = new Utf8Decoder();"}, {"target_line_num": 121, "target_line_code": "} else {"}, {"target_line_num": 122, "target_line_code": "decoder = charset.newDecoder();"}, {"target_line_num": 124, "target_line_code": "decoder.onMalformedInput(action);"}, {"target_line_num": 125, "target_line_code": "decoder.onUnmappableCharacter(action);"}, {"target_line_num": 128, "target_line_code": "/**"}, {"target_line_num": 129, "target_line_code": "* Reset the decoder state."}, {"target_line_num": 130, "target_line_code": "*/"}, {"target_line_num": 131, "target_line_code": "public void recycle() {"}, {"target_line_num": 132, "target_line_code": "decoder.reset();"}, {"target_line_num": 133, "target_line_code": "leftovers.position(0);"}, {"target_line_num": 136, "target_line_code": "/**"}, {"target_line_num": 137, "target_line_code": "* Convert the given bytes to characters."}, {"target_line_num": 138, "target_line_code": "*"}, {"target_line_num": 139, "target_line_code": "* @param bc byte input"}, {"target_line_num": 140, "target_line_code": "* @param cc char output"}, {"target_line_num": 141, "target_line_code": "* @param endOfInput    Is this all of the available data"}, {"target_line_num": 142, "target_line_code": "*/"}, {"target_line_num": 143, "target_line_code": "public void convert(ByteChunk bc, CharChunk cc, boolean endOfInput)"}, {"target_line_num": 144, "target_line_code": "throws IOException {"}, {"target_line_num": 145, "target_line_code": "if ((bb == null) || (bb.array() != bc.getBuffer())) {"}, {"target_line_num": 147, "target_line_code": "bb = ByteBuffer.wrap(bc.getBuffer(), bc.getStart(), bc.getLength());"}, {"target_line_num": 148, "target_line_code": "} else {"}, {"target_line_num": 150, "target_line_code": "bb.limit(bc.getEnd());"}, {"target_line_num": 151, "target_line_code": "bb.position(bc.getStart());"}, {"target_line_num": 153, "target_line_code": "if ((cb == null) || (cb.array() != cc.getBuffer())) {"}, {"target_line_num": 155, "target_line_code": "cb = CharBuffer.wrap(cc.getBuffer(), cc.getEnd(),"}, {"target_line_num": 156, "target_line_code": "cc.getBuffer().length - cc.getEnd());"}, {"target_line_num": 157, "target_line_code": "} else {"}, {"target_line_num": 159, "target_line_code": "cb.limit(cc.getBuffer().length);"}, {"target_line_num": 160, "target_line_code": "cb.position(cc.getEnd());"}, {"target_line_num": 162, "target_line_code": "CoderResult result = null;"}, {"target_line_num": 164, "target_line_code": "if (leftovers.position() > 0) {"}, {"target_line_num": 165, "target_line_code": "int pos = cb.position();"}, {"target_line_num": 167, "target_line_code": "do {"}, {"target_line_num": 168, "target_line_code": "leftovers.put(bc.substractB());"}, {"target_line_num": 169, "target_line_code": "leftovers.flip();"}, {"target_line_num": 170, "target_line_code": "result = decoder.decode(leftovers, cb, endOfInput);"}, {"target_line_num": 171, "target_line_code": "leftovers.position(leftovers.limit());"}, {"target_line_num": 172, "target_line_code": "leftovers.limit(leftovers.array().length);"}, {"target_line_num": 173, "target_line_code": "} while (result.isUnderflow() && (cb.position() == pos));"}, {"target_line_num": 174, "target_line_code": "if (result.isError() || result.isMalformed()) {"}, {"target_line_num": 175, "target_line_code": "result.throwException();"}, {"target_line_num": 177, "target_line_code": "bb.position(bc.getStart());"}, {"target_line_num": 178, "target_line_code": "leftovers.position(0);"}, {"target_line_num": 182, "target_line_code": "result = decoder.decode(bb, cb, endOfInput);"}, {"target_line_num": 183, "target_line_code": "if (result.isError() || result.isMalformed()) {"}, {"target_line_num": 184, "target_line_code": "result.throwException();"}, {"target_line_num": 185, "target_line_code": "} else if (result.isOverflow()) {"}, {"target_line_num": 188, "target_line_code": "bc.setOffset(bb.position());"}, {"target_line_num": 189, "target_line_code": "cc.setEnd(cb.position());"}, {"target_line_num": 190, "target_line_code": "} else if (result.isUnderflow()) {"}, {"target_line_num": 192, "target_line_code": "bc.setOffset(bb.position());"}, {"target_line_num": 193, "target_line_code": "cc.setEnd(cb.position());"}, {"target_line_num": 195, "target_line_code": "if (bc.getLength() > 0) {"}, {"target_line_num": 196, "target_line_code": "leftovers.limit(leftovers.array().length);"}, {"target_line_num": 197, "target_line_code": "leftovers.position(bc.getLength());"}, {"target_line_num": 198, "target_line_code": "bc.substract(leftovers.array(), 0, bc.getLength());"}], "removed_line": [], "filename": "core/src/main/java/org/apache/struts2/util/tomcat/buf/B2CConverter.java", "patch_func": "no", "diff_file": "struts_CVE-2016-4003_76f188406eb9f17a06afcb5f49f0c44d749da0d2.diff", "patch_tag": "STRUTS_6_0_0_RC1", "source_tag": "STRUTS_2_5_BETA3"}]