[{"cve_id": "struts", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "*  Licensed to the Apache Software Foundation (ASF) under one or more"}, {"target_line_num": 4, "target_line_code": "*  contributor license agreements.  See the NOTICE file distributed with"}, {"target_line_num": 5, "target_line_code": "*  this work for additional information regarding copyright ownership."}, {"target_line_num": 6, "target_line_code": "*  The ASF licenses this file to You under the Apache License, Version 2.0"}, {"target_line_num": 7, "target_line_code": "*  (the \"License\"); you may not use this file except in compliance with"}, {"target_line_num": 8, "target_line_code": "*  the License.  You may obtain a copy of the License at"}, {"target_line_num": 9, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "*"}, {"target_line_num": 12, "target_line_code": "*  Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 13, "target_line_code": "*  distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 14, "target_line_code": "*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 15, "target_line_code": "*  See the License for the specific language governing permissions and"}, {"target_line_num": 16, "target_line_code": "*  limitations under the License."}, {"target_line_num": 17, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "package org.apache.struts2.util.tomcat.buf;"}, {"target_line_num": 20, "target_line_code": "import java.io.IOException;"}, {"target_line_num": 21, "target_line_code": "import java.io.Serializable;"}, {"target_line_num": 22, "target_line_code": "import java.nio.ByteBuffer;"}, {"target_line_num": 23, "target_line_code": "import java.nio.charset.Charset;"}, {"target_line_num": 24, "target_line_code": "import java.util.Locale;"}, {"target_line_num": 26, "target_line_code": "/**"}, {"target_line_num": 27, "target_line_code": "* This class is used to represent a subarray of bytes in an HTTP message."}, {"target_line_num": 28, "target_line_code": "* It represents all request/response elements. The byte/char conversions are"}, {"target_line_num": 29, "target_line_code": "* delayed and cached. Everything is recyclable."}, {"target_line_num": 30, "target_line_code": "*"}, {"target_line_num": 31, "target_line_code": "* The object can represent a byte[], a char[], or a (sub) String. All"}, {"target_line_num": 32, "target_line_code": "* operations can be made in case sensitive mode or not."}, {"target_line_num": 33, "target_line_code": "*"}, {"target_line_num": 34, "target_line_code": "* @author dac@eng.sun.com"}, {"target_line_num": 35, "target_line_code": "* @author James Todd [gonzo@eng.sun.com]"}, {"target_line_num": 36, "target_line_code": "* @author Costin Manolache"}, {"target_line_num": 37, "target_line_code": "*/"}, {"target_line_num": 38, "target_line_code": "public final class MessageBytes implements Cloneable, Serializable {"}, {"target_line_num": 39, "target_line_code": "private static final long serialVersionUID = 1L;"}, {"target_line_num": 42, "target_line_code": "private int type = T_NULL;"}, {"target_line_num": 44, "target_line_code": "public static final int T_NULL = 0;"}, {"target_line_num": 45, "target_line_code": "/** getType() is T_STR if the the object used to create the MessageBytes"}, {"target_line_num": 46, "target_line_code": "was a String */"}, {"target_line_num": 47, "target_line_code": "public static final int T_STR  = 1;"}, {"target_line_num": 48, "target_line_code": "/** getType() is T_STR if the the object used to create the MessageBytes"}, {"target_line_num": 49, "target_line_code": "was a byte[] */"}, {"target_line_num": 50, "target_line_code": "public static final int T_BYTES = 2;"}, {"target_line_num": 51, "target_line_code": "/** getType() is T_STR if the the object used to create the MessageBytes"}, {"target_line_num": 52, "target_line_code": "was a char[] */"}, {"target_line_num": 53, "target_line_code": "public static final int T_CHARS = 3;"}, {"target_line_num": 55, "target_line_code": "private int hashCode=0;"}, {"target_line_num": 57, "target_line_code": "private boolean hasHashCode=false;"}, {"target_line_num": 60, "target_line_code": "private final ByteChunk byteC=new ByteChunk();"}, {"target_line_num": 61, "target_line_code": "private final CharChunk charC=new CharChunk();"}, {"target_line_num": 64, "target_line_code": "private String strValue;"}, {"target_line_num": 67, "target_line_code": "private boolean hasStrValue=false;"}, {"target_line_num": 69, "target_line_code": "/**"}, {"target_line_num": 70, "target_line_code": "* Creates a new, uninitialized MessageBytes object."}, {"target_line_num": 71, "target_line_code": "* Use static newInstance() in order to allow"}, {"target_line_num": 72, "target_line_code": "*   future hooks."}, {"target_line_num": 73, "target_line_code": "*/"}, {"target_line_num": 74, "target_line_code": "private MessageBytes() {"}, {"target_line_num": 77, "target_line_code": "/** Construct a new MessageBytes instance"}, {"target_line_num": 78, "target_line_code": "*/"}, {"target_line_num": 79, "target_line_code": "public static MessageBytes newInstance() {"}, {"target_line_num": 80, "target_line_code": "return factory.newInstance();"}, {"target_line_num": 83, "target_line_code": "public boolean isNull() {"}, {"target_line_num": 85, "target_line_code": "return byteC.isNull() && charC.isNull() && ! hasStrValue;"}, {"target_line_num": 89, "target_line_code": "/**"}, {"target_line_num": 90, "target_line_code": "* Resets the message bytes to an uninitialized (NULL) state."}, {"target_line_num": 91, "target_line_code": "*/"}, {"target_line_num": 92, "target_line_code": "public void recycle() {"}, {"target_line_num": 93, "target_line_code": "type=T_NULL;"}, {"target_line_num": 94, "target_line_code": "byteC.recycle();"}, {"target_line_num": 95, "target_line_code": "charC.recycle();"}, {"target_line_num": 97, "target_line_code": "strValue=null;"}, {"target_line_num": 99, "target_line_code": "hasStrValue=false;"}, {"target_line_num": 100, "target_line_code": "hasHashCode=false;"}, {"target_line_num": 101, "target_line_code": "hasLongValue=false;"}, {"target_line_num": 105, "target_line_code": "/**"}, {"target_line_num": 106, "target_line_code": "* Sets the content to the specified subarray of bytes."}, {"target_line_num": 107, "target_line_code": "*"}, {"target_line_num": 108, "target_line_code": "* @param b the bytes"}, {"target_line_num": 109, "target_line_code": "* @param off the start offset of the bytes"}, {"target_line_num": 110, "target_line_code": "* @param len the length of the bytes"}, {"target_line_num": 111, "target_line_code": "*/"}, {"target_line_num": 112, "target_line_code": "public void setBytes(byte[] b, int off, int len) {"}, {"target_line_num": 113, "target_line_code": "byteC.setBytes( b, off, len );"}, {"target_line_num": 114, "target_line_code": "type=T_BYTES;"}, {"target_line_num": 115, "target_line_code": "hasStrValue=false;"}, {"target_line_num": 116, "target_line_code": "hasHashCode=false;"}, {"target_line_num": 117, "target_line_code": "hasLongValue=false;"}, {"target_line_num": 120, "target_line_code": "/**"}, {"target_line_num": 121, "target_line_code": "* Sets the content to be a char[]"}, {"target_line_num": 122, "target_line_code": "*"}, {"target_line_num": 123, "target_line_code": "* @param c the bytes"}, {"target_line_num": 124, "target_line_code": "* @param off the start offset of the bytes"}, {"target_line_num": 125, "target_line_code": "* @param len the length of the bytes"}, {"target_line_num": 126, "target_line_code": "*/"}, {"target_line_num": 127, "target_line_code": "public void setChars( char[] c, int off, int len ) {"}, {"target_line_num": 128, "target_line_code": "charC.setChars( c, off, len );"}, {"target_line_num": 129, "target_line_code": "type=T_CHARS;"}, {"target_line_num": 130, "target_line_code": "hasStrValue=false;"}, {"target_line_num": 131, "target_line_code": "hasHashCode=false;"}, {"target_line_num": 132, "target_line_code": "hasLongValue=false;"}, {"target_line_num": 135, "target_line_code": "/**"}, {"target_line_num": 136, "target_line_code": "* Set the content to be a string"}, {"target_line_num": 137, "target_line_code": "*/"}, {"target_line_num": 138, "target_line_code": "public void setString( String s ) {"}, {"target_line_num": 139, "target_line_code": "strValue=s;"}, {"target_line_num": 140, "target_line_code": "hasHashCode=false;"}, {"target_line_num": 141, "target_line_code": "hasLongValue=false;"}, {"target_line_num": 142, "target_line_code": "if (s == null) {"}, {"target_line_num": 143, "target_line_code": "hasStrValue=false;"}, {"target_line_num": 144, "target_line_code": "type=T_NULL;"}, {"target_line_num": 145, "target_line_code": "} else {"}, {"target_line_num": 146, "target_line_code": "hasStrValue=true;"}, {"target_line_num": 147, "target_line_code": "type=T_STR;"}, {"target_line_num": 153, "target_line_code": "/** Compute the string value"}, {"target_line_num": 154, "target_line_code": "*/"}, {"target_line_num": 155, "target_line_code": "@Override"}, {"target_line_num": 156, "target_line_code": "public String toString() {"}, {"target_line_num": 157, "target_line_code": "if( hasStrValue ) {"}, {"target_line_num": 158, "target_line_code": "return strValue;"}, {"target_line_num": 161, "target_line_code": "switch (type) {"}, {"target_line_num": 162, "target_line_code": "case T_CHARS:"}, {"target_line_num": 163, "target_line_code": "strValue=charC.toString();"}, {"target_line_num": 164, "target_line_code": "hasStrValue=true;"}, {"target_line_num": 165, "target_line_code": "return strValue;"}, {"target_line_num": 166, "target_line_code": "case T_BYTES:"}, {"target_line_num": 167, "target_line_code": "strValue=byteC.toString();"}, {"target_line_num": 168, "target_line_code": "hasStrValue=true;"}, {"target_line_num": 169, "target_line_code": "return strValue;"}, {"target_line_num": 171, "target_line_code": "return null;"}, {"target_line_num": 175, "target_line_code": "/** Return the type of the original content. Can be"}, {"target_line_num": 176, "target_line_code": "*  T_STR, T_BYTES, T_CHARS or T_NULL"}, {"target_line_num": 177, "target_line_code": "*/"}, {"target_line_num": 178, "target_line_code": "public int getType() {"}, {"target_line_num": 179, "target_line_code": "return type;"}, {"target_line_num": 182, "target_line_code": "/**"}, {"target_line_num": 183, "target_line_code": "* Returns the byte chunk, representing the byte[] and offset/length."}, {"target_line_num": 184, "target_line_code": "* Valid only if T_BYTES or after a conversion was made."}, {"target_line_num": 185, "target_line_code": "*/"}, {"target_line_num": 186, "target_line_code": "public ByteChunk getByteChunk() {"}, {"target_line_num": 187, "target_line_code": "return byteC;"}, {"target_line_num": 190, "target_line_code": "/**"}, {"target_line_num": 191, "target_line_code": "* Returns the char chunk, representing the char[] and offset/length."}, {"target_line_num": 192, "target_line_code": "* Valid only if T_CHARS or after a conversion was made."}, {"target_line_num": 193, "target_line_code": "*/"}, {"target_line_num": 194, "target_line_code": "public CharChunk getCharChunk() {"}, {"target_line_num": 195, "target_line_code": "return charC;"}, {"target_line_num": 198, "target_line_code": "/**"}, {"target_line_num": 199, "target_line_code": "* Returns the string value."}, {"target_line_num": 200, "target_line_code": "* Valid only if T_STR or after a conversion was made."}, {"target_line_num": 201, "target_line_code": "*/"}, {"target_line_num": 202, "target_line_code": "public String getString() {"}, {"target_line_num": 203, "target_line_code": "return strValue;"}, {"target_line_num": 206, "target_line_code": "/**"}, {"target_line_num": 207, "target_line_code": "* Get the Charset used for string&lt;-&gt;byte conversions."}, {"target_line_num": 208, "target_line_code": "*/"}, {"target_line_num": 209, "target_line_code": "public Charset getCharset() {"}, {"target_line_num": 210, "target_line_code": "return byteC.getCharset();"}, {"target_line_num": 213, "target_line_code": "/**"}, {"target_line_num": 214, "target_line_code": "* Set the Charset used for string&lt;-&gt;byte conversions."}, {"target_line_num": 215, "target_line_code": "*/"}, {"target_line_num": 216, "target_line_code": "public void setCharset(Charset charset) {"}, {"target_line_num": 217, "target_line_code": "byteC.setCharset(charset);"}, {"target_line_num": 220, "target_line_code": "/** Do a char-&gt;byte conversion."}, {"target_line_num": 221, "target_line_code": "*/"}, {"target_line_num": 222, "target_line_code": "public void toBytes() {"}, {"target_line_num": 223, "target_line_code": "if (!byteC.isNull()) {"}, {"target_line_num": 224, "target_line_code": "type=T_BYTES;"}, {"target_line_num": 225, "target_line_code": "return;"}, {"target_line_num": 227, "target_line_code": "toString();"}, {"target_line_num": 228, "target_line_code": "type=T_BYTES;"}, {"target_line_num": 229, "target_line_code": "Charset charset = byteC.getCharset();"}, {"target_line_num": 230, "target_line_code": "ByteBuffer result = charset.encode(strValue);"}, {"target_line_num": 231, "target_line_code": "byteC.setBytes(result.array(), result.arrayOffset(), result.limit());"}, {"target_line_num": 234, "target_line_code": "/** Convert to char[] and fill the CharChunk."}, {"target_line_num": 235, "target_line_code": "*  XXX Not optimized - it converts to String first."}, {"target_line_num": 236, "target_line_code": "*/"}, {"target_line_num": 237, "target_line_code": "public void toChars() {"}, {"target_line_num": 238, "target_line_code": "if( ! charC.isNull() ) {"}, {"target_line_num": 239, "target_line_code": "type=T_CHARS;"}, {"target_line_num": 240, "target_line_code": "return;"}, {"target_line_num": 243, "target_line_code": "toString();"}, {"target_line_num": 244, "target_line_code": "type=T_CHARS;"}, {"target_line_num": 245, "target_line_code": "char cc[]=strValue.toCharArray();"}, {"target_line_num": 246, "target_line_code": "charC.setChars(cc, 0, cc.length);"}, {"target_line_num": 250, "target_line_code": "/**"}, {"target_line_num": 251, "target_line_code": "* Returns the length of the original buffer."}, {"target_line_num": 252, "target_line_code": "* Note that the length in bytes may be different from the length"}, {"target_line_num": 253, "target_line_code": "* in chars."}, {"target_line_num": 254, "target_line_code": "*/"}, {"target_line_num": 255, "target_line_code": "public int getLength() {"}, {"target_line_num": 256, "target_line_code": "if(type==T_BYTES) {"}, {"target_line_num": 257, "target_line_code": "return byteC.getLength();"}, {"target_line_num": 259, "target_line_code": "if(type==T_CHARS) {"}, {"target_line_num": 260, "target_line_code": "return charC.getLength();"}, {"target_line_num": 262, "target_line_code": "if(type==T_STR) {"}, {"target_line_num": 263, "target_line_code": "return strValue.length();"}, {"target_line_num": 265, "target_line_code": "toString();"}, {"target_line_num": 266, "target_line_code": "if( strValue==null ) {"}, {"target_line_num": 267, "target_line_code": "return 0;"}, {"target_line_num": 269, "target_line_code": "return strValue.length();"}, {"target_line_num": 274, "target_line_code": "/**"}, {"target_line_num": 275, "target_line_code": "* Compares the message bytes to the specified String object."}, {"target_line_num": 276, "target_line_code": "* @param s the String to compare"}, {"target_line_num": 277, "target_line_code": "* @return true if the comparison succeeded, false otherwise"}, {"target_line_num": 278, "target_line_code": "*/"}, {"target_line_num": 279, "target_line_code": "public boolean equals(String s) {"}, {"target_line_num": 280, "target_line_code": "switch (type) {"}, {"target_line_num": 281, "target_line_code": "case T_STR:"}, {"target_line_num": 282, "target_line_code": "if (strValue == null) {"}, {"target_line_num": 283, "target_line_code": "return s == null;"}, {"target_line_num": 285, "target_line_code": "return strValue.equals( s );"}, {"target_line_num": 286, "target_line_code": "case T_CHARS:"}, {"target_line_num": 287, "target_line_code": "return charC.equals( s );"}, {"target_line_num": 288, "target_line_code": "case T_BYTES:"}, {"target_line_num": 289, "target_line_code": "return byteC.equals( s );"}, {"target_line_num": 290, "target_line_code": "default:"}, {"target_line_num": 291, "target_line_code": "return false;"}, {"target_line_num": 295, "target_line_code": "/**"}, {"target_line_num": 296, "target_line_code": "* Compares the message bytes to the specified String object."}, {"target_line_num": 297, "target_line_code": "* @param s the String to compare"}, {"target_line_num": 298, "target_line_code": "* @return true if the comparison succeeded, false otherwise"}, {"target_line_num": 299, "target_line_code": "*/"}, {"target_line_num": 300, "target_line_code": "public boolean equalsIgnoreCase(String s) {"}, {"target_line_num": 301, "target_line_code": "switch (type) {"}, {"target_line_num": 302, "target_line_code": "case T_STR:"}, {"target_line_num": 303, "target_line_code": "if (strValue == null) {"}, {"target_line_num": 304, "target_line_code": "return s == null;"}, {"target_line_num": 306, "target_line_code": "return strValue.equalsIgnoreCase( s );"}, {"target_line_num": 307, "target_line_code": "case T_CHARS:"}, {"target_line_num": 308, "target_line_code": "return charC.equalsIgnoreCase( s );"}, {"target_line_num": 309, "target_line_code": "case T_BYTES:"}, {"target_line_num": 310, "target_line_code": "return byteC.equalsIgnoreCase( s );"}, {"target_line_num": 311, "target_line_code": "default:"}, {"target_line_num": 312, "target_line_code": "return false;"}, {"target_line_num": 316, "target_line_code": "@Override"}, {"target_line_num": 317, "target_line_code": "public boolean equals(Object obj) {"}, {"target_line_num": 318, "target_line_code": "if (obj instanceof MessageBytes) {"}, {"target_line_num": 319, "target_line_code": "return equals((MessageBytes) obj);"}, {"target_line_num": 321, "target_line_code": "return false;"}, {"target_line_num": 324, "target_line_code": "public boolean equals(MessageBytes mb) {"}, {"target_line_num": 325, "target_line_code": "switch (type) {"}, {"target_line_num": 326, "target_line_code": "case T_STR:"}, {"target_line_num": 327, "target_line_code": "return mb.equals( strValue );"}, {"target_line_num": 330, "target_line_code": "if( mb.type != T_CHARS &&"}, {"target_line_num": 331, "target_line_code": "mb.type!= T_BYTES ) {"}, {"target_line_num": 333, "target_line_code": "return equals( mb.toString() );"}, {"target_line_num": 340, "target_line_code": "if( mb.type == T_CHARS && type==T_CHARS ) {"}, {"target_line_num": 341, "target_line_code": "return charC.equals( mb.charC );"}, {"target_line_num": 343, "target_line_code": "if( mb.type==T_BYTES && type== T_BYTES ) {"}, {"target_line_num": 344, "target_line_code": "return byteC.equals( mb.byteC );"}, {"target_line_num": 346, "target_line_code": "if( mb.type== T_CHARS && type== T_BYTES ) {"}, {"target_line_num": 347, "target_line_code": "return byteC.equals( mb.charC );"}, {"target_line_num": 349, "target_line_code": "if( mb.type== T_BYTES && type== T_CHARS ) {"}, {"target_line_num": 350, "target_line_code": "return mb.byteC.equals( charC );"}, {"target_line_num": 353, "target_line_code": "return true;"}, {"target_line_num": 357, "target_line_code": "/**"}, {"target_line_num": 358, "target_line_code": "* Returns true if the message bytes starts with the specified string."}, {"target_line_num": 359, "target_line_code": "* @param s the string"}, {"target_line_num": 360, "target_line_code": "* @param pos The start position"}, {"target_line_num": 361, "target_line_code": "*/"}, {"target_line_num": 362, "target_line_code": "public boolean startsWithIgnoreCase(String s, int pos) {"}, {"target_line_num": 363, "target_line_code": "switch (type) {"}, {"target_line_num": 364, "target_line_code": "case T_STR:"}, {"target_line_num": 365, "target_line_code": "if( strValue==null ) {"}, {"target_line_num": 366, "target_line_code": "return false;"}, {"target_line_num": 368, "target_line_code": "if( strValue.length() < pos + s.length() ) {"}, {"target_line_num": 369, "target_line_code": "return false;"}, {"target_line_num": 372, "target_line_code": "for( int i=0; i<s.length(); i++ ) {"}, {"target_line_num": 373, "target_line_code": "if( Ascii.toLower( s.charAt( i ) ) !="}, {"target_line_num": 374, "target_line_code": "Ascii.toLower( strValue.charAt( pos + i ))) {"}, {"target_line_num": 375, "target_line_code": "return false;"}, {"target_line_num": 378, "target_line_code": "return true;"}, {"target_line_num": 379, "target_line_code": "case T_CHARS:"}, {"target_line_num": 380, "target_line_code": "return charC.startsWithIgnoreCase( s, pos );"}, {"target_line_num": 381, "target_line_code": "case T_BYTES:"}, {"target_line_num": 382, "target_line_code": "return byteC.startsWithIgnoreCase( s, pos );"}, {"target_line_num": 383, "target_line_code": "default:"}, {"target_line_num": 384, "target_line_code": "return false;"}, {"target_line_num": 390, "target_line_code": "@Override"}, {"target_line_num": 391, "target_line_code": "public  int hashCode() {"}, {"target_line_num": 392, "target_line_code": "if( hasHashCode ) {"}, {"target_line_num": 393, "target_line_code": "return hashCode;"}, {"target_line_num": 395, "target_line_code": "int code = 0;"}, {"target_line_num": 397, "target_line_code": "code=hash();"}, {"target_line_num": 398, "target_line_code": "hashCode=code;"}, {"target_line_num": 399, "target_line_code": "hasHashCode=true;"}, {"target_line_num": 400, "target_line_code": "return code;"}, {"target_line_num": 404, "target_line_code": "private int hash() {"}, {"target_line_num": 405, "target_line_code": "int code=0;"}, {"target_line_num": 406, "target_line_code": "switch (type) {"}, {"target_line_num": 407, "target_line_code": "case T_STR:"}, {"target_line_num": 409, "target_line_code": "for (int i = 0; i < strValue.length(); i++) {"}, {"target_line_num": 410, "target_line_code": "code = code * 37 + strValue.charAt( i );"}, {"target_line_num": 412, "target_line_code": "return code;"}, {"target_line_num": 413, "target_line_code": "case T_CHARS:"}, {"target_line_num": 414, "target_line_code": "return charC.hash();"}, {"target_line_num": 415, "target_line_code": "case T_BYTES:"}, {"target_line_num": 416, "target_line_code": "return byteC.hash();"}, {"target_line_num": 417, "target_line_code": "default:"}, {"target_line_num": 418, "target_line_code": "return 0;"}, {"target_line_num": 424, "target_line_code": "public int indexOf(String s, int starting) {"}, {"target_line_num": 425, "target_line_code": "toString();"}, {"target_line_num": 426, "target_line_code": "return strValue.indexOf( s, starting );"}, {"target_line_num": 431, "target_line_code": "public int indexOf(String s) {"}, {"target_line_num": 432, "target_line_code": "return indexOf( s, 0 );"}, {"target_line_num": 435, "target_line_code": "public int indexOfIgnoreCase(String s, int starting) {"}, {"target_line_num": 436, "target_line_code": "toString();"}, {"target_line_num": 437, "target_line_code": "String upper=strValue.toUpperCase(Locale.ENGLISH);"}, {"target_line_num": 438, "target_line_code": "String sU=s.toUpperCase(Locale.ENGLISH);"}, {"target_line_num": 439, "target_line_code": "return upper.indexOf( sU, starting );"}, {"target_line_num": 442, "target_line_code": "/** Copy the src into this MessageBytes, allocating more space if"}, {"target_line_num": 443, "target_line_code": "*  needed"}, {"target_line_num": 444, "target_line_code": "*/"}, {"target_line_num": 445, "target_line_code": "public void duplicate( MessageBytes src ) throws IOException"}, {"target_line_num": 446, "target_line_code": "{"}, {"target_line_num": 447, "target_line_code": "switch( src.getType() ) {"}, {"target_line_num": 448, "target_line_code": "case MessageBytes.T_BYTES:"}, {"target_line_num": 449, "target_line_code": "type=T_BYTES;"}, {"target_line_num": 450, "target_line_code": "ByteChunk bc=src.getByteChunk();"}, {"target_line_num": 451, "target_line_code": "byteC.allocate( 2 * bc.getLength(), -1 );"}, {"target_line_num": 452, "target_line_code": "byteC.append( bc );"}, {"target_line_num": 453, "target_line_code": "break;"}, {"target_line_num": 454, "target_line_code": "case MessageBytes.T_CHARS:"}, {"target_line_num": 455, "target_line_code": "type=T_CHARS;"}, {"target_line_num": 456, "target_line_code": "CharChunk cc=src.getCharChunk();"}, {"target_line_num": 457, "target_line_code": "charC.allocate( 2 * cc.getLength(), -1 );"}, {"target_line_num": 458, "target_line_code": "charC.append( cc );"}, {"target_line_num": 459, "target_line_code": "break;"}, {"target_line_num": 460, "target_line_code": "case MessageBytes.T_STR:"}, {"target_line_num": 461, "target_line_code": "type=T_STR;"}, {"target_line_num": 462, "target_line_code": "String sc=src.getString();"}, {"target_line_num": 463, "target_line_code": "this.setString( sc );"}, {"target_line_num": 464, "target_line_code": "break;"}, {"target_line_num": 471, "target_line_code": "private long longValue;"}, {"target_line_num": 472, "target_line_code": "private boolean hasLongValue=false;"}, {"target_line_num": 474, "target_line_code": "/** Set the buffer to the representation of an long"}, {"target_line_num": 475, "target_line_code": "*/"}, {"target_line_num": 476, "target_line_code": "public void setLong(long l) {"}, {"target_line_num": 477, "target_line_code": "byteC.allocate(32, 64);"}, {"target_line_num": 478, "target_line_code": "long current = l;"}, {"target_line_num": 479, "target_line_code": "byte[] buf = byteC.getBuffer();"}, {"target_line_num": 480, "target_line_code": "int start = 0;"}, {"target_line_num": 481, "target_line_code": "int end = 0;"}, {"target_line_num": 482, "target_line_code": "if (l == 0) {"}, {"target_line_num": 483, "target_line_code": "buf[end++] = (byte) '0';"}, {"target_line_num": 485, "target_line_code": "if (l < 0) {"}, {"target_line_num": 486, "target_line_code": "current = -l;"}, {"target_line_num": 487, "target_line_code": "buf[end++] = (byte) '-';"}, {"target_line_num": 489, "target_line_code": "while (current > 0) {"}, {"target_line_num": 490, "target_line_code": "int digit = (int) (current % 10);"}, {"target_line_num": 491, "target_line_code": "current = current / 10;"}, {"target_line_num": 492, "target_line_code": "buf[end++] = HexUtils.getHex(digit);"}, {"target_line_num": 494, "target_line_code": "byteC.setOffset(0);"}, {"target_line_num": 495, "target_line_code": "byteC.setEnd(end);"}, {"target_line_num": 497, "target_line_code": "end--;"}, {"target_line_num": 498, "target_line_code": "if (l < 0) {"}, {"target_line_num": 499, "target_line_code": "start++;"}, {"target_line_num": 501, "target_line_code": "while (end > start) {"}, {"target_line_num": 502, "target_line_code": "byte temp = buf[start];"}, {"target_line_num": 503, "target_line_code": "buf[start] = buf[end];"}, {"target_line_num": 504, "target_line_code": "buf[end] = temp;"}, {"target_line_num": 505, "target_line_code": "start++;"}, {"target_line_num": 506, "target_line_code": "end--;"}, {"target_line_num": 508, "target_line_code": "longValue=l;"}, {"target_line_num": 509, "target_line_code": "hasStrValue=false;"}, {"target_line_num": 510, "target_line_code": "hasHashCode=false;"}, {"target_line_num": 511, "target_line_code": "hasLongValue=true;"}, {"target_line_num": 512, "target_line_code": "type=T_BYTES;"}, {"target_line_num": 516, "target_line_code": "/** Convert the buffer to an long, cache the value"}, {"target_line_num": 517, "target_line_code": "*/"}, {"target_line_num": 518, "target_line_code": "public long getLong() {"}, {"target_line_num": 519, "target_line_code": "if( hasLongValue ) {"}, {"target_line_num": 520, "target_line_code": "return longValue;"}, {"target_line_num": 523, "target_line_code": "switch (type) {"}, {"target_line_num": 524, "target_line_code": "case T_BYTES:"}, {"target_line_num": 525, "target_line_code": "longValue=byteC.getLong();"}, {"target_line_num": 526, "target_line_code": "break;"}, {"target_line_num": 527, "target_line_code": "default:"}, {"target_line_num": 528, "target_line_code": "longValue= Long.parseLong(toString());"}, {"target_line_num": 531, "target_line_code": "hasLongValue=true;"}, {"target_line_num": 532, "target_line_code": "return longValue;"}, {"target_line_num": 538, "target_line_code": "private static final MessageBytesFactory factory=new MessageBytesFactory();"}, {"target_line_num": 540, "target_line_code": "private static class MessageBytesFactory {"}, {"target_line_num": 541, "target_line_code": "protected MessageBytesFactory() {"}, {"target_line_num": 543, "target_line_code": "public MessageBytes newInstance() {"}, {"target_line_num": 544, "target_line_code": "return new MessageBytes();"}], "removed_line": [], "filename": "core/src/main/java/org/apache/struts2/util/tomcat/buf/MessageBytes.java", "patch_func": "no", "diff_file": "struts_CVE-2016-4003_72471d7075681bea52046645ad7aa34e9c53751e.diff", "patch_tag": "STRUTS_6_0_0_RC1", "source_tag": "STRUTS_2_5_BETA3"}]