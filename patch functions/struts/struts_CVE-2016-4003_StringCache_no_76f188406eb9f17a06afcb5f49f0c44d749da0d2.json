[{"cve_id": "struts", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "*  Licensed to the Apache Software Foundation (ASF) under one or more"}, {"target_line_num": 4, "target_line_code": "*  contributor license agreements.  See the NOTICE file distributed with"}, {"target_line_num": 5, "target_line_code": "*  this work for additional information regarding copyright ownership."}, {"target_line_num": 6, "target_line_code": "*  The ASF licenses this file to You under the Apache License, Version 2.0"}, {"target_line_num": 7, "target_line_code": "*  (the \"License\"); you may not use this file except in compliance with"}, {"target_line_num": 8, "target_line_code": "*  the License.  You may obtain a copy of the License at"}, {"target_line_num": 9, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "*"}, {"target_line_num": 12, "target_line_code": "*  Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 13, "target_line_code": "*  distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 14, "target_line_code": "*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 15, "target_line_code": "*  See the License for the specific language governing permissions and"}, {"target_line_num": 16, "target_line_code": "*  limitations under the License."}, {"target_line_num": 17, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "package org.apache.struts2.util.tomcat.buf;"}, {"target_line_num": 20, "target_line_code": "import com.opensymphony.xwork2.util.logging.Logger;"}, {"target_line_num": 21, "target_line_code": "import com.opensymphony.xwork2.util.logging.LoggerFactory;"}, {"target_line_num": 23, "target_line_code": "import java.nio.charset.Charset;"}, {"target_line_num": 24, "target_line_code": "import java.util.ArrayList;"}, {"target_line_num": 25, "target_line_code": "import java.util.HashMap;"}, {"target_line_num": 26, "target_line_code": "import java.util.Map.Entry;"}, {"target_line_num": 27, "target_line_code": "import java.util.TreeMap;"}, {"target_line_num": 29, "target_line_code": "/**"}, {"target_line_num": 30, "target_line_code": "* This class implements a String cache for ByteChunk and CharChunk."}, {"target_line_num": 31, "target_line_code": "*"}, {"target_line_num": 32, "target_line_code": "* @author Remy Maucherat"}, {"target_line_num": 33, "target_line_code": "*/"}, {"target_line_num": 34, "target_line_code": "public class StringCache {"}, {"target_line_num": 37, "target_line_code": "private static final Logger log = LoggerFactory.getLogger(StringCache.class);"}, {"target_line_num": 43, "target_line_code": "/**"}, {"target_line_num": 44, "target_line_code": "* Enabled ?"}, {"target_line_num": 45, "target_line_code": "*/"}, {"target_line_num": 46, "target_line_code": "protected static boolean byteEnabled = (\"true\".equals(System.getProperty("}, {"target_line_num": 47, "target_line_code": "\"tomcat.util.buf.StringCache.byte.enabled\", \"false\")));"}, {"target_line_num": 50, "target_line_code": "protected static boolean charEnabled = (\"true\".equals(System.getProperty("}, {"target_line_num": 51, "target_line_code": "\"tomcat.util.buf.StringCache.char.enabled\", \"false\")));"}, {"target_line_num": 54, "target_line_code": "protected static int trainThreshold = Integer.parseInt(System.getProperty("}, {"target_line_num": 55, "target_line_code": "\"tomcat.util.buf.StringCache.trainThreshold\", \"20000\"));"}, {"target_line_num": 58, "target_line_code": "protected static int cacheSize = Integer.parseInt(System.getProperty("}, {"target_line_num": 59, "target_line_code": "\"tomcat.util.buf.StringCache.cacheSize\", \"200\"));"}, {"target_line_num": 62, "target_line_code": "protected static final int maxStringSize ="}, {"target_line_num": 63, "target_line_code": "Integer.parseInt(System.getProperty("}, {"target_line_num": 64, "target_line_code": "\"tomcat.util.buf.StringCache.maxStringSize\", \"128\"));"}, {"target_line_num": 67, "target_line_code": "/**"}, {"target_line_num": 68, "target_line_code": "* Statistics hash map for byte chunk."}, {"target_line_num": 69, "target_line_code": "*/"}, {"target_line_num": 70, "target_line_code": "protected static final HashMap<ByteEntry,int[]> bcStats ="}, {"target_line_num": 71, "target_line_code": "new HashMap<ByteEntry, int[]>(cacheSize);"}, {"target_line_num": 74, "target_line_code": "/**"}, {"target_line_num": 75, "target_line_code": "* toString count for byte chunk."}, {"target_line_num": 76, "target_line_code": "*/"}, {"target_line_num": 77, "target_line_code": "protected static int bcCount = 0;"}, {"target_line_num": 80, "target_line_code": "/**"}, {"target_line_num": 81, "target_line_code": "* Cache for byte chunk."}, {"target_line_num": 82, "target_line_code": "*/"}, {"target_line_num": 83, "target_line_code": "protected static ByteEntry[] bcCache = null;"}, {"target_line_num": 86, "target_line_code": "/**"}, {"target_line_num": 87, "target_line_code": "* Statistics hash map for char chunk."}, {"target_line_num": 88, "target_line_code": "*/"}, {"target_line_num": 89, "target_line_code": "protected static final HashMap<CharEntry,int[]> ccStats ="}, {"target_line_num": 90, "target_line_code": "new HashMap<CharEntry, int[]>(cacheSize);"}, {"target_line_num": 93, "target_line_code": "/**"}, {"target_line_num": 94, "target_line_code": "* toString count for char chunk."}, {"target_line_num": 95, "target_line_code": "*/"}, {"target_line_num": 96, "target_line_code": "protected static int ccCount = 0;"}, {"target_line_num": 99, "target_line_code": "/**"}, {"target_line_num": 100, "target_line_code": "* Cache for char chunk."}, {"target_line_num": 101, "target_line_code": "*/"}, {"target_line_num": 102, "target_line_code": "protected static CharEntry[] ccCache = null;"}, {"target_line_num": 105, "target_line_code": "/**"}, {"target_line_num": 106, "target_line_code": "* Access count."}, {"target_line_num": 107, "target_line_code": "*/"}, {"target_line_num": 108, "target_line_code": "protected static int accessCount = 0;"}, {"target_line_num": 111, "target_line_code": "/**"}, {"target_line_num": 112, "target_line_code": "* Hit count."}, {"target_line_num": 113, "target_line_code": "*/"}, {"target_line_num": 114, "target_line_code": "protected static int hitCount = 0;"}, {"target_line_num": 120, "target_line_code": "/**"}, {"target_line_num": 121, "target_line_code": "* @return Returns the cacheSize."}, {"target_line_num": 122, "target_line_code": "*/"}, {"target_line_num": 123, "target_line_code": "public int getCacheSize() {"}, {"target_line_num": 124, "target_line_code": "return cacheSize;"}, {"target_line_num": 128, "target_line_code": "/**"}, {"target_line_num": 129, "target_line_code": "* @param cacheSize The cacheSize to set."}, {"target_line_num": 130, "target_line_code": "*/"}, {"target_line_num": 131, "target_line_code": "public void setCacheSize(int cacheSize) {"}, {"target_line_num": 132, "target_line_code": "StringCache.cacheSize = cacheSize;"}, {"target_line_num": 136, "target_line_code": "/**"}, {"target_line_num": 137, "target_line_code": "* @return Returns the enabled."}, {"target_line_num": 138, "target_line_code": "*/"}, {"target_line_num": 139, "target_line_code": "public boolean getByteEnabled() {"}, {"target_line_num": 140, "target_line_code": "return byteEnabled;"}, {"target_line_num": 144, "target_line_code": "/**"}, {"target_line_num": 145, "target_line_code": "* @param byteEnabled The enabled to set."}, {"target_line_num": 146, "target_line_code": "*/"}, {"target_line_num": 147, "target_line_code": "public void setByteEnabled(boolean byteEnabled) {"}, {"target_line_num": 148, "target_line_code": "StringCache.byteEnabled = byteEnabled;"}, {"target_line_num": 152, "target_line_code": "/**"}, {"target_line_num": 153, "target_line_code": "* @return Returns the enabled."}, {"target_line_num": 154, "target_line_code": "*/"}, {"target_line_num": 155, "target_line_code": "public boolean getCharEnabled() {"}, {"target_line_num": 156, "target_line_code": "return charEnabled;"}, {"target_line_num": 160, "target_line_code": "/**"}, {"target_line_num": 161, "target_line_code": "* @param charEnabled The enabled to set."}, {"target_line_num": 162, "target_line_code": "*/"}, {"target_line_num": 163, "target_line_code": "public void setCharEnabled(boolean charEnabled) {"}, {"target_line_num": 164, "target_line_code": "StringCache.charEnabled = charEnabled;"}, {"target_line_num": 168, "target_line_code": "/**"}, {"target_line_num": 169, "target_line_code": "* @return Returns the trainThreshold."}, {"target_line_num": 170, "target_line_code": "*/"}, {"target_line_num": 171, "target_line_code": "public int getTrainThreshold() {"}, {"target_line_num": 172, "target_line_code": "return trainThreshold;"}, {"target_line_num": 176, "target_line_code": "/**"}, {"target_line_num": 177, "target_line_code": "* @param trainThreshold The trainThreshold to set."}, {"target_line_num": 178, "target_line_code": "*/"}, {"target_line_num": 179, "target_line_code": "public void setTrainThreshold(int trainThreshold) {"}, {"target_line_num": 180, "target_line_code": "StringCache.trainThreshold = trainThreshold;"}, {"target_line_num": 184, "target_line_code": "/**"}, {"target_line_num": 185, "target_line_code": "* @return Returns the accessCount."}, {"target_line_num": 186, "target_line_code": "*/"}, {"target_line_num": 187, "target_line_code": "public int getAccessCount() {"}, {"target_line_num": 188, "target_line_code": "return accessCount;"}, {"target_line_num": 192, "target_line_code": "/**"}, {"target_line_num": 193, "target_line_code": "* @return Returns the hitCount."}, {"target_line_num": 194, "target_line_code": "*/"}, {"target_line_num": 195, "target_line_code": "public int getHitCount() {"}, {"target_line_num": 196, "target_line_code": "return hitCount;"}, {"target_line_num": 203, "target_line_code": "public void reset() {"}, {"target_line_num": 204, "target_line_code": "hitCount = 0;"}, {"target_line_num": 205, "target_line_code": "accessCount = 0;"}, {"target_line_num": 206, "target_line_code": "synchronized (bcStats) {"}, {"target_line_num": 207, "target_line_code": "bcCache = null;"}, {"target_line_num": 208, "target_line_code": "bcCount = 0;"}, {"target_line_num": 210, "target_line_code": "synchronized (ccStats) {"}, {"target_line_num": 211, "target_line_code": "ccCache = null;"}, {"target_line_num": 212, "target_line_code": "ccCount = 0;"}, {"target_line_num": 217, "target_line_code": "public static String toString(ByteChunk bc) {"}, {"target_line_num": 221, "target_line_code": "if (bcCache == null) {"}, {"target_line_num": 222, "target_line_code": "String value = bc.toStringInternal();"}, {"target_line_num": 223, "target_line_code": "if (byteEnabled && (value.length() < maxStringSize)) {"}, {"target_line_num": 225, "target_line_code": "synchronized (bcStats) {"}, {"target_line_num": 229, "target_line_code": "if (bcCache != null) {"}, {"target_line_num": 230, "target_line_code": "return value;"}, {"target_line_num": 235, "target_line_code": "if (bcCount > trainThreshold) {"}, {"target_line_num": 236, "target_line_code": "long t1 = System.currentTimeMillis();"}, {"target_line_num": 238, "target_line_code": "TreeMap<Integer,ArrayList<ByteEntry>> tempMap ="}, {"target_line_num": 239, "target_line_code": "new TreeMap<Integer, ArrayList<ByteEntry>>();"}, {"target_line_num": 240, "target_line_code": "for (Entry<ByteEntry,int[]> item : bcStats.entrySet()) {"}, {"target_line_num": 241, "target_line_code": "ByteEntry entry = item.getKey();"}, {"target_line_num": 242, "target_line_code": "int[] countA = item.getValue();"}, {"target_line_num": 243, "target_line_code": "Integer count = Integer.valueOf(countA[0]);"}, {"target_line_num": 245, "target_line_code": "ArrayList<ByteEntry> list = tempMap.get(count);"}, {"target_line_num": 246, "target_line_code": "if (list == null) {"}, {"target_line_num": 248, "target_line_code": "list = new ArrayList<ByteEntry>();"}, {"target_line_num": 249, "target_line_code": "tempMap.put(count, list);"}, {"target_line_num": 251, "target_line_code": "list.add(entry);"}, {"target_line_num": 254, "target_line_code": "int size = bcStats.size();"}, {"target_line_num": 255, "target_line_code": "if (size > cacheSize) {"}, {"target_line_num": 256, "target_line_code": "size = cacheSize;"}, {"target_line_num": 258, "target_line_code": "ByteEntry[] tempbcCache = new ByteEntry[size];"}, {"target_line_num": 261, "target_line_code": "ByteChunk tempChunk = new ByteChunk();"}, {"target_line_num": 262, "target_line_code": "int n = 0;"}, {"target_line_num": 263, "target_line_code": "while (n < size) {"}, {"target_line_num": 264, "target_line_code": "Object key = tempMap.lastKey();"}, {"target_line_num": 265, "target_line_code": "ArrayList<ByteEntry> list = tempMap.get(key);"}, {"target_line_num": 266, "target_line_code": "for (int i = 0; i < list.size() && n < size; i++) {"}, {"target_line_num": 267, "target_line_code": "ByteEntry entry = list.get(i);"}, {"target_line_num": 268, "target_line_code": "tempChunk.setBytes(entry.name, 0,"}, {"target_line_num": 269, "target_line_code": "entry.name.length);"}, {"target_line_num": 270, "target_line_code": "int insertPos = findClosest(tempChunk,"}, {"target_line_num": 271, "target_line_code": "tempbcCache, n);"}, {"target_line_num": 272, "target_line_code": "if (insertPos == n) {"}, {"target_line_num": 273, "target_line_code": "tempbcCache[n + 1] = entry;"}, {"target_line_num": 274, "target_line_code": "} else {"}, {"target_line_num": 275, "target_line_code": "System.arraycopy(tempbcCache, insertPos + 1,"}, {"target_line_num": 276, "target_line_code": "tempbcCache, insertPos + 2,"}, {"target_line_num": 277, "target_line_code": "n - insertPos - 1);"}, {"target_line_num": 278, "target_line_code": "tempbcCache[insertPos + 1] = entry;"}, {"target_line_num": 280, "target_line_code": "n++;"}, {"target_line_num": 282, "target_line_code": "tempMap.remove(key);"}, {"target_line_num": 284, "target_line_code": "bcCount = 0;"}, {"target_line_num": 285, "target_line_code": "bcStats.clear();"}, {"target_line_num": 286, "target_line_code": "bcCache = tempbcCache;"}, {"target_line_num": 287, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 288, "target_line_code": "long t2 = System.currentTimeMillis();"}, {"target_line_num": 289, "target_line_code": "log.debug(\"ByteCache generation time: \" +"}, {"target_line_num": 290, "target_line_code": "(t2 - t1) + \"ms\");"}, {"target_line_num": 292, "target_line_code": "} else {"}, {"target_line_num": 293, "target_line_code": "bcCount++;"}, {"target_line_num": 295, "target_line_code": "ByteEntry entry = new ByteEntry();"}, {"target_line_num": 296, "target_line_code": "entry.value = value;"}, {"target_line_num": 297, "target_line_code": "int[] count = bcStats.get(entry);"}, {"target_line_num": 298, "target_line_code": "if (count == null) {"}, {"target_line_num": 299, "target_line_code": "int end = bc.getEnd();"}, {"target_line_num": 300, "target_line_code": "int start = bc.getStart();"}, {"target_line_num": 302, "target_line_code": "entry.name = new byte[bc.getLength()];"}, {"target_line_num": 303, "target_line_code": "System.arraycopy(bc.getBuffer(), start, entry.name,"}, {"target_line_num": 304, "target_line_code": "0, end - start);"}, {"target_line_num": 306, "target_line_code": "entry.charset = bc.getCharset();"}, {"target_line_num": 308, "target_line_code": "count = new int[1];"}, {"target_line_num": 309, "target_line_code": "count[0] = 1;"}, {"target_line_num": 311, "target_line_code": "bcStats.put(entry, count);"}, {"target_line_num": 312, "target_line_code": "} else {"}, {"target_line_num": 313, "target_line_code": "count[0] = count[0] + 1;"}, {"target_line_num": 318, "target_line_code": "return value;"}, {"target_line_num": 319, "target_line_code": "} else {"}, {"target_line_num": 320, "target_line_code": "accessCount++;"}, {"target_line_num": 322, "target_line_code": "String result = find(bc);"}, {"target_line_num": 323, "target_line_code": "if (result == null) {"}, {"target_line_num": 324, "target_line_code": "return bc.toStringInternal();"}, {"target_line_num": 327, "target_line_code": "hitCount++;"}, {"target_line_num": 328, "target_line_code": "return result;"}, {"target_line_num": 334, "target_line_code": "public static String toString(CharChunk cc) {"}, {"target_line_num": 338, "target_line_code": "if (ccCache == null) {"}, {"target_line_num": 339, "target_line_code": "String value = cc.toStringInternal();"}, {"target_line_num": 340, "target_line_code": "if (charEnabled && (value.length() < maxStringSize)) {"}, {"target_line_num": 342, "target_line_code": "synchronized (ccStats) {"}, {"target_line_num": 346, "target_line_code": "if (ccCache != null) {"}, {"target_line_num": 347, "target_line_code": "return value;"}, {"target_line_num": 352, "target_line_code": "if (ccCount > trainThreshold) {"}, {"target_line_num": 353, "target_line_code": "long t1 = System.currentTimeMillis();"}, {"target_line_num": 355, "target_line_code": "TreeMap<Integer,ArrayList<CharEntry>> tempMap ="}, {"target_line_num": 356, "target_line_code": "new TreeMap<Integer, ArrayList<CharEntry>>();"}, {"target_line_num": 357, "target_line_code": "for (Entry<CharEntry,int[]> item : ccStats.entrySet()) {"}, {"target_line_num": 358, "target_line_code": "CharEntry entry = item.getKey();"}, {"target_line_num": 359, "target_line_code": "int[] countA = item.getValue();"}, {"target_line_num": 360, "target_line_code": "Integer count = Integer.valueOf(countA[0]);"}, {"target_line_num": 362, "target_line_code": "ArrayList<CharEntry> list = tempMap.get(count);"}, {"target_line_num": 363, "target_line_code": "if (list == null) {"}, {"target_line_num": 365, "target_line_code": "list = new ArrayList<CharEntry>();"}, {"target_line_num": 366, "target_line_code": "tempMap.put(count, list);"}, {"target_line_num": 368, "target_line_code": "list.add(entry);"}, {"target_line_num": 371, "target_line_code": "int size = ccStats.size();"}, {"target_line_num": 372, "target_line_code": "if (size > cacheSize) {"}, {"target_line_num": 373, "target_line_code": "size = cacheSize;"}, {"target_line_num": 375, "target_line_code": "CharEntry[] tempccCache = new CharEntry[size];"}, {"target_line_num": 378, "target_line_code": "CharChunk tempChunk = new CharChunk();"}, {"target_line_num": 379, "target_line_code": "int n = 0;"}, {"target_line_num": 380, "target_line_code": "while (n < size) {"}, {"target_line_num": 381, "target_line_code": "Object key = tempMap.lastKey();"}, {"target_line_num": 382, "target_line_code": "ArrayList<CharEntry> list = tempMap.get(key);"}, {"target_line_num": 383, "target_line_code": "for (int i = 0; i < list.size() && n < size; i++) {"}, {"target_line_num": 384, "target_line_code": "CharEntry entry = list.get(i);"}, {"target_line_num": 385, "target_line_code": "tempChunk.setChars(entry.name, 0,"}, {"target_line_num": 386, "target_line_code": "entry.name.length);"}, {"target_line_num": 387, "target_line_code": "int insertPos = findClosest(tempChunk,"}, {"target_line_num": 388, "target_line_code": "tempccCache, n);"}, {"target_line_num": 389, "target_line_code": "if (insertPos == n) {"}, {"target_line_num": 390, "target_line_code": "tempccCache[n + 1] = entry;"}, {"target_line_num": 391, "target_line_code": "} else {"}, {"target_line_num": 392, "target_line_code": "System.arraycopy(tempccCache, insertPos + 1,"}, {"target_line_num": 393, "target_line_code": "tempccCache, insertPos + 2,"}, {"target_line_num": 394, "target_line_code": "n - insertPos - 1);"}, {"target_line_num": 395, "target_line_code": "tempccCache[insertPos + 1] = entry;"}, {"target_line_num": 397, "target_line_code": "n++;"}, {"target_line_num": 399, "target_line_code": "tempMap.remove(key);"}, {"target_line_num": 401, "target_line_code": "ccCount = 0;"}, {"target_line_num": 402, "target_line_code": "ccStats.clear();"}, {"target_line_num": 403, "target_line_code": "ccCache = tempccCache;"}, {"target_line_num": 404, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 405, "target_line_code": "long t2 = System.currentTimeMillis();"}, {"target_line_num": 406, "target_line_code": "log.debug(\"CharCache generation time: \" +"}, {"target_line_num": 407, "target_line_code": "(t2 - t1) + \"ms\");"}, {"target_line_num": 409, "target_line_code": "} else {"}, {"target_line_num": 410, "target_line_code": "ccCount++;"}, {"target_line_num": 412, "target_line_code": "CharEntry entry = new CharEntry();"}, {"target_line_num": 413, "target_line_code": "entry.value = value;"}, {"target_line_num": 414, "target_line_code": "int[] count = ccStats.get(entry);"}, {"target_line_num": 415, "target_line_code": "if (count == null) {"}, {"target_line_num": 416, "target_line_code": "int end = cc.getEnd();"}, {"target_line_num": 417, "target_line_code": "int start = cc.getStart();"}, {"target_line_num": 419, "target_line_code": "entry.name = new char[cc.getLength()];"}, {"target_line_num": 420, "target_line_code": "System.arraycopy(cc.getBuffer(), start, entry.name,"}, {"target_line_num": 421, "target_line_code": "0, end - start);"}, {"target_line_num": 423, "target_line_code": "count = new int[1];"}, {"target_line_num": 424, "target_line_code": "count[0] = 1;"}, {"target_line_num": 426, "target_line_code": "ccStats.put(entry, count);"}, {"target_line_num": 427, "target_line_code": "} else {"}, {"target_line_num": 428, "target_line_code": "count[0] = count[0] + 1;"}, {"target_line_num": 433, "target_line_code": "return value;"}, {"target_line_num": 434, "target_line_code": "} else {"}, {"target_line_num": 435, "target_line_code": "accessCount++;"}, {"target_line_num": 437, "target_line_code": "String result = find(cc);"}, {"target_line_num": 438, "target_line_code": "if (result == null) {"}, {"target_line_num": 439, "target_line_code": "return cc.toStringInternal();"}, {"target_line_num": 442, "target_line_code": "hitCount++;"}, {"target_line_num": 443, "target_line_code": "return result;"}, {"target_line_num": 452, "target_line_code": "/**"}, {"target_line_num": 453, "target_line_code": "* Compare given byte chunk with byte array."}, {"target_line_num": 454, "target_line_code": "* Return -1, 0 or +1 if inferior, equal, or superior to the String."}, {"target_line_num": 455, "target_line_code": "*/"}, {"target_line_num": 456, "target_line_code": "protected static final int compare(ByteChunk name, byte[] compareTo) {"}, {"target_line_num": 457, "target_line_code": "int result = 0;"}, {"target_line_num": 459, "target_line_code": "byte[] b = name.getBuffer();"}, {"target_line_num": 460, "target_line_code": "int start = name.getStart();"}, {"target_line_num": 461, "target_line_code": "int end = name.getEnd();"}, {"target_line_num": 462, "target_line_code": "int len = compareTo.length;"}, {"target_line_num": 464, "target_line_code": "if ((end - start) < len) {"}, {"target_line_num": 465, "target_line_code": "len = end - start;"}, {"target_line_num": 467, "target_line_code": "for (int i = 0; (i < len) && (result == 0); i++) {"}, {"target_line_num": 468, "target_line_code": "if (b[i + start] > compareTo[i]) {"}, {"target_line_num": 469, "target_line_code": "result = 1;"}, {"target_line_num": 470, "target_line_code": "} else if (b[i + start] < compareTo[i]) {"}, {"target_line_num": 471, "target_line_code": "result = -1;"}, {"target_line_num": 474, "target_line_code": "if (result == 0) {"}, {"target_line_num": 475, "target_line_code": "if (compareTo.length > (end - start)) {"}, {"target_line_num": 476, "target_line_code": "result = -1;"}, {"target_line_num": 477, "target_line_code": "} else if (compareTo.length < (end - start)) {"}, {"target_line_num": 478, "target_line_code": "result = 1;"}, {"target_line_num": 481, "target_line_code": "return result;"}, {"target_line_num": 485, "target_line_code": "/**"}, {"target_line_num": 486, "target_line_code": "* Find an entry given its name in the cache and return the associated"}, {"target_line_num": 487, "target_line_code": "* String."}, {"target_line_num": 488, "target_line_code": "*/"}, {"target_line_num": 489, "target_line_code": "protected static final String find(ByteChunk name) {"}, {"target_line_num": 490, "target_line_code": "int pos = findClosest(name, bcCache, bcCache.length);"}, {"target_line_num": 491, "target_line_code": "if ((pos < 0) || (compare(name, bcCache[pos].name) != 0)"}, {"target_line_num": 492, "target_line_code": "|| !(name.getCharset().equals(bcCache[pos].charset))) {"}, {"target_line_num": 493, "target_line_code": "return null;"}, {"target_line_num": 494, "target_line_code": "} else {"}, {"target_line_num": 495, "target_line_code": "return bcCache[pos].value;"}, {"target_line_num": 500, "target_line_code": "/**"}, {"target_line_num": 501, "target_line_code": "* Find an entry given its name in a sorted array of map elements."}, {"target_line_num": 502, "target_line_code": "* This will return the index for the closest inferior or equal item in the"}, {"target_line_num": 503, "target_line_code": "* given array."}, {"target_line_num": 504, "target_line_code": "*/"}, {"target_line_num": 505, "target_line_code": "protected static final int findClosest(ByteChunk name, ByteEntry[] array,"}, {"target_line_num": 506, "target_line_code": "int len) {"}, {"target_line_num": 508, "target_line_code": "int a = 0;"}, {"target_line_num": 509, "target_line_code": "int b = len - 1;"}, {"target_line_num": 512, "target_line_code": "if (b == -1) {"}, {"target_line_num": 513, "target_line_code": "return -1;"}, {"target_line_num": 516, "target_line_code": "if (compare(name, array[0].name) < 0) {"}, {"target_line_num": 517, "target_line_code": "return -1;"}, {"target_line_num": 519, "target_line_code": "if (b == 0) {"}, {"target_line_num": 520, "target_line_code": "return 0;"}, {"target_line_num": 523, "target_line_code": "int i = 0;"}, {"target_line_num": 524, "target_line_code": "while (true) {"}, {"target_line_num": 525, "target_line_code": "i = (b + a) >>> 1;"}, {"target_line_num": 526, "target_line_code": "int result = compare(name, array[i].name);"}, {"target_line_num": 527, "target_line_code": "if (result == 1) {"}, {"target_line_num": 528, "target_line_code": "a = i;"}, {"target_line_num": 529, "target_line_code": "} else if (result == 0) {"}, {"target_line_num": 530, "target_line_code": "return i;"}, {"target_line_num": 531, "target_line_code": "} else {"}, {"target_line_num": 532, "target_line_code": "b = i;"}, {"target_line_num": 534, "target_line_code": "if ((b - a) == 1) {"}, {"target_line_num": 535, "target_line_code": "int result2 = compare(name, array[b].name);"}, {"target_line_num": 536, "target_line_code": "if (result2 < 0) {"}, {"target_line_num": 537, "target_line_code": "return a;"}, {"target_line_num": 538, "target_line_code": "} else {"}, {"target_line_num": 539, "target_line_code": "return b;"}, {"target_line_num": 547, "target_line_code": "/**"}, {"target_line_num": 548, "target_line_code": "* Compare given char chunk with char array."}, {"target_line_num": 549, "target_line_code": "* Return -1, 0 or +1 if inferior, equal, or superior to the String."}, {"target_line_num": 550, "target_line_code": "*/"}, {"target_line_num": 551, "target_line_code": "protected static final int compare(CharChunk name, char[] compareTo) {"}, {"target_line_num": 552, "target_line_code": "int result = 0;"}, {"target_line_num": 554, "target_line_code": "char[] c = name.getBuffer();"}, {"target_line_num": 555, "target_line_code": "int start = name.getStart();"}, {"target_line_num": 556, "target_line_code": "int end = name.getEnd();"}, {"target_line_num": 557, "target_line_code": "int len = compareTo.length;"}, {"target_line_num": 559, "target_line_code": "if ((end - start) < len) {"}, {"target_line_num": 560, "target_line_code": "len = end - start;"}, {"target_line_num": 562, "target_line_code": "for (int i = 0; (i < len) && (result == 0); i++) {"}, {"target_line_num": 563, "target_line_code": "if (c[i + start] > compareTo[i]) {"}, {"target_line_num": 564, "target_line_code": "result = 1;"}, {"target_line_num": 565, "target_line_code": "} else if (c[i + start] < compareTo[i]) {"}, {"target_line_num": 566, "target_line_code": "result = -1;"}, {"target_line_num": 569, "target_line_code": "if (result == 0) {"}, {"target_line_num": 570, "target_line_code": "if (compareTo.length > (end - start)) {"}, {"target_line_num": 571, "target_line_code": "result = -1;"}, {"target_line_num": 572, "target_line_code": "} else if (compareTo.length < (end - start)) {"}, {"target_line_num": 573, "target_line_code": "result = 1;"}, {"target_line_num": 576, "target_line_code": "return result;"}, {"target_line_num": 580, "target_line_code": "/**"}, {"target_line_num": 581, "target_line_code": "* Find an entry given its name in the cache and return the associated"}, {"target_line_num": 582, "target_line_code": "* String."}, {"target_line_num": 583, "target_line_code": "*/"}, {"target_line_num": 584, "target_line_code": "protected static final String find(CharChunk name) {"}, {"target_line_num": 585, "target_line_code": "int pos = findClosest(name, ccCache, ccCache.length);"}, {"target_line_num": 586, "target_line_code": "if ((pos < 0) || (compare(name, ccCache[pos].name) != 0)) {"}, {"target_line_num": 587, "target_line_code": "return null;"}, {"target_line_num": 588, "target_line_code": "} else {"}, {"target_line_num": 589, "target_line_code": "return ccCache[pos].value;"}, {"target_line_num": 594, "target_line_code": "/**"}, {"target_line_num": 595, "target_line_code": "* Find an entry given its name in a sorted array of map elements."}, {"target_line_num": 596, "target_line_code": "* This will return the index for the closest inferior or equal item in the"}, {"target_line_num": 597, "target_line_code": "* given array."}, {"target_line_num": 598, "target_line_code": "*/"}, {"target_line_num": 599, "target_line_code": "protected static final int findClosest(CharChunk name, CharEntry[] array,"}, {"target_line_num": 600, "target_line_code": "int len) {"}, {"target_line_num": 602, "target_line_code": "int a = 0;"}, {"target_line_num": 603, "target_line_code": "int b = len - 1;"}, {"target_line_num": 606, "target_line_code": "if (b == -1) {"}, {"target_line_num": 607, "target_line_code": "return -1;"}, {"target_line_num": 610, "target_line_code": "if (compare(name, array[0].name) < 0 ) {"}, {"target_line_num": 611, "target_line_code": "return -1;"}, {"target_line_num": 613, "target_line_code": "if (b == 0) {"}, {"target_line_num": 614, "target_line_code": "return 0;"}, {"target_line_num": 617, "target_line_code": "int i = 0;"}, {"target_line_num": 618, "target_line_code": "while (true) {"}, {"target_line_num": 619, "target_line_code": "i = (b + a) >>> 1;"}, {"target_line_num": 620, "target_line_code": "int result = compare(name, array[i].name);"}, {"target_line_num": 621, "target_line_code": "if (result == 1) {"}, {"target_line_num": 622, "target_line_code": "a = i;"}, {"target_line_num": 623, "target_line_code": "} else if (result == 0) {"}, {"target_line_num": 624, "target_line_code": "return i;"}, {"target_line_num": 625, "target_line_code": "} else {"}, {"target_line_num": 626, "target_line_code": "b = i;"}, {"target_line_num": 628, "target_line_code": "if ((b - a) == 1) {"}, {"target_line_num": 629, "target_line_code": "int result2 = compare(name, array[b].name);"}, {"target_line_num": 630, "target_line_code": "if (result2 < 0) {"}, {"target_line_num": 631, "target_line_code": "return a;"}, {"target_line_num": 632, "target_line_code": "} else {"}, {"target_line_num": 633, "target_line_code": "return b;"}, {"target_line_num": 644, "target_line_code": "private static class ByteEntry {"}, {"target_line_num": 646, "target_line_code": "private byte[] name = null;"}, {"target_line_num": 647, "target_line_code": "private Charset charset = null;"}, {"target_line_num": 648, "target_line_code": "private String value = null;"}, {"target_line_num": 650, "target_line_code": "@Override"}, {"target_line_num": 651, "target_line_code": "public String toString() {"}, {"target_line_num": 652, "target_line_code": "return value;"}, {"target_line_num": 654, "target_line_code": "@Override"}, {"target_line_num": 655, "target_line_code": "public int hashCode() {"}, {"target_line_num": 656, "target_line_code": "return value.hashCode();"}, {"target_line_num": 658, "target_line_code": "@Override"}, {"target_line_num": 659, "target_line_code": "public boolean equals(Object obj) {"}, {"target_line_num": 660, "target_line_code": "if (obj instanceof ByteEntry) {"}, {"target_line_num": 661, "target_line_code": "return value.equals(((ByteEntry) obj).value);"}, {"target_line_num": 663, "target_line_code": "return false;"}, {"target_line_num": 672, "target_line_code": "private static class CharEntry {"}, {"target_line_num": 674, "target_line_code": "private char[] name = null;"}, {"target_line_num": 675, "target_line_code": "private String value = null;"}, {"target_line_num": 677, "target_line_code": "@Override"}, {"target_line_num": 678, "target_line_code": "public String toString() {"}, {"target_line_num": 679, "target_line_code": "return value;"}, {"target_line_num": 681, "target_line_code": "@Override"}, {"target_line_num": 682, "target_line_code": "public int hashCode() {"}, {"target_line_num": 683, "target_line_code": "return value.hashCode();"}, {"target_line_num": 685, "target_line_code": "@Override"}, {"target_line_num": 686, "target_line_code": "public boolean equals(Object obj) {"}, {"target_line_num": 687, "target_line_code": "if (obj instanceof CharEntry) {"}, {"target_line_num": 688, "target_line_code": "return value.equals(((CharEntry) obj).value);"}, {"target_line_num": 690, "target_line_code": "return false;"}], "removed_line": [], "filename": "core/src/main/java/org/apache/struts2/util/tomcat/buf/StringCache.java", "patch_func": "no", "diff_file": "struts_CVE-2016-4003_76f188406eb9f17a06afcb5f49f0c44d749da0d2.diff", "patch_tag": "STRUTS_6_0_0_RC1", "source_tag": "STRUTS_2_5_BETA3"}]