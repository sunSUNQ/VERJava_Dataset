[{"cve_id": "struts", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "*  Licensed to the Apache Software Foundation (ASF) under one or more"}, {"target_line_num": 4, "target_line_code": "*  contributor license agreements.  See the NOTICE file distributed with"}, {"target_line_num": 5, "target_line_code": "*  this work for additional information regarding copyright ownership."}, {"target_line_num": 6, "target_line_code": "*  The ASF licenses this file to You under the Apache License, Version 2.0"}, {"target_line_num": 7, "target_line_code": "*  (the \"License\"); you may not use this file except in compliance with"}, {"target_line_num": 8, "target_line_code": "*  the License.  You may obtain a copy of the License at"}, {"target_line_num": 9, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "*"}, {"target_line_num": 12, "target_line_code": "*  Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 13, "target_line_code": "*  distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 14, "target_line_code": "*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 15, "target_line_code": "*  See the License for the specific language governing permissions and"}, {"target_line_num": 16, "target_line_code": "*  limitations under the License."}, {"target_line_num": 17, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "package org.apache.struts2.util.tomcat.buf;"}, {"target_line_num": 20, "target_line_code": "import com.opensymphony.xwork2.util.logging.LoggerFactory;"}, {"target_line_num": 22, "target_line_code": "import com.opensymphony.xwork2.util.logging.Logger;"}, {"target_line_num": 23, "target_line_code": "import java.io.CharConversionException;"}, {"target_line_num": 24, "target_line_code": "import java.io.IOException;"}, {"target_line_num": 25, "target_line_code": "import java.io.UnsupportedEncodingException;"}, {"target_line_num": 27, "target_line_code": "/**"}, {"target_line_num": 28, "target_line_code": "*  All URL decoding happens here. This way we can reuse, review, optimize"}, {"target_line_num": 29, "target_line_code": "*  without adding complexity to the buffers."}, {"target_line_num": 30, "target_line_code": "*"}, {"target_line_num": 31, "target_line_code": "*  The conversion will modify the original buffer."}, {"target_line_num": 32, "target_line_code": "*"}, {"target_line_num": 33, "target_line_code": "*  @author Costin Manolache"}, {"target_line_num": 34, "target_line_code": "*/"}, {"target_line_num": 35, "target_line_code": "public final class UDecoder {"}, {"target_line_num": 37, "target_line_code": "private static final Logger log = LoggerFactory.getLogger(UDecoder.class);"}, {"target_line_num": 39, "target_line_code": "public static final boolean ALLOW_ENCODED_SLASH ="}, {"target_line_num": 40, "target_line_code": "Boolean.parseBoolean(System.getProperty(\"org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH\", \"false\"));"}, {"target_line_num": 42, "target_line_code": "private static class DecodeException extends CharConversionException {"}, {"target_line_num": 43, "target_line_code": "private static final long serialVersionUID = 1L;"}, {"target_line_num": 44, "target_line_code": "public DecodeException(String s) {"}, {"target_line_num": 45, "target_line_code": "super(s);"}, {"target_line_num": 48, "target_line_code": "@Override"}, {"target_line_num": 49, "target_line_code": "public synchronized Throwable fillInStackTrace() {"}, {"target_line_num": 51, "target_line_code": "return this;"}, {"target_line_num": 55, "target_line_code": "/** Unexpected end of data. */"}, {"target_line_num": 56, "target_line_code": "private static final IOException EXCEPTION_EOF = new DecodeException(\"EOF\");"}, {"target_line_num": 58, "target_line_code": "/** %xx with not-hex digit */"}, {"target_line_num": 59, "target_line_code": "private static final IOException EXCEPTION_NOT_HEX_DIGIT = new DecodeException("}, {"target_line_num": 60, "target_line_code": "\"isHexDigit\");"}, {"target_line_num": 62, "target_line_code": "/** %-encoded slash is forbidden in resource path */"}, {"target_line_num": 63, "target_line_code": "private static final IOException EXCEPTION_SLASH = new DecodeException("}, {"target_line_num": 64, "target_line_code": "\"noSlash\");"}, {"target_line_num": 66, "target_line_code": "public UDecoder()"}, {"target_line_num": 67, "target_line_code": "{"}, {"target_line_num": 70, "target_line_code": "/** URLDecode, will modify the source."}, {"target_line_num": 71, "target_line_code": "*/"}, {"target_line_num": 72, "target_line_code": "public void convert( ByteChunk mb, boolean query )"}, {"target_line_num": 73, "target_line_code": "throws IOException"}, {"target_line_num": 74, "target_line_code": "{"}, {"target_line_num": 75, "target_line_code": "int start=mb.getOffset();"}, {"target_line_num": 76, "target_line_code": "byte buff[]=mb.getBytes();"}, {"target_line_num": 77, "target_line_code": "int end=mb.getEnd();"}, {"target_line_num": 79, "target_line_code": "int idx= ByteChunk.findByte( buff, start, end, (byte) '%' );"}, {"target_line_num": 80, "target_line_code": "int idx2=-1;"}, {"target_line_num": 81, "target_line_code": "if( query ) {"}, {"target_line_num": 82, "target_line_code": "idx2= ByteChunk.findByte( buff, start, (idx >= 0 ? idx : end), (byte) '+' );"}, {"target_line_num": 84, "target_line_code": "if( idx<0 && idx2<0 ) {"}, {"target_line_num": 85, "target_line_code": "return;"}, {"target_line_num": 89, "target_line_code": "if( (idx2 >= 0 && idx2 < idx) || idx < 0 ) {"}, {"target_line_num": 90, "target_line_code": "idx=idx2;"}, {"target_line_num": 93, "target_line_code": "final boolean noSlash = !(ALLOW_ENCODED_SLASH || query);"}, {"target_line_num": 95, "target_line_code": "for( int j=idx; j<end; j++, idx++ ) {"}, {"target_line_num": 96, "target_line_code": "if( buff[ j ] == '+' && query) {"}, {"target_line_num": 97, "target_line_code": "buff[idx]= (byte)' ' ;"}, {"target_line_num": 98, "target_line_code": "} else if( buff[ j ] != '%' ) {"}, {"target_line_num": 99, "target_line_code": "buff[idx]= buff[j];"}, {"target_line_num": 100, "target_line_code": "} else {"}, {"target_line_num": 102, "target_line_code": "if( j+2 >= end ) {"}, {"target_line_num": 103, "target_line_code": "throw EXCEPTION_EOF;"}, {"target_line_num": 105, "target_line_code": "byte b1= buff[j+1];"}, {"target_line_num": 106, "target_line_code": "byte b2=buff[j+2];"}, {"target_line_num": 107, "target_line_code": "if( !isHexDigit( b1 ) || ! isHexDigit(b2 )) {"}, {"target_line_num": 108, "target_line_code": "throw EXCEPTION_NOT_HEX_DIGIT;"}, {"target_line_num": 111, "target_line_code": "j+=2;"}, {"target_line_num": 112, "target_line_code": "int res=x2c( b1, b2 );"}, {"target_line_num": 113, "target_line_code": "if (noSlash && (res == '/')) {"}, {"target_line_num": 114, "target_line_code": "throw EXCEPTION_SLASH;"}, {"target_line_num": 116, "target_line_code": "buff[idx]=(byte)res;"}, {"target_line_num": 120, "target_line_code": "mb.setEnd( idx );"}, {"target_line_num": 122, "target_line_code": "return;"}, {"target_line_num": 128, "target_line_code": "/** In-buffer processing - the buffer will be modified"}, {"target_line_num": 129, "target_line_code": "*/"}, {"target_line_num": 130, "target_line_code": "public void convert( CharChunk mb, boolean query )"}, {"target_line_num": 131, "target_line_code": "throws IOException"}, {"target_line_num": 132, "target_line_code": "{"}, {"target_line_num": 134, "target_line_code": "int start=mb.getOffset();"}, {"target_line_num": 135, "target_line_code": "char buff[]=mb.getBuffer();"}, {"target_line_num": 136, "target_line_code": "int cend=mb.getEnd();"}, {"target_line_num": 138, "target_line_code": "int idx= CharChunk.indexOf( buff, start, cend, '%' );"}, {"target_line_num": 139, "target_line_code": "int idx2=-1;"}, {"target_line_num": 140, "target_line_code": "if( query ) {"}, {"target_line_num": 141, "target_line_code": "idx2= CharChunk.indexOf( buff, start, (idx >= 0 ? idx : cend), '+' );"}, {"target_line_num": 143, "target_line_code": "if( idx<0 && idx2<0 ) {"}, {"target_line_num": 144, "target_line_code": "return;"}, {"target_line_num": 148, "target_line_code": "if( (idx2 >= 0 && idx2 < idx) || idx < 0 ) {"}, {"target_line_num": 149, "target_line_code": "idx=idx2;"}, {"target_line_num": 152, "target_line_code": "final boolean noSlash = !(ALLOW_ENCODED_SLASH || query);"}, {"target_line_num": 154, "target_line_code": "for( int j=idx; j<cend; j++, idx++ ) {"}, {"target_line_num": 155, "target_line_code": "if( buff[ j ] == '+' && query ) {"}, {"target_line_num": 156, "target_line_code": "buff[idx]=( ' ' );"}, {"target_line_num": 157, "target_line_code": "} else if( buff[ j ] != '%' ) {"}, {"target_line_num": 158, "target_line_code": "buff[idx]=buff[j];"}, {"target_line_num": 159, "target_line_code": "} else {"}, {"target_line_num": 161, "target_line_code": "if( j+2 >= cend ) {"}, {"target_line_num": 163, "target_line_code": "throw EXCEPTION_EOF;"}, {"target_line_num": 165, "target_line_code": "char b1= buff[j+1];"}, {"target_line_num": 166, "target_line_code": "char b2=buff[j+2];"}, {"target_line_num": 167, "target_line_code": "if( !isHexDigit( b1 ) || ! isHexDigit(b2 )) {"}, {"target_line_num": 168, "target_line_code": "throw EXCEPTION_NOT_HEX_DIGIT;"}, {"target_line_num": 171, "target_line_code": "j+=2;"}, {"target_line_num": 172, "target_line_code": "int res=x2c( b1, b2 );"}, {"target_line_num": 173, "target_line_code": "if (noSlash && (res == '/')) {"}, {"target_line_num": 174, "target_line_code": "throw EXCEPTION_SLASH;"}, {"target_line_num": 176, "target_line_code": "buff[idx]=(char)res;"}, {"target_line_num": 179, "target_line_code": "mb.setEnd( idx );"}, {"target_line_num": 182, "target_line_code": "/** URLDecode, will modify the source"}, {"target_line_num": 183, "target_line_code": "*/"}, {"target_line_num": 184, "target_line_code": "public void convert(MessageBytes mb, boolean query)"}, {"target_line_num": 185, "target_line_code": "throws IOException"}, {"target_line_num": 186, "target_line_code": "{"}, {"target_line_num": 188, "target_line_code": "switch (mb.getType()) {"}, {"target_line_num": 189, "target_line_code": "case MessageBytes.T_STR:"}, {"target_line_num": 190, "target_line_code": "String strValue=mb.toString();"}, {"target_line_num": 191, "target_line_code": "if( strValue==null ) {"}, {"target_line_num": 192, "target_line_code": "return;"}, {"target_line_num": 194, "target_line_code": "try {"}, {"target_line_num": 195, "target_line_code": "mb.setString( convert( strValue, query ));"}, {"target_line_num": 196, "target_line_code": "} catch (RuntimeException ex) {"}, {"target_line_num": 197, "target_line_code": "throw new DecodeException(ex.getMessage());"}, {"target_line_num": 199, "target_line_code": "break;"}, {"target_line_num": 200, "target_line_code": "case MessageBytes.T_CHARS:"}, {"target_line_num": 201, "target_line_code": "CharChunk charC=mb.getCharChunk();"}, {"target_line_num": 202, "target_line_code": "convert( charC, query );"}, {"target_line_num": 203, "target_line_code": "break;"}, {"target_line_num": 204, "target_line_code": "case MessageBytes.T_BYTES:"}, {"target_line_num": 205, "target_line_code": "ByteChunk bytesC=mb.getByteChunk();"}, {"target_line_num": 206, "target_line_code": "convert( bytesC, query );"}, {"target_line_num": 207, "target_line_code": "break;"}, {"target_line_num": 213, "target_line_code": "public final String convert(String str, boolean query)"}, {"target_line_num": 214, "target_line_code": "{"}, {"target_line_num": 215, "target_line_code": "if (str == null) {"}, {"target_line_num": 216, "target_line_code": "return  null;"}, {"target_line_num": 219, "target_line_code": "if( (!query || str.indexOf( '+' ) < 0) && str.indexOf( '%' ) < 0 ) {"}, {"target_line_num": 220, "target_line_code": "return str;"}, {"target_line_num": 223, "target_line_code": "final boolean noSlash = !(ALLOW_ENCODED_SLASH || query);"}, {"target_line_num": 226, "target_line_code": "int strPos = 0;"}, {"target_line_num": 227, "target_line_code": "int strLen = str.length();"}, {"target_line_num": 229, "target_line_code": "dec.ensureCapacity(str.length());"}, {"target_line_num": 230, "target_line_code": "while (strPos < strLen) {"}, {"target_line_num": 234, "target_line_code": "for (laPos = strPos; laPos < strLen; laPos++) {"}, {"target_line_num": 235, "target_line_code": "char laChar = str.charAt(laPos);"}, {"target_line_num": 236, "target_line_code": "if ((laChar == '+' && query) || (laChar == '%')) {"}, {"target_line_num": 237, "target_line_code": "break;"}, {"target_line_num": 242, "target_line_code": "if (laPos > strPos) {"}, {"target_line_num": 243, "target_line_code": "dec.append(str.substring(strPos,laPos));"}, {"target_line_num": 244, "target_line_code": "strPos = laPos;"}, {"target_line_num": 248, "target_line_code": "if (strPos >= strLen) {"}, {"target_line_num": 249, "target_line_code": "break;"}, {"target_line_num": 253, "target_line_code": "char metaChar = str.charAt(strPos);"}, {"target_line_num": 254, "target_line_code": "if (metaChar == '+') {"}, {"target_line_num": 255, "target_line_code": "dec.append(' ');"}, {"target_line_num": 256, "target_line_code": "strPos++;"}, {"target_line_num": 257, "target_line_code": "continue;"}, {"target_line_num": 258, "target_line_code": "} else if (metaChar == '%') {"}, {"target_line_num": 262, "target_line_code": "char res = (char) Integer.parseInt("}, {"target_line_num": 263, "target_line_code": "str.substring(strPos + 1, strPos + 3), 16);"}, {"target_line_num": 264, "target_line_code": "if (noSlash && (res == '/')) {"}, {"target_line_num": 265, "target_line_code": "throw new IllegalArgumentException(\"noSlash\");"}, {"target_line_num": 267, "target_line_code": "dec.append(res);"}, {"target_line_num": 268, "target_line_code": "strPos += 3;"}, {"target_line_num": 272, "target_line_code": "return dec.toString();"}, {"target_line_num": 276, "target_line_code": "/**"}, {"target_line_num": 277, "target_line_code": "* Decode and return the specified URL-encoded String."}, {"target_line_num": 278, "target_line_code": "* When the byte array is converted to a string, the system default"}, {"target_line_num": 279, "target_line_code": "* character encoding is used...  This may be different than some other"}, {"target_line_num": 280, "target_line_code": "* servers. It is assumed the string is not a query string."}, {"target_line_num": 281, "target_line_code": "*"}, {"target_line_num": 282, "target_line_code": "* @param str The url-encoded string"}, {"target_line_num": 283, "target_line_code": "*"}, {"target_line_num": 284, "target_line_code": "* @exception IllegalArgumentException if a '%' character is not followed"}, {"target_line_num": 285, "target_line_code": "* by a valid 2-digit hexadecimal number"}, {"target_line_num": 286, "target_line_code": "*/"}, {"target_line_num": 287, "target_line_code": "public static String URLDecode(String str) {"}, {"target_line_num": 288, "target_line_code": "return URLDecode(str, null);"}, {"target_line_num": 292, "target_line_code": "/**"}, {"target_line_num": 293, "target_line_code": "* Decode and return the specified URL-encoded String. It is assumed the"}, {"target_line_num": 294, "target_line_code": "* string is not a query string."}, {"target_line_num": 295, "target_line_code": "*"}, {"target_line_num": 296, "target_line_code": "* @param str The url-encoded string"}, {"target_line_num": 297, "target_line_code": "* @param enc The encoding to use; if null, the default encoding is used. If"}, {"target_line_num": 298, "target_line_code": "* an unsupported encoding is specified null will be returned"}, {"target_line_num": 299, "target_line_code": "* @exception IllegalArgumentException if a '%' character is not followed"}, {"target_line_num": 300, "target_line_code": "* by a valid 2-digit hexadecimal number"}, {"target_line_num": 301, "target_line_code": "*/"}, {"target_line_num": 302, "target_line_code": "public static String URLDecode(String str, String enc) {"}, {"target_line_num": 303, "target_line_code": "return URLDecode(str, enc, false);"}, {"target_line_num": 307, "target_line_code": "/**"}, {"target_line_num": 308, "target_line_code": "* Decode and return the specified URL-encoded String."}, {"target_line_num": 309, "target_line_code": "*"}, {"target_line_num": 310, "target_line_code": "* @param str The url-encoded string"}, {"target_line_num": 311, "target_line_code": "* @param enc The encoding to use; if null, the default encoding is used. If"}, {"target_line_num": 312, "target_line_code": "* an unsupported encoding is specified null will be returned"}, {"target_line_num": 313, "target_line_code": "* @param isQuery Is this a query string being processed"}, {"target_line_num": 314, "target_line_code": "* @exception IllegalArgumentException if a '%' character is not followed"}, {"target_line_num": 315, "target_line_code": "* by a valid 2-digit hexadecimal number"}, {"target_line_num": 316, "target_line_code": "*/"}, {"target_line_num": 317, "target_line_code": "public static String URLDecode(String str, String enc, boolean isQuery) {"}, {"target_line_num": 318, "target_line_code": "if (str == null)"}, {"target_line_num": 319, "target_line_code": "return (null);"}, {"target_line_num": 324, "target_line_code": "byte[] bytes = null;"}, {"target_line_num": 325, "target_line_code": "try {"}, {"target_line_num": 326, "target_line_code": "if (enc == null) {"}, {"target_line_num": 327, "target_line_code": "bytes = str.getBytes(\"ISO-8859-1\");"}, {"target_line_num": 328, "target_line_code": "} else {"}, {"target_line_num": 329, "target_line_code": "bytes = str.getBytes(B2CConverter.getCharset(enc));"}, {"target_line_num": 331, "target_line_code": "} catch (UnsupportedEncodingException uee) {"}, {"target_line_num": 332, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 333, "target_line_code": "log.debug(\"Unable to URL decode the specified input since the encoding \"+ enc + \" is not supported.\", uee);"}, {"target_line_num": 337, "target_line_code": "return URLDecode(bytes, enc, isQuery);"}, {"target_line_num": 342, "target_line_code": "/**"}, {"target_line_num": 343, "target_line_code": "* Decode and return the specified URL-encoded byte array."}, {"target_line_num": 344, "target_line_code": "*"}, {"target_line_num": 345, "target_line_code": "* @param bytes The url-encoded byte array"}, {"target_line_num": 346, "target_line_code": "* @param enc The encoding to use; if null, the default encoding is used. If"}, {"target_line_num": 347, "target_line_code": "* an unsupported encoding is specified null will be returned"}, {"target_line_num": 348, "target_line_code": "* @param isQuery Is this a query string being processed"}, {"target_line_num": 349, "target_line_code": "* @exception IllegalArgumentException if a '%' character is not followed"}, {"target_line_num": 350, "target_line_code": "* by a valid 2-digit hexadecimal number"}, {"target_line_num": 351, "target_line_code": "*/"}, {"target_line_num": 352, "target_line_code": "public static String URLDecode(byte[] bytes, String enc, boolean isQuery) {"}, {"target_line_num": 354, "target_line_code": "if (bytes == null)"}, {"target_line_num": 355, "target_line_code": "return null;"}, {"target_line_num": 357, "target_line_code": "int len = bytes.length;"}, {"target_line_num": 358, "target_line_code": "int ix = 0;"}, {"target_line_num": 359, "target_line_code": "int ox = 0;"}, {"target_line_num": 360, "target_line_code": "while (ix < len) {"}, {"target_line_num": 362, "target_line_code": "if (b == '+' && isQuery) {"}, {"target_line_num": 363, "target_line_code": "b = (byte)' ';"}, {"target_line_num": 364, "target_line_code": "} else if (b == '%') {"}, {"target_line_num": 365, "target_line_code": "if (ix + 2 > len) {"}, {"target_line_num": 366, "target_line_code": "throw new IllegalArgumentException("}, {"target_line_num": 367, "target_line_code": "\"The % character must be followed by two hexademical digits\");"}, {"target_line_num": 369, "target_line_code": "b = (byte) ((convertHexDigit(bytes[ix++]) << 4)"}, {"target_line_num": 370, "target_line_code": "+ convertHexDigit(bytes[ix++]));"}, {"target_line_num": 372, "target_line_code": "bytes[ox++] = b;"}, {"target_line_num": 374, "target_line_code": "if (enc != null) {"}, {"target_line_num": 375, "target_line_code": "try {"}, {"target_line_num": 376, "target_line_code": "return new String(bytes, 0, ox, B2CConverter.getCharset(enc));"}, {"target_line_num": 377, "target_line_code": "} catch (UnsupportedEncodingException uee) {"}, {"target_line_num": 378, "target_line_code": "if (log.isDebugEnabled()) {"}, {"target_line_num": 379, "target_line_code": "log.debug(\"Unable to URL decode the specified input since the encoding \" + enc + \" is not supported.\", uee);"}, {"target_line_num": 381, "target_line_code": "return null;"}, {"target_line_num": 384, "target_line_code": "return new String(bytes, 0, ox);"}, {"target_line_num": 389, "target_line_code": "private static byte convertHexDigit( byte b ) {"}, {"target_line_num": 390, "target_line_code": "if ((b >= '0') && (b <= '9')) return (byte)(b - '0');"}, {"target_line_num": 391, "target_line_code": "if ((b >= 'a') && (b <= 'f')) return (byte)(b - 'a' + 10);"}, {"target_line_num": 392, "target_line_code": "if ((b >= 'A') && (b <= 'F')) return (byte)(b - 'A' + 10);"}, {"target_line_num": 393, "target_line_code": "throw new IllegalArgumentException(((char) b) + \" is not a hexadecimal digit\");"}, {"target_line_num": 397, "target_line_code": "private static boolean isHexDigit( int c ) {"}, {"target_line_num": 398, "target_line_code": "return ( ( c>='0' && c<='9' ) ||"}, {"target_line_num": 399, "target_line_code": "( c>='a' && c<='f' ) ||"}, {"target_line_num": 400, "target_line_code": "( c>='A' && c<='F' ));"}, {"target_line_num": 404, "target_line_code": "private static int x2c( byte b1, byte b2 ) {"}, {"target_line_num": 405, "target_line_code": "int digit= (b1>='A') ? ( (b1 & 0xDF)-'A') + 10 :"}, {"target_line_num": 406, "target_line_code": "(b1 -'0');"}, {"target_line_num": 407, "target_line_code": "digit*=16;"}, {"target_line_num": 408, "target_line_code": "digit +=(b2>='A') ? ( (b2 & 0xDF)-'A') + 10 :"}, {"target_line_num": 409, "target_line_code": "(b2 -'0');"}, {"target_line_num": 410, "target_line_code": "return digit;"}, {"target_line_num": 414, "target_line_code": "private static int x2c( char b1, char b2 ) {"}, {"target_line_num": 415, "target_line_code": "int digit= (b1>='A') ? ( (b1 & 0xDF)-'A') + 10 :"}, {"target_line_num": 416, "target_line_code": "(b1 -'0');"}, {"target_line_num": 417, "target_line_code": "digit*=16;"}, {"target_line_num": 418, "target_line_code": "digit +=(b2>='A') ? ( (b2 & 0xDF)-'A') + 10 :"}, {"target_line_num": 419, "target_line_code": "(b2 -'0');"}, {"target_line_num": 420, "target_line_code": "return digit;"}], "removed_line": [], "filename": "core/src/main/java/org/apache/struts2/util/tomcat/buf/UDecoder.java", "patch_func": "no", "diff_file": "struts_CVE-2016-4003_76f188406eb9f17a06afcb5f49f0c44d749da0d2.diff", "patch_tag": "STRUTS_6_0_0_RC1", "source_tag": "STRUTS_2_5_BETA3"}]