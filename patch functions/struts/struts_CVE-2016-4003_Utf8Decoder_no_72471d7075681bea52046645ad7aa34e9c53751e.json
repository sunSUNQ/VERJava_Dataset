[{"cve_id": "struts", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "* Licensed to the Apache Software Foundation (ASF) under one or more"}, {"target_line_num": 4, "target_line_code": "* contributor license agreements.  See the NOTICE file distributed with"}, {"target_line_num": 5, "target_line_code": "* this work for additional information regarding copyright ownership."}, {"target_line_num": 6, "target_line_code": "* The ASF licenses this file to You under the Apache License, Version 2.0"}, {"target_line_num": 7, "target_line_code": "* (the \"License\"); you may not use this file except in compliance with"}, {"target_line_num": 8, "target_line_code": "* the License.  You may obtain a copy of the License at"}, {"target_line_num": 9, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "*"}, {"target_line_num": 12, "target_line_code": "* Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 13, "target_line_code": "* distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 14, "target_line_code": "* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 15, "target_line_code": "* See the License for the specific language governing permissions and"}, {"target_line_num": 16, "target_line_code": "* limitations under the License."}, {"target_line_num": 17, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "package org.apache.struts2.util.tomcat.buf;"}, {"target_line_num": 20, "target_line_code": "import java.nio.ByteBuffer;"}, {"target_line_num": 21, "target_line_code": "import java.nio.CharBuffer;"}, {"target_line_num": 22, "target_line_code": "import java.nio.charset.CharsetDecoder;"}, {"target_line_num": 23, "target_line_code": "import java.nio.charset.CoderResult;"}, {"target_line_num": 25, "target_line_code": "/**"}, {"target_line_num": 26, "target_line_code": "* Decodes bytes to UTF-8. Extracted from Apache Harmony and modified to reject"}, {"target_line_num": 27, "target_line_code": "* code points from U+D800 to U+DFFF as per RFC3629. The standard Java decoder"}, {"target_line_num": 28, "target_line_code": "* does not reject these. It has also been modified to reject code points"}, {"target_line_num": 29, "target_line_code": "* greater than U+10FFFF which the standard Java decoder rejects but the harmony"}, {"target_line_num": 30, "target_line_code": "* one does not."}, {"target_line_num": 31, "target_line_code": "*/"}, {"target_line_num": 32, "target_line_code": "public class Utf8Decoder extends CharsetDecoder {"}, {"target_line_num": 46, "target_line_code": "private static final int remainingBytes[] = {"}, {"target_line_num": 48, "target_line_code": "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"}, {"target_line_num": 49, "target_line_code": "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"}, {"target_line_num": 50, "target_line_code": "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"}, {"target_line_num": 51, "target_line_code": "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"}, {"target_line_num": 53, "target_line_code": "-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}, {"target_line_num": 54, "target_line_code": "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}, {"target_line_num": 56, "target_line_code": "2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"}, {"target_line_num": 58, "target_line_code": "3, 3, 3, 3, 3, -1, -1, -1,"}, {"target_line_num": 60, "target_line_code": "-1, -1, -1, -1, -1, -1, -1, -1};"}, {"target_line_num": 66, "target_line_code": "};"}, {"target_line_num": 67, "target_line_code": "private static final int lowerEncodingLimit[] = {-1, 0x80, 0x800, 0x10000};"}, {"target_line_num": 70, "target_line_code": "public Utf8Decoder() {"}, {"target_line_num": 71, "target_line_code": "super(B2CConverter.UTF_8, 1.0f, 1.0f);"}, {"target_line_num": 75, "target_line_code": "@Override"}, {"target_line_num": 76, "target_line_code": "protected CoderResult decodeLoop(ByteBuffer in, CharBuffer out) {"}, {"target_line_num": 77, "target_line_code": "if (in.hasArray() && out.hasArray()) {"}, {"target_line_num": 78, "target_line_code": "return decodeHasArray(in, out);"}, {"target_line_num": 80, "target_line_code": "return decodeNotHasArray(in, out);"}, {"target_line_num": 84, "target_line_code": "private CoderResult decodeNotHasArray(ByteBuffer in, CharBuffer out) {"}, {"target_line_num": 85, "target_line_code": "int outRemaining = out.remaining();"}, {"target_line_num": 86, "target_line_code": "int pos = in.position();"}, {"target_line_num": 87, "target_line_code": "int limit = in.limit();"}, {"target_line_num": 88, "target_line_code": "try {"}, {"target_line_num": 89, "target_line_code": "while (pos < limit) {"}, {"target_line_num": 90, "target_line_code": "if (outRemaining == 0) {"}, {"target_line_num": 91, "target_line_code": "return CoderResult.OVERFLOW;"}, {"target_line_num": 93, "target_line_code": "int jchar = in.get();"}, {"target_line_num": 94, "target_line_code": "if (jchar < 0) {"}, {"target_line_num": 95, "target_line_code": "jchar = jchar & 0x7F;"}, {"target_line_num": 96, "target_line_code": "int tail = remainingBytes[jchar];"}, {"target_line_num": 97, "target_line_code": "if (tail == -1) {"}, {"target_line_num": 98, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 100, "target_line_code": "if (limit - pos < 1 + tail) {"}, {"target_line_num": 103, "target_line_code": "return CoderResult.UNDERFLOW;"}, {"target_line_num": 105, "target_line_code": "int nextByte;"}, {"target_line_num": 106, "target_line_code": "for (int i = 0; i < tail; i++) {"}, {"target_line_num": 107, "target_line_code": "nextByte = in.get() & 0xFF;"}, {"target_line_num": 108, "target_line_code": "if ((nextByte & 0xC0) != 0x80) {"}, {"target_line_num": 109, "target_line_code": "return CoderResult.malformedForLength(1 + i);"}, {"target_line_num": 111, "target_line_code": "jchar = (jchar << 6) + nextByte;"}, {"target_line_num": 113, "target_line_code": "jchar -= remainingNumbers[tail];"}, {"target_line_num": 114, "target_line_code": "if (jchar < lowerEncodingLimit[tail]) {"}, {"target_line_num": 116, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 118, "target_line_code": "pos += tail;"}, {"target_line_num": 121, "target_line_code": "if (jchar >= 0xD800 && jchar <= 0xDFFF) {"}, {"target_line_num": 122, "target_line_code": "return CoderResult.unmappableForLength(3);"}, {"target_line_num": 125, "target_line_code": "if (jchar > 0x10FFFF) {"}, {"target_line_num": 126, "target_line_code": "return CoderResult.unmappableForLength(4);"}, {"target_line_num": 128, "target_line_code": "if (jchar <= 0xffff) {"}, {"target_line_num": 129, "target_line_code": "out.put((char) jchar);"}, {"target_line_num": 130, "target_line_code": "outRemaining--;"}, {"target_line_num": 131, "target_line_code": "} else {"}, {"target_line_num": 132, "target_line_code": "if (outRemaining < 2) {"}, {"target_line_num": 133, "target_line_code": "return CoderResult.OVERFLOW;"}, {"target_line_num": 135, "target_line_code": "out.put((char) ((jchar >> 0xA) + 0xD7C0));"}, {"target_line_num": 136, "target_line_code": "out.put((char) ((jchar & 0x3FF) + 0xDC00));"}, {"target_line_num": 137, "target_line_code": "outRemaining -= 2;"}, {"target_line_num": 139, "target_line_code": "pos++;"}, {"target_line_num": 141, "target_line_code": "return CoderResult.UNDERFLOW;"}, {"target_line_num": 142, "target_line_code": "} finally {"}, {"target_line_num": 143, "target_line_code": "in.position(pos);"}, {"target_line_num": 148, "target_line_code": "private CoderResult decodeHasArray(ByteBuffer in, CharBuffer out) {"}, {"target_line_num": 149, "target_line_code": "int outRemaining = out.remaining();"}, {"target_line_num": 150, "target_line_code": "int pos = in.position();"}, {"target_line_num": 151, "target_line_code": "int limit = in.limit();"}, {"target_line_num": 152, "target_line_code": "final byte[] bArr = in.array();"}, {"target_line_num": 153, "target_line_code": "final char[] cArr = out.array();"}, {"target_line_num": 154, "target_line_code": "final int inIndexLimit = limit + in.arrayOffset();"}, {"target_line_num": 155, "target_line_code": "int inIndex = pos + in.arrayOffset();"}, {"target_line_num": 156, "target_line_code": "int outIndex = out.position() + out.arrayOffset();"}, {"target_line_num": 159, "target_line_code": "for (; inIndex < inIndexLimit && outRemaining > 0; inIndex++) {"}, {"target_line_num": 160, "target_line_code": "int jchar = bArr[inIndex];"}, {"target_line_num": 161, "target_line_code": "if (jchar < 0) {"}, {"target_line_num": 162, "target_line_code": "jchar = jchar & 0x7F;"}, {"target_line_num": 164, "target_line_code": "int tail = remainingBytes[jchar];"}, {"target_line_num": 165, "target_line_code": "if (tail == -1) {"}, {"target_line_num": 166, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 167, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 168, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 173, "target_line_code": "int tailAvailable = inIndexLimit - inIndex - 1;"}, {"target_line_num": 174, "target_line_code": "if (tailAvailable > 0) {"}, {"target_line_num": 176, "target_line_code": "if (jchar > 0x41 && jchar < 0x60 &&"}, {"target_line_num": 177, "target_line_code": "(bArr[inIndex + 1] & 0xC0) != 0x80) {"}, {"target_line_num": 178, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 179, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 180, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 183, "target_line_code": "if (jchar == 0x60 && (bArr[inIndex + 1] & 0xE0) != 0xA0) {"}, {"target_line_num": 184, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 185, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 186, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 189, "target_line_code": "if (jchar > 0x60 && jchar < 0x6D &&"}, {"target_line_num": 190, "target_line_code": "(bArr[inIndex + 1] & 0xC0) != 0x80) {"}, {"target_line_num": 191, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 192, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 193, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 196, "target_line_code": "if (jchar == 0x6D && (bArr[inIndex + 1] & 0xE0) != 0x80) {"}, {"target_line_num": 197, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 198, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 199, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 202, "target_line_code": "if (jchar > 0x6D && jchar < 0x70 &&"}, {"target_line_num": 203, "target_line_code": "(bArr[inIndex + 1] & 0xC0) != 0x80) {"}, {"target_line_num": 204, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 205, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 206, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 209, "target_line_code": "if (jchar == 0x70 &&"}, {"target_line_num": 210, "target_line_code": "((bArr[inIndex + 1] & 0xFF) < 0x90 ||"}, {"target_line_num": 211, "target_line_code": "(bArr[inIndex + 1] & 0xFF) > 0xBF)) {"}, {"target_line_num": 212, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 213, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 214, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 217, "target_line_code": "if (jchar > 0x70 && jchar < 0x74 &&"}, {"target_line_num": 218, "target_line_code": "(bArr[inIndex + 1] & 0xC0) != 0x80) {"}, {"target_line_num": 219, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 220, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 221, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 224, "target_line_code": "if (jchar == 0x74 &&"}, {"target_line_num": 225, "target_line_code": "(bArr[inIndex + 1] & 0xF0) != 0x80) {"}, {"target_line_num": 226, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 227, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 228, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 232, "target_line_code": "if (tailAvailable > 1 && tail > 1) {"}, {"target_line_num": 233, "target_line_code": "if ((bArr[inIndex + 2] & 0xC0) != 0x80) {"}, {"target_line_num": 234, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 235, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 236, "target_line_code": "return CoderResult.malformedForLength(2);"}, {"target_line_num": 240, "target_line_code": "if (tailAvailable > 2 && tail > 2) {"}, {"target_line_num": 241, "target_line_code": "if ((bArr[inIndex + 3] & 0xC0) != 0x80) {"}, {"target_line_num": 242, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 243, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 244, "target_line_code": "return CoderResult.malformedForLength(3);"}, {"target_line_num": 247, "target_line_code": "if (tailAvailable < tail) {"}, {"target_line_num": 248, "target_line_code": "break;"}, {"target_line_num": 250, "target_line_code": "for (int i = 0; i < tail; i++) {"}, {"target_line_num": 251, "target_line_code": "int nextByte = bArr[inIndex + i + 1] & 0xFF;"}, {"target_line_num": 252, "target_line_code": "if ((nextByte & 0xC0) != 0x80) {"}, {"target_line_num": 253, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 254, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 255, "target_line_code": "return CoderResult.malformedForLength(1 + i);"}, {"target_line_num": 257, "target_line_code": "jchar = (jchar << 6) + nextByte;"}, {"target_line_num": 259, "target_line_code": "jchar -= remainingNumbers[tail];"}, {"target_line_num": 260, "target_line_code": "if (jchar < lowerEncodingLimit[tail]) {"}, {"target_line_num": 262, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 263, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 264, "target_line_code": "return CoderResult.malformedForLength(1);"}, {"target_line_num": 266, "target_line_code": "inIndex += tail;"}, {"target_line_num": 269, "target_line_code": "if (jchar >= 0xD800 && jchar <= 0xDFFF) {"}, {"target_line_num": 270, "target_line_code": "return CoderResult.unmappableForLength(3);"}, {"target_line_num": 273, "target_line_code": "if (jchar > 0x10FFFF) {"}, {"target_line_num": 274, "target_line_code": "return CoderResult.unmappableForLength(4);"}, {"target_line_num": 276, "target_line_code": "if (jchar <= 0xffff) {"}, {"target_line_num": 277, "target_line_code": "cArr[outIndex++] = (char) jchar;"}, {"target_line_num": 278, "target_line_code": "outRemaining--;"}, {"target_line_num": 279, "target_line_code": "} else {"}, {"target_line_num": 280, "target_line_code": "if (outRemaining < 2) {"}, {"target_line_num": 281, "target_line_code": "return CoderResult.OVERFLOW;"}, {"target_line_num": 283, "target_line_code": "cArr[outIndex++] = (char) ((jchar >> 0xA) + 0xD7C0);"}, {"target_line_num": 284, "target_line_code": "cArr[outIndex++] = (char) ((jchar & 0x3FF) + 0xDC00);"}, {"target_line_num": 285, "target_line_code": "outRemaining -= 2;"}, {"target_line_num": 288, "target_line_code": "in.position(inIndex - in.arrayOffset());"}, {"target_line_num": 289, "target_line_code": "out.position(outIndex - out.arrayOffset());"}, {"target_line_num": 290, "target_line_code": "return (outRemaining == 0 && inIndex < inIndexLimit) ?"}, {"target_line_num": 291, "target_line_code": "CoderResult.OVERFLOW :"}, {"target_line_num": 292, "target_line_code": "CoderResult.UNDERFLOW;"}], "removed_line": [], "filename": "core/src/main/java/org/apache/struts2/util/tomcat/buf/Utf8Decoder.java", "patch_func": "no", "diff_file": "struts_CVE-2016-4003_72471d7075681bea52046645ad7aa34e9c53751e.diff", "patch_tag": "STRUTS_6_0_0_RC1", "source_tag": "STRUTS_2_5_BETA3"}]