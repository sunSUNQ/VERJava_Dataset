[{"cve_id": "struts", "added_line": [{"target_line_num": 2, "target_line_code": "/*"}, {"target_line_num": 3, "target_line_code": "*  Licensed to the Apache Software Foundation (ASF) under one or more"}, {"target_line_num": 4, "target_line_code": "*  contributor license agreements.  See the NOTICE file distributed with"}, {"target_line_num": 5, "target_line_code": "*  this work for additional information regarding copyright ownership."}, {"target_line_num": 6, "target_line_code": "*  The ASF licenses this file to You under the Apache License, Version 2.0"}, {"target_line_num": 7, "target_line_code": "*  (the \"License\"); you may not use this file except in compliance with"}, {"target_line_num": 8, "target_line_code": "*  the License.  You may obtain a copy of the License at"}, {"target_line_num": 9, "target_line_code": "*"}, {"target_line_num": 11, "target_line_code": "*"}, {"target_line_num": 12, "target_line_code": "*  Unless required by applicable law or agreed to in writing, software"}, {"target_line_num": 13, "target_line_code": "*  distributed under the License is distributed on an \"AS IS\" BASIS,"}, {"target_line_num": 14, "target_line_code": "*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."}, {"target_line_num": 15, "target_line_code": "*  See the License for the specific language governing permissions and"}, {"target_line_num": 16, "target_line_code": "*  limitations under the License."}, {"target_line_num": 17, "target_line_code": "*/"}, {"target_line_num": 18, "target_line_code": "package org.apache.struts2.util.tomcat.buf;"}, {"target_line_num": 20, "target_line_code": "/**"}, {"target_line_num": 21, "target_line_code": "* This class implements some basic ASCII character handling functions."}, {"target_line_num": 22, "target_line_code": "*"}, {"target_line_num": 23, "target_line_code": "* @author dac@eng.sun.com"}, {"target_line_num": 24, "target_line_code": "* @author James Todd [gonzo@eng.sun.com]"}, {"target_line_num": 25, "target_line_code": "*/"}, {"target_line_num": 26, "target_line_code": "public final class Ascii {"}, {"target_line_num": 27, "target_line_code": "/*"}, {"target_line_num": 28, "target_line_code": "* Character translation tables."}, {"target_line_num": 29, "target_line_code": "*/"}, {"target_line_num": 31, "target_line_code": "private static final byte[] toUpper = new byte[256];"}, {"target_line_num": 32, "target_line_code": "private static final byte[] toLower = new byte[256];"}, {"target_line_num": 34, "target_line_code": "/*"}, {"target_line_num": 35, "target_line_code": "* Character type tables."}, {"target_line_num": 36, "target_line_code": "*/"}, {"target_line_num": 38, "target_line_code": "private static final boolean[] isAlpha = new boolean[256];"}, {"target_line_num": 39, "target_line_code": "private static final boolean[] isUpper = new boolean[256];"}, {"target_line_num": 40, "target_line_code": "private static final boolean[] isLower = new boolean[256];"}, {"target_line_num": 41, "target_line_code": "private static final boolean[] isWhite = new boolean[256];"}, {"target_line_num": 42, "target_line_code": "private static final boolean[] isDigit = new boolean[256];"}, {"target_line_num": 44, "target_line_code": "private static final long OVERFLOW_LIMIT = Long.MAX_VALUE / 10;"}, {"target_line_num": 46, "target_line_code": "/*"}, {"target_line_num": 47, "target_line_code": "* Initialize character translation and type tables."}, {"target_line_num": 48, "target_line_code": "*/"}, {"target_line_num": 49, "target_line_code": "static {"}, {"target_line_num": 50, "target_line_code": "for (int i = 0; i < 256; i++) {"}, {"target_line_num": 51, "target_line_code": "toUpper[i] = (byte)i;"}, {"target_line_num": 52, "target_line_code": "toLower[i] = (byte)i;"}, {"target_line_num": 55, "target_line_code": "for (int lc = 'a'; lc <= 'z'; lc++) {"}, {"target_line_num": 56, "target_line_code": "int uc = lc + 'A' - 'a';"}, {"target_line_num": 58, "target_line_code": "toUpper[lc] = (byte)uc;"}, {"target_line_num": 59, "target_line_code": "toLower[uc] = (byte)lc;"}, {"target_line_num": 60, "target_line_code": "isAlpha[lc] = true;"}, {"target_line_num": 61, "target_line_code": "isAlpha[uc] = true;"}, {"target_line_num": 62, "target_line_code": "isLower[lc] = true;"}, {"target_line_num": 63, "target_line_code": "isUpper[uc] = true;"}, {"target_line_num": 66, "target_line_code": "isWhite[ ' '] = true;"}, {"target_line_num": 67, "target_line_code": "isWhite['\\t'] = true;"}, {"target_line_num": 68, "target_line_code": "isWhite['\\r'] = true;"}, {"target_line_num": 69, "target_line_code": "isWhite['\\n'] = true;"}, {"target_line_num": 70, "target_line_code": "isWhite['\\f'] = true;"}, {"target_line_num": 71, "target_line_code": "isWhite['\\b'] = true;"}, {"target_line_num": 73, "target_line_code": "for (int d = '0'; d <= '9'; d++) {"}, {"target_line_num": 74, "target_line_code": "isDigit[d] = true;"}, {"target_line_num": 78, "target_line_code": "/**"}, {"target_line_num": 79, "target_line_code": "* Returns the upper case equivalent of the specified ASCII character."}, {"target_line_num": 80, "target_line_code": "* @deprecated Unused. Will be removed in Tomcat 8.0.x onwards."}, {"target_line_num": 81, "target_line_code": "*/"}, {"target_line_num": 82, "target_line_code": "@Deprecated"}, {"target_line_num": 83, "target_line_code": "public static int toUpper(int c) {"}, {"target_line_num": 84, "target_line_code": "return toUpper[c & 0xff] & 0xff;"}, {"target_line_num": 87, "target_line_code": "/**"}, {"target_line_num": 88, "target_line_code": "* Returns the lower case equivalent of the specified ASCII character."}, {"target_line_num": 89, "target_line_code": "*/"}, {"target_line_num": 91, "target_line_code": "public static int toLower(int c) {"}, {"target_line_num": 92, "target_line_code": "return toLower[c & 0xff] & 0xff;"}, {"target_line_num": 95, "target_line_code": "/**"}, {"target_line_num": 96, "target_line_code": "* Returns true if the specified ASCII character is upper or lower case."}, {"target_line_num": 97, "target_line_code": "* @deprecated Unused. Will be removed in Tomcat 8.0.x onwards."}, {"target_line_num": 98, "target_line_code": "*/"}, {"target_line_num": 99, "target_line_code": "@Deprecated"}, {"target_line_num": 100, "target_line_code": "public static boolean isAlpha(int c) {"}, {"target_line_num": 101, "target_line_code": "return isAlpha[c & 0xff];"}, {"target_line_num": 104, "target_line_code": "/**"}, {"target_line_num": 105, "target_line_code": "* Returns true if the specified ASCII character is upper case."}, {"target_line_num": 106, "target_line_code": "* @deprecated Unused. Will be removed in Tomcat 8.0.x onwards."}, {"target_line_num": 107, "target_line_code": "*/"}, {"target_line_num": 108, "target_line_code": "@Deprecated"}, {"target_line_num": 109, "target_line_code": "public static boolean isUpper(int c) {"}, {"target_line_num": 110, "target_line_code": "return isUpper[c & 0xff];"}, {"target_line_num": 113, "target_line_code": "/**"}, {"target_line_num": 114, "target_line_code": "* Returns true if the specified ASCII character is lower case."}, {"target_line_num": 115, "target_line_code": "* @deprecated Unused. Will be removed in Tomcat 8.0.x onwards."}, {"target_line_num": 116, "target_line_code": "*/"}, {"target_line_num": 117, "target_line_code": "@Deprecated"}, {"target_line_num": 118, "target_line_code": "public static boolean isLower(int c) {"}, {"target_line_num": 119, "target_line_code": "return isLower[c & 0xff];"}, {"target_line_num": 122, "target_line_code": "/**"}, {"target_line_num": 123, "target_line_code": "* Returns true if the specified ASCII character is white space."}, {"target_line_num": 124, "target_line_code": "* @deprecated Unused. Will be removed in Tomcat 8.0.x onwards."}, {"target_line_num": 125, "target_line_code": "*/"}, {"target_line_num": 126, "target_line_code": "@Deprecated"}, {"target_line_num": 127, "target_line_code": "public static boolean isWhite(int c) {"}, {"target_line_num": 128, "target_line_code": "return isWhite[c & 0xff];"}, {"target_line_num": 131, "target_line_code": "/**"}, {"target_line_num": 132, "target_line_code": "* Returns true if the specified ASCII character is a digit."}, {"target_line_num": 133, "target_line_code": "*/"}, {"target_line_num": 135, "target_line_code": "public static boolean isDigit(int c) {"}, {"target_line_num": 136, "target_line_code": "return isDigit[c & 0xff];"}, {"target_line_num": 139, "target_line_code": "/**"}, {"target_line_num": 140, "target_line_code": "* Parses an unsigned integer from the specified subarray of bytes."}, {"target_line_num": 141, "target_line_code": "* @param b the bytes to parse"}, {"target_line_num": 142, "target_line_code": "* @param off the start offset of the bytes"}, {"target_line_num": 143, "target_line_code": "* @param len the length of the bytes"}, {"target_line_num": 144, "target_line_code": "* @exception NumberFormatException if the integer format was invalid"}, {"target_line_num": 145, "target_line_code": "* @deprecated Unused. Will be removed in Tomcat 8.0.x onwards."}, {"target_line_num": 146, "target_line_code": "*/"}, {"target_line_num": 147, "target_line_code": "@Deprecated"}, {"target_line_num": 148, "target_line_code": "public static int parseInt(byte[] b, int off, int len)"}, {"target_line_num": 149, "target_line_code": "throws NumberFormatException"}, {"target_line_num": 150, "target_line_code": "{"}, {"target_line_num": 151, "target_line_code": "int c;"}, {"target_line_num": 153, "target_line_code": "if (b == null || len <= 0 || !isDigit(c = b[off++])) {"}, {"target_line_num": 154, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 157, "target_line_code": "int n = c - '0';"}, {"target_line_num": 159, "target_line_code": "while (--len > 0) {"}, {"target_line_num": 160, "target_line_code": "if (!isDigit(c = b[off++])) {"}, {"target_line_num": 161, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 163, "target_line_code": "n = n * 10 + c - '0';"}, {"target_line_num": 166, "target_line_code": "return n;"}, {"target_line_num": 169, "target_line_code": "/**"}, {"target_line_num": 170, "target_line_code": "* @deprecated Unused. Will be removed in Tomcat 8.0.x onwards."}, {"target_line_num": 171, "target_line_code": "*/"}, {"target_line_num": 172, "target_line_code": "@Deprecated"}, {"target_line_num": 173, "target_line_code": "public static int parseInt(char[] b, int off, int len)"}, {"target_line_num": 174, "target_line_code": "throws NumberFormatException"}, {"target_line_num": 175, "target_line_code": "{"}, {"target_line_num": 176, "target_line_code": "int c;"}, {"target_line_num": 178, "target_line_code": "if (b == null || len <= 0 || !isDigit(c = b[off++])) {"}, {"target_line_num": 179, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 182, "target_line_code": "int n = c - '0';"}, {"target_line_num": 184, "target_line_code": "while (--len > 0) {"}, {"target_line_num": 185, "target_line_code": "if (!isDigit(c = b[off++])) {"}, {"target_line_num": 186, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 188, "target_line_code": "n = n * 10 + c - '0';"}, {"target_line_num": 191, "target_line_code": "return n;"}, {"target_line_num": 194, "target_line_code": "/**"}, {"target_line_num": 195, "target_line_code": "* Parses an unsigned long from the specified subarray of bytes."}, {"target_line_num": 196, "target_line_code": "* @param b the bytes to parse"}, {"target_line_num": 197, "target_line_code": "* @param off the start offset of the bytes"}, {"target_line_num": 198, "target_line_code": "* @param len the length of the bytes"}, {"target_line_num": 199, "target_line_code": "* @exception NumberFormatException if the long format was invalid"}, {"target_line_num": 200, "target_line_code": "*/"}, {"target_line_num": 201, "target_line_code": "public static long parseLong(byte[] b, int off, int len)"}, {"target_line_num": 202, "target_line_code": "throws NumberFormatException"}, {"target_line_num": 203, "target_line_code": "{"}, {"target_line_num": 204, "target_line_code": "int c;"}, {"target_line_num": 206, "target_line_code": "if (b == null || len <= 0 || !isDigit(c = b[off++])) {"}, {"target_line_num": 207, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 210, "target_line_code": "long n = c - '0';"}, {"target_line_num": 211, "target_line_code": "while (--len > 0) {"}, {"target_line_num": 212, "target_line_code": "if (isDigit(c = b[off++]) &&"}, {"target_line_num": 213, "target_line_code": "(n < OVERFLOW_LIMIT || (n == OVERFLOW_LIMIT && (c - '0') < 8))) {"}, {"target_line_num": 214, "target_line_code": "n = n * 10 + c - '0';"}, {"target_line_num": 215, "target_line_code": "} else {"}, {"target_line_num": 216, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 220, "target_line_code": "return n;"}, {"target_line_num": 223, "target_line_code": "/**"}, {"target_line_num": 224, "target_line_code": "* @deprecated Unused. Will be removed in Tomcat 8.0.x onwards."}, {"target_line_num": 225, "target_line_code": "*/"}, {"target_line_num": 226, "target_line_code": "@Deprecated"}, {"target_line_num": 227, "target_line_code": "public static long parseLong(char[] b, int off, int len)"}, {"target_line_num": 228, "target_line_code": "throws NumberFormatException"}, {"target_line_num": 229, "target_line_code": "{"}, {"target_line_num": 230, "target_line_code": "int c;"}, {"target_line_num": 232, "target_line_code": "if (b == null || len <= 0 || !isDigit(c = b[off++])) {"}, {"target_line_num": 233, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 236, "target_line_code": "long n = c - '0';"}, {"target_line_num": 237, "target_line_code": "long m;"}, {"target_line_num": 239, "target_line_code": "while (--len > 0) {"}, {"target_line_num": 240, "target_line_code": "if (!isDigit(c = b[off++])) {"}, {"target_line_num": 241, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 243, "target_line_code": "m = n * 10 + c - '0';"}, {"target_line_num": 245, "target_line_code": "if (m < n) {"}, {"target_line_num": 247, "target_line_code": "throw new NumberFormatException();"}, {"target_line_num": 248, "target_line_code": "} else {"}, {"target_line_num": 249, "target_line_code": "n = m;"}, {"target_line_num": 253, "target_line_code": "return n;"}], "removed_line": [], "filename": "core/src/main/java/org/apache/struts2/util/tomcat/buf/Ascii.java", "patch_func": "no", "diff_file": "struts_CVE-2016-4003_76f188406eb9f17a06afcb5f49f0c44d749da0d2.diff", "patch_tag": "STRUTS_6_0_0_RC1", "source_tag": "STRUTS_2_5_BETA3"}]